package nachts;
import java_cup.runtime.*;
import java.util.ArrayList;
import java.util.LinkedList;
import java.util.List;

parser code {:
   ArrayList<String> errores = new ArrayList();
   Node Tree  = new Node();
   int cont=0;
   int contMain=0;


   public String token_name_from_id(int id) {
		// obtenidos de la clase sym.java
		switch (id) {
  case 2: return   "FUNCTION" ; 
  case 44: return  "L_KEY"   ;
  case 39: return  "OPSUM"   ;
  case 35: return  "OPCOND"   ;
  case 28: return  "OUTPUT"   ;
  case 27: return  "INPUT"   ;
  case 30: return  "CASE"   ;
  case 14: return  "INTEGER" ;  
  case 49: return  "R_PAR"  ; 
  case 20: return  "FOR"   ;
  case 15: return  "CHARACTER" ;  
  case 51: return  "SEMICOLON";   
  case 41: return  "OPASIGN";   
  case 31: return  "OPTION";   
  case 50: return  "COMMA";   
  case 4: return   "UPTO"  ;
  case 34: return  "OPREL"  ; 
  case 45: return  "R_KEY" ;  
  case  3: return  "NUM"  ;
  case 55: return  "MAIN"  ; 
  case 17: return  "IF"   ;
  case 54: return  "DOT"   ;
  case 33: return  "ID"   ;
  case 12: return  "CONSTSTRING";   
  case 47: return  "R_BRACKET";   
  case 16: return  "BOOLEAN";   
  case 0: return   "EOF"  ;
  case 21: return  "RETURN"  ; 
  case 23: return  "TRUE"   ;
  case 1: return   "error"  ;
  case 11: return  "FLOAT_VAL";   
  case 26: return  "NULL"   ;
  case 42: return  "OPASIGNADD";   
  case 40: return  "OPINC"   ;
  case 25: return  "BREAK"   ;
  case 22: return  "VOID"   ;
  case 29: return  "SWITCH"   ;
  case 52: return  "COLON"   ;
  case 18: return  "ELSE"   ;
  case 7: return   "VARIABLE" ; 
  case 19: return  "WHILE"   ;
  case 32: return  "DEFAULT"  ; 
  case 10: return  "FLOAT"   ;
  case 37: return  "OPMOD"   ;
  case 48: return  "L_PAR"   ;
  case 43: return  "OPASIGNMULT";   
  case 8: return   "STRING"  ;
  case 13: return  "CONSTCHAR";   
  case 36: return  "OPLOG"  ; 
  case 5: return   "DOWNTO";  
  case 53: return  "AT"   ;
  case 24: return  "FALSE"   ;
  case 46: return  "L_BRACKET";   
  case 38: return  "OPMULT" ;  
  case 9: return   "ELIF"  ;
  case 6: return   "STEP" ;   
			
			default: return "N/A";
		}
	}

	public void syntax_error(Symbol s) {
        report_error("Error sintáctico. No se esperaba el siguiente token: <" + s.value + ">. Línea: " + (s.right + 1) + ", Columna: " + (s.left + 1) + 	"\n", null);
        errores.add("Error sintáctico. No se esperaba el siguiente token: <" + s.value + ">. Línea: " + (s.right + 1) + ", Columna: " + (s.left + 1) + 	"\n");

	List expected = expected_token_ids();
        if (expected.size() != 0) {
            int id;
            String x = "";
            String inicio = "Se esperaba:  ";
            x += inicio ;
            for (int i = 0; i < expected.size(); i++) {
            	id = (int) expected.get(i);
            	if (i == expected.size() - 1) {
            		System.out.println(token_name_from_id(id));
                        x+= token_name_from_id(id);
            	} else {
            		System.out.print(token_name_from_id(id) + " | ");
                        x+= token_name_from_id(id)+ " | ";
            	}   
            }
            errores.add(x);
        } else { /* do nothing */ }
     }
        
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception {
        System.out.println("No se pudo reparar y continuar el análisis.");
    }
    

:}
action code {:
    
    
:}

terminal String FUNCTION,NUM,UPTO,DOWNTO,STEP,VARIABLE,STRING,ELIF,FLOAT, FLOAT_VAL,
                CONSTSTRING,CONSTCHAR,INTEGER,CHARACTER,BOOLEAN,IF,ELSE,
                WHILE,FOR,RETURN,VOID,TRUE,FALSE,BREAK,NULL,
                INPUT,OUTPUT,SWITCH,CASE,OPTION,DEFAULT,ID,
                OPREL,OPCOND,OPLOG,OPMOD,OPMULT,OPSUM,OPINC,OPASIGN,
                OPASIGNADD,OPASIGNMULT,L_KEY,R_KEY,L_BRACKET,R_BRACKET,
                L_PAR,R_PAR,COMMA,SEMICOLON,COLON,AT,DOT,MAIN;

non terminal Node inicio,dec_gen_fun,dec_funcion,parametros,
                nuevo_parametro,params_output,dec_general,dec_variable,dec_var,dec_inst,
             arr_cont,dec_var_inst,valor,math_op/*,s_op*/,sum_op,m_op,mult_op,
             val,dec_while,dec_for,dec_switch,list_op,new_op,dec_if,
             dec_else,dec_llamada_funcion,llamada_parametros,
             lista_valores,fin_llamada,condicion,valor_cond,dec_return,
             tipo,arreglo,arreglo2d,arr2_cont,val_posicion,mas_condicion,otra_condicion;

precedence left OPSUM,OPMULT;
precedence left OPASIGN;

start with inicio;

inicio ::= dec_funcion:dg dec_gen_fun:dgf
    {:
    System.err.println("Entra a inicio");
    parser.cont++;
    Node node = new Node();
    node.setEtiqueta("INICIO");
    node.setID(parser.cont);
    node.addHijos((Node) dg);
    node.addHijos((Node) dgf);
    
    parser.Tree = node;
    RESULT = node; 
    
    :} ;

dec_gen_fun ::= dec_funcion:df dec_gen_fun:dgf
            {:
                System.err.println("Entra a dec_gen_fun");
                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("dec_gen_fun");
                node.setID(parser.cont);
                node.addHijos((Node) df);
                node.addHijos((Node) dgf);  
                
                RESULT = node;
            :}
            | 
            {:
                parser.cont++;
                Node nodo = new Node();
				nodo.setEtiqueta("vacio");
				nodo.setID(parser.cont);
				
                RESULT = nodo;
            :}
           
           
;

dec_funcion ::= FUNCTION ID:id L_PAR parametros:parts R_PAR COLON tipo:tip L_KEY dec_general:deG R_KEY
            {:
               System.err.println("Entra a dec_funcion");
                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("dec_funcion");
                node.setID(parser.cont);

                parser.cont++;
                Node identificador =new Node();
                identificador.setEtiqueta("ID");
                identificador.setID(parser.cont);
                identificador.setValor(id);
                node.addHijos(identificador);
                node.addHijos((Node) parts);
                node.addHijos((Node) tip);
                node.addHijos((Node) deG);

                
                RESULT = node;
            :}
            |FUNCTION ID:id L_PAR parametros:parts R_PAR COLON MAIN L_KEY dec_general:deG R_KEY
            {:
               
                System.err.println("Entra a dec_funcion");
            
                parser.contMain++;
                if(parser.contMain>1){
                    parser.errores.add("Error! Se ha encontrado otra declaracion de main.");
                }
               
                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("dec_Funcion");
                node.setID(parser.cont);

                parser.cont++;
                Node identificador =new Node();
                identificador.setEtiqueta("ID");
                identificador.setID(parser.cont);
                identificador.setValor(id);
                parser.cont++;
                Node main =new Node();
                main.setEtiqueta("Main");
                main.setID(parser.cont);
                main.setValor("Main");

                
                node.addHijos(identificador);
                node.addHijos((Node) parts);
                node.addHijos(main);
                node.addHijos((Node) deG);
                RESULT = node;
            :}
            ;

parametros ::= VARIABLE ID:id COLON tipo:tip nuevo_parametro:nuP
                {:
                System.err.println("Entra a parametros 1");

                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("parametros");
                node.setID(parser.cont);

                parser.cont++;
                Node identificador =new Node();
                identificador.setEtiqueta("ID");
                identificador.setID(parser.cont);
                identificador.setValor(id);
                node.addHijos(identificador);
                node.addHijos((Node) tip);
                node.addHijos((Node) nuP);
                
                RESULT = node;
                :}
               |VARIABLE ID:id COLON tipo:tip
               {:
                System.err.println("Entra a parametros 1");

                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("parametros");
                node.setID(parser.cont);

                parser.cont++;
                Node identificador =new Node();
                identificador.setEtiqueta("ID");
                identificador.setID(parser.cont);
                identificador.setValor(id);
                node.addHijos(identificador);
                node.addHijos((Node) tip);

                RESULT = node;
               :}
               | VARIABLE ID:id L_BRACKET R_BRACKET COLON tipo:tip nuevo_parametro:nuP
                {:
                System.err.println("Entra a parametros 1");

                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("parametros");
                node.setID(parser.cont);

                parser.cont++;
                Node identificador =new Node();
                identificador.setEtiqueta("ID");
                identificador.setID(parser.cont);
                identificador.setValor(id);
                node.addHijos(identificador);
                node.addHijos((Node) tip);
                node.addHijos((Node) nuP);
                
                RESULT = node;
                :}
               |VARIABLE ID:id L_BRACKET R_BRACKET COLON tipo:tip
               {:
                System.err.println("Entra a parametros 1");

                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("parametros");
                node.setID(parser.cont);

                parser.cont++;
                Node identificador =new Node();
                identificador.setEtiqueta("ID");
                identificador.setID(parser.cont);
                identificador.setValor(id);
                node.addHijos(identificador);
                node.addHijos((Node) tip);

                RESULT = node;
               :}
               | VARIABLE ID:id L_BRACKET R_BRACKET L_BRACKET R_BRACKET COLON tipo:tip nuevo_parametro:nuP
                {:
                System.err.println("Entra a parametros 1");

                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("parametros");
                node.setID(parser.cont);

                parser.cont++;
                Node identificador =new Node();
                identificador.setEtiqueta("ID");
                identificador.setID(parser.cont);
                identificador.setValor(id);
                node.addHijos(identificador);
                node.addHijos((Node) tip);
                node.addHijos((Node) nuP);
                
                RESULT = node;
                :}
               |VARIABLE ID:id L_BRACKET R_BRACKET L_BRACKET R_BRACKET COLON tipo:tip
               {:
                System.err.println("Entra a parametros 1");

                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("parametros");
                node.setID(parser.cont);

                parser.cont++;
                Node identificador =new Node();
                identificador.setEtiqueta("ID");
                identificador.setID(parser.cont);
                identificador.setValor(id);
                node.addHijos(identificador);
                node.addHijos((Node) tip);

                RESULT = node;
               :} 
               |
               {:
                System.err.println("Entra a vacio");

                parser.cont++;
                Node nodo = new Node();
				nodo.setEtiqueta("vacio");
				nodo.setID(parser.cont);
                RESULT = nodo;
               :} ;

nuevo_parametro ::=COMMA VARIABLE ID:id COLON tipo:tip nuevo_parametro:nuP
                {:
                System.err.println("Entra a nuevo_parametro 1");

                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("nuevo_parametro");
                node.setID(parser.cont);

                parser.cont++;
                Node identificador =new Node();
                identificador.setEtiqueta("ID");
                identificador.setID(parser.cont);
                identificador.setValor(id);
                node.addHijos(identificador);
                node.addHijos((Node) tip);
                node.addHijos((Node) nuP);

                RESULT = node;
                :}
                | COMMA VARIABLE ID:id COLON tipo:tip
                {:
                System.err.println("Entra a nuevo_parametro 2");
                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("nuevo_parametro");
                node.setID(parser.cont);

                parser.cont++;
                Node identificador =new Node();
                identificador.setEtiqueta("ID");
                identificador.setID(parser.cont);
                identificador.setValor(id);
                node.addHijos(identificador);
                node.addHijos((Node) tip);
                RESULT = node;
                :}
                | COMMA VARIABLE ID:id L_BRACKET R_BRACKET COLON tipo:tip nuevo_parametro:nuP
                {:
                System.err.println("Entra a nuevo_parametro 1");

                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("nuevo_parametro");
                node.setID(parser.cont);

                parser.cont++;
                Node identificador =new Node();
                identificador.setEtiqueta("ID");
                identificador.setID(parser.cont);
                identificador.setValor(id);
                node.addHijos(identificador);
                node.addHijos((Node) tip);
                node.addHijos((Node) nuP);

                RESULT = node;
                :}
                | COMMA VARIABLE ID:id L_BRACKET R_BRACKET COLON tipo:tip
                {:
                System.err.println("Entra a nuevo_parametro 2");
                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("nuevo_parametro");
                node.setID(parser.cont);

                parser.cont++;
                Node identificador =new Node();
                identificador.setEtiqueta("ID");
                identificador.setID(parser.cont);
                identificador.setValor(id);
                node.addHijos(identificador);
                node.addHijos((Node) tip);
                RESULT = node;
                :}
                |COMMA VARIABLE ID:id L_BRACKET R_BRACKET L_BRACKET R_BRACKET COLON tipo:tip nuevo_parametro:nuP
                {:
                System.err.println("Entra a nuevo_parametro 1");

                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("nuevo_parametro");
                node.setID(parser.cont);

                parser.cont++;
                Node identificador =new Node();
                identificador.setEtiqueta("ID");
                identificador.setID(parser.cont);
                identificador.setValor(id);
                node.addHijos(identificador);
                node.addHijos((Node) tip);
                node.addHijos((Node) nuP);

                RESULT = node;
                :}
                | COMMA VARIABLE ID:id L_BRACKET R_BRACKET L_BRACKET R_BRACKET COLON tipo:tip
                {:
                System.err.println("Entra a nuevo_parametro 2");
                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("nuevo_parametro");
                node.setID(parser.cont);

                parser.cont++;
                Node identificador =new Node();
                identificador.setEtiqueta("ID");
                identificador.setID(parser.cont);
                identificador.setValor(id);
                node.addHijos(identificador);
                node.addHijos((Node) tip);
                RESULT = node;
                :}
                ;
/*
func_lenguaje ::= func_input:fuI
                  {:
                    System.err.println("Entra a func_lenguaje 1");
                    parser.cont++;
                    Node node = new Node();
                    node.setEtiqueta("func_lenguaje");
                    node.setID(parser.cont);
                    node.addHijos((Node) fuI);
                    RESULT = node;
                  :}
                  | func_output:fuO
                  {:
                    System.err.println("Entra a func_lenguaje 2");
                    parser.cont++;
                    Node node = new Node();
                    node.setEtiqueta("func_lenguaje");
                    node.setID(parser.cont);
                    node.addHijos((Node) fuO);
                    RESULT = node;
                  :}  
                  ;
                  
func_input ::= INPUT L_PAR ID:id COMMA tipo:tip R_PAR 
               {:
                System.err.println("Entra a func_input");
                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("func_input");
                node.setID(parser.cont);
                parser.cont++;
                Node identificador =new Node();
                identificador.setEtiqueta("ID");
                identificador.setID(parser.cont);
                identificador.setValor(id);
                node.addHijos(identificador);
                node.addHijos((Node) tip);
                RESULT = node;
                :}
                ;

func_output ::= OUTPUT L_PAR CONSTSTRING:cs R_PAR  
                {:
                System.err.println("Entra a func_output 1");
                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("func_output");
                node.setID(parser.cont);
                parser.cont++;
                Node const_string =new Node();
                const_string.setEtiqueta("const_string");
                const_string.setID(parser.cont);
                String temp = cs.replaceAll("\"", "");

                const_string.setValor(temp);
                node.addHijos(const_string);
                RESULT = node;
                :}
                |OUTPUT L_PAR CONSTCHAR:cs R_PAR  
                {:
                System.err.println("Entra a func_output 1");
                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("func_output");
                node.setID(parser.cont);
                parser.cont++;
                Node const_string =new Node();
                const_string.setEtiqueta("const_char");
                const_string.setID(parser.cont);
                String temp = cs.replaceAll("\'", "");

                const_string.setValor(temp);
                node.addHijos(const_string);
                RESULT = node;
                :}     
                | OUTPUT L_PAR NUM:nm R_PAR 
                {:
                System.err.println("Entra a func_output 2");
                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("func_output");
                node.setID(parser.cont);

                parser.cont++;
                Node num =new Node();
                num.setEtiqueta("Num");
                num.setID(parser.cont);
                num.setValor(nm);
                node.addHijos(num);
                RESULT = node;
                :}
                | OUTPUT L_PAR ID:id R_PAR  
                {:
                System.err.println("Entra a func_output 3");
                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("func_output");
                node.setID(parser.cont);

                parser.cont++;
                Node identificador =new Node();
                identificador.setEtiqueta("ID");
                identificador.setID(parser.cont);
                identificador.setValor(id);
                node.addHijos(identificador);
                RESULT = node;
                :}
                | OUTPUT L_PAR ID:id DOT AT  L_PAR val_posicion:vp R_PAR R_PAR  
                {:
                System.err.println("Entra a func_output 3");
                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("func_output");
                node.setID(parser.cont);

                parser.cont++;
                Node identificador =new Node();
                identificador.setEtiqueta("ID");
                identificador.setID(parser.cont);
                identificador.setValor(id);
                node.addHijos(identificador);
                node.addHijos((Node) vp);
                RESULT = node;
                :}
                | OUTPUT L_PAR ID:id DOT AT L_PAR val_posicion:vp1 COMMA val_posicion:vp2 R_PAR R_PAR  
                {:
                System.err.println("Entra a func_output 3");
                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("func_output");
                node.setID(parser.cont);

                parser.cont++;
                Node identificador =new Node();
                identificador.setEtiqueta("ID");
                identificador.setID(parser.cont);
                identificador.setValor(id);
                node.addHijos(identificador);
                node.addHijos((Node) vp1);
                node.addHijos((Node) vp2);
                RESULT = node;
                :}    
                ; */

dec_general ::= dec_variable:dva dec_general:dg
               {:
                System.err.println("Entra a dec_general de vairable");
                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("dec_general");
                node.setID(parser.cont);
                node.addHijos((Node) dva);
                node.addHijos((Node) dg);
                RESULT = node;
               :}

               | dec_while:dw dec_general:dg
               {:
                System.err.println("Entra a dec_general de while");
                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("dec_general");
                node.setID(parser.cont);
                node.addHijos((Node) dw);
                node.addHijos((Node) dg);
                RESULT = node;
                :}
               | dec_for:df dec_general:dg
               {:
                System.err.println("Entra a dec_general de for");
                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("dec_general");
                node.setID(parser.cont);
                node.addHijos((Node) df);
                node.addHijos((Node) dg);
                RESULT = node;
                :}
               | dec_switch:ds dec_general:dg
                {:
                System.err.println("Entra a dec_general de switch");
                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("dec_general");
                node.setID(parser.cont);
                node.addHijos((Node) ds);
                node.addHijos((Node) dg);
                RESULT = node;
                :} 
               |dec_if:di dec_general:dg
               {:
               System.err.println("Entra a dec_general de if");
                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("dec_general");
                node.setID(parser.cont);
                node.addHijos((Node) di);
                node.addHijos((Node) dg);
                RESULT = node;
               :}
               |dec_llamada_funcion:dlf SEMICOLON dec_general:dg
               {:
                System.err.println("Entra a dec_general de llamada_funcion");
                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("dec_general");
                node.setID(parser.cont);
                node.addHijos((Node) dlf);
                node.addHijos((Node) dg);
                RESULT = node;
               :}
               |dec_var_inst:dvi dec_general:dg
               {:
                System.err.println("Entra a dec_general de dec_var_inst");
                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("dec_general");
                node.setID(parser.cont);
                node.addHijos((Node) dvi);
                node.addHijos((Node) dg);
                RESULT = node;
                :}
               /*|func_lenguaje:fl SEMICOLON dec_general:dg
               {:
                System.err.println("Entra a dec_general de func_lenguaje");
                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("dec_general");
                node.setID(parser.cont);
                node.addHijos((Node) fl);
                node.addHijos((Node) dg);
                RESULT = node;
                :}*/
               | dec_return:dr SEMICOLON dec_general:dg
                {:
                System.err.println("Entra a dec_general de dec_return");
                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("dec_general");
                node.setID(parser.cont);
                node.addHijos((Node) dr);
                node.addHijos((Node) dg);
                RESULT = node;
                :}
                |error 
                {:
                System.err.println("Entra a dec_general nos vamos para el error ");
                Node node = new Node();
                RESULT = node;
                :}
                |error SEMICOLON
                {:
                System.err.println("Entra a dec_general nos vamos para el error ");
                Node node = new Node();
                RESULT = node;
                :}
                | 
                {:
                System.err.println("Entra a dec_general a vacio");
                parser.cont++;
                Node nodo = new Node();
				nodo.setEtiqueta("vacio");
				nodo.setID(parser.cont);
                RESULT = nodo;
                :}
                ;

dec_variable ::= VARIABLE ID:id COLON tipo:tip dec_var:dv
                 {:
                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("dec_variable");
                node.setID(parser.cont);

                parser.cont++;
                Node identificador =new Node();
                identificador.setEtiqueta("ID");
                identificador.setID(parser.cont);
                identificador.setValor(id);
                node.addHijos(identificador);
                node.addHijos((Node) tip);
                node.addHijos((Node) dv);
                RESULT = node;
                :}   
                | VARIABLE ID:id L_BRACKET val_posicion:vp R_BRACKET COLON tipo:tip dec_inst:di dec_var:dv 
                {:
                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("dec_variable");
                node.setID(parser.cont);

                parser.cont++;
                Node identificador =new Node();
                identificador.setEtiqueta("ID");
                identificador.setID(parser.cont);
                identificador.setValor(id);
                node.addHijos(identificador);
                node.addHijos((Node) vp);
                node.addHijos((Node) tip);
                node.addHijos((Node) di);
                node.addHijos((Node) dv);
                RESULT = node;
                :}
                |VARIABLE ID:id L_BRACKET val_posicion:vp1 R_BRACKET L_BRACKET val_posicion:vp2 R_BRACKET COLON tipo:tip dec_inst:di dec_var:dv
                {:
                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("dec_variable");
                node.setID(parser.cont);

                parser.cont++;
                Node identificador =new Node();
                identificador.setEtiqueta("ID");
                identificador.setID(parser.cont);
                identificador.setValor(id);
                node.addHijos(identificador);
                node.addHijos((Node) vp1);
                node.addHijos((Node) vp2);
                node.addHijos((Node) tip);
                node.addHijos((Node) di);
                node.addHijos((Node) dv);
                RESULT = node;
                :}
                ;

dec_var ::= dec_inst:di SEMICOLON
            {:
                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("dec_var");
                node.setID(parser.cont);
                node.addHijos((Node) di);
                RESULT = node;
            :}
            | COMMA ID:id COLON tipo:tip dec_inst:di dec_var:dv
            {:
                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("dec_var");
                node.setID(parser.cont);

                parser.cont++;
                Node identificador =new Node();
                identificador.setEtiqueta("ID");
                identificador.setID(parser.cont);
                identificador.setValor(id);
                node.addHijos(identificador);
                node.addHijos((Node) tip);
                node.addHijos((Node) di);
                node.addHijos((Node) dv);
                RESULT = node;
            :}
            | COMMA ID:id L_BRACKET val_posicion:vp R_BRACKET COLON tipo:tip dec_inst:di dec_var:dv
            {:
                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("dec_var");
                node.setID(parser.cont);

                parser.cont++;
                Node identificador =new Node();
                identificador.setEtiqueta("ID");
                identificador.setID(parser.cont);
                identificador.setValor(id);
                node.addHijos(identificador);
                node.addHijos((Node) vp);
                node.addHijos((Node) tip);
                node.addHijos((Node) di);
                node.addHijos((Node) dv);
                RESULT = node;
            :}
            | COMMA ID:id L_BRACKET val_posicion:vp1 R_BRACKET L_BRACKET val_posicion:vp2 R_BRACKET COLON tipo:tip dec_inst:di dec_var:dv
            {:
                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("dec_var");
                node.setID(parser.cont);

                parser.cont++;
                Node identificador =new Node();
                identificador.setEtiqueta("ID");
                identificador.setID(parser.cont);
                identificador.setValor(id);
                node.addHijos(identificador);
                node.addHijos((Node) vp1);
                node.addHijos((Node) vp2);
                node.addHijos((Node) tip);
                node.addHijos((Node) di);
                node.addHijos((Node) dv);
                RESULT = node;
            :}
;

dec_inst ::= /*OPASIGN ID:id
             {:
                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("dec_inst");
                node.setID(parser.cont);

                parser.cont++;
                Node identificador =new Node();
                identificador.setEtiqueta("ID");
                identificador.setID(parser.cont);
                identificador.setValor(id);
                node.addHijos(identificador);
                RESULT = node;
             :}
             | OPASIGN ID:id DOT AT L_PAR val_posicion:vp R_PAR
             {:
                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("dec_inst");
                node.setID(parser.cont);

                parser.cont++;
                Node identificador =new Node();
                identificador.setEtiqueta("ID");
                identificador.setID(parser.cont);
                identificador.setValor(id);
                node.addHijos(identificador);
                node.addHijos((Node) vp);
                RESULT = node;
             :}
             | OPASIGN NUM:nm 
             {:
                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("dec_inst");
                node.setID(parser.cont);

                parser.cont++;
                Node num =new Node();
                num.setEtiqueta("num");
                num.setID(parser.cont);
                num.setValor(nm);
                node.addHijos(num);
                RESULT = node;
             :}
             |*/ OPASIGN FLOAT_VAL:nm 
             {:
                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("dec_inst");
                node.setID(parser.cont);

                parser.cont++;
                Node num =new Node();
                num.setEtiqueta("float");
                num.setID(parser.cont);
                num.setValor(nm);
                node.addHijos(num);
                RESULT = node;
             :}
             | OPASIGN CONSTSTRING:cs
             {:
                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("dec_inst");
                node.setID(parser.cont);

                parser.cont++;
                Node const_string =new Node();
                const_string.setEtiqueta("const string");
                const_string.setID(parser.cont);
                const_string.setValor(cs.replaceAll("\"",""));
                node.addHijos(const_string);
                RESULT = node;
             :}
             | OPASIGN CONSTCHAR:cc  
             {:
                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("dec_inst");
                node.setID(parser.cont);

                parser.cont++;
                Node const_char =new Node();
                const_char.setEtiqueta("const char");
                const_char.setID(parser.cont);
                const_char.setValor(cc.replaceAll("\'",""));
                node.addHijos(const_char);
                RESULT = node;
             :}
             | OPASIGN TRUE:tru
             {:
                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("dec_inst");
                node.setID(parser.cont);

                parser.cont++;
                Node bool_true =new Node();
                bool_true.setEtiqueta("true");
                bool_true.setID(parser.cont);
                bool_true.setValor(tru);
                node.addHijos(bool_true);
                RESULT = node;
             :}
             | OPASIGN FALSE:fals 
             {:
                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("dec_inst");
                node.setID(parser.cont);

                parser.cont++;
                Node bool_false =new Node();
                bool_false.setEtiqueta("false");
                bool_false.setID(parser.cont);
                bool_false.setValor(fals);
                node.addHijos(bool_false);
                RESULT = node;
             :}
             /*| OPASIGN dec_llamada_funcion:dlf
             {:
                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("dec_inst");
                node.setID(parser.cont);
                node.addHijos((Node) dlf);
                RESULT = node;
             :}*/
             | OPASIGN arreglo:arr 
             {:
                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("dec_inst");
                node.setID(parser.cont);
                node.addHijos((Node) arr);
                RESULT = node;
             :}
             | OPASIGN arreglo2d:arr
             {:
                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("dec_inst");
                node.setID(parser.cont);
                node.addHijos((Node) arr);
                RESULT = node;
             :}
             | OPASIGN math_op:mo
             {:
                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("dec_inst");
                node.setID(parser.cont);
                node.addHijos((Node) mo);
                RESULT = node;
             :}
             |
             {:
                parser.cont++;
                Node node = new Node();
				node.setEtiqueta("vacio");
				node.setID(parser.cont);
                RESULT = node;
             :}
              ;
arreglo2d ::=L_KEY arreglo:arr arr2_cont:arc R_KEY
             {:
                parser.cont++;
                Node node=new Node();
                node.setEtiqueta("arreglo2d");
                node.setID(parser.cont);
                node.addHijos((Node) arr);
                node.addHijos((Node) arc);
                RESULT=node;
             :}
             |error R_KEY
                {:
                System.err.println("arreglo2d error ");
                Node node = new Node();
                RESULT = node;
                :}
            ;
arr2_cont ::=COMMA arreglo:arr arr2_cont:arc
            {:
                parser.cont++;
                Node node=new Node();
                node.setEtiqueta("arr2_cont");
                node.setID(parser.cont);
                node.addHijos((Node) arr);
                node.addHijos((Node) arc);
                RESULT=node;
            :}
            |
            {:
                parser.cont++;
                Node nodo = new Node();
				nodo.setEtiqueta("vacio");
				nodo.setID(parser.cont);
                RESULT = nodo;
            :}
            
            ;
arreglo ::=L_KEY valor:va arr_cont:arc R_KEY
             {:
                parser.cont++;
                Node node=new Node();
                node.setEtiqueta("arreglo");
                node.setID(parser.cont);
                node.addHijos((Node) va);
                node.addHijos((Node) arc);
                RESULT=node;
             :}
            ;
arr_cont ::= COMMA valor:va arr_cont:arc
             {:
                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("arr_cont");
                node.setID(parser.cont);
                node.addHijos((Node) va);
                node.addHijos((Node) arc);
                RESULT = node;
            :}
            |
            {:
                parser.cont++;
                Node nodo = new Node();
				nodo.setEtiqueta("vacio");
				nodo.setID(parser.cont);
                RESULT = nodo;
            :}
            ;

dec_var_inst ::= ID:id OPASIGN valor:va SEMICOLON
                {:
                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("dec_var_inst");
                node.setID(parser.cont);

                parser.cont++;
                Node identificador =new Node();
                identificador.setEtiqueta("ID");
                identificador.setID(parser.cont);
                identificador.setValor(id);
                node.addHijos(identificador);
                node.addHijos((Node) va);
                RESULT = node;
                :}
                |ID:id DOT AT L_PAR val_posicion:vp R_PAR OPASIGN valor:va SEMICOLON
                {:
                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("dec_var_inst");
                node.setID(parser.cont);

                parser.cont++;
                Node identificador =new Node();
                identificador.setEtiqueta("ID");
                identificador.setID(parser.cont);
                identificador.setValor(id);
                node.addHijos(identificador);
                node.addHijos((Node) vp);
                node.addHijos((Node) va);
                RESULT = node;
                :}
                | ID:id OPASIGNADD valor:va SEMICOLON
                {:
                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("dec_var_inst");
                node.setID(parser.cont);

                parser.cont++;
                Node identificador =new Node();
                identificador.setEtiqueta("ID");
                identificador.setID(parser.cont);
                identificador.setValor(id);
                node.addHijos(identificador);
                node.addHijos((Node) va);
                RESULT = node;
                :}
                | ID:id OPASIGNMULT NUM:nm SEMICOLON
                {:
                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("dec_var_inst");
                node.setID(parser.cont);

                parser.cont++;
                Node identificador =new Node();
                identificador.setEtiqueta("ID");
                identificador.setID(parser.cont);
                identificador.setValor(id);
                parser.cont++;
                Node num =new Node();
                num.setEtiqueta("num");
                num.setID(parser.cont);
                num.setValor(nm);
                node.addHijos(identificador);
                node.addHijos(num);
                RESULT = node;
                :}
                | ID:id OPINC SEMICOLON
                {:
                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("dec_var_inst");
                node.setID(parser.cont);

                parser.cont++;
                Node identificador =new Node();
                identificador.setEtiqueta("ID");
                identificador.setID(parser.cont);
                identificador.setValor(id);
                node.addHijos(identificador);
                RESULT = node;
                :}
                | ID:id DOT AT L_PAR val_posicion:vp1 COMMA val_posicion:vp2 R_PAR OPASIGN valor:va SEMICOLON
                {:
                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("dec_var_inst");
                node.setID(parser.cont);

                parser.cont++;
                Node identificador =new Node();
                identificador.setEtiqueta("ID");
                identificador.setID(parser.cont);
                identificador.setValor(id);
                node.addHijos(identificador);
                node.addHijos((Node) vp1);
                node.addHijos((Node) vp2);
                node.addHijos((Node) va);
                RESULT = node;
                :}
                ;

valor ::=  CONSTSTRING:cs
           {:
                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("valor");
                node.setID(parser.cont);
                
                parser.cont++;
                Node const_string = new Node();
                const_string.setEtiqueta("const string");
                const_string.setID(parser.cont);
                if(cs.equals("")){
                    const_string.setValor("empty");
                }else{
                    const_string.setValor(cs);
                }    
                node.setValor(const_string.getValor().replaceAll("\"",""));

                RESULT = node;
           :}
           | CONSTCHAR:cc
           {:
                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("valor");
                node.setID(parser.cont);
                
                parser.cont++;
                Node const_char = new Node();
                const_char.setEtiqueta("const char");
                const_char.setID(parser.cont);
                const_char.setValor(cc);

                node.setValor(const_char.getValor());
                RESULT = node;
           :}
           | TRUE:tru
           {:
                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("valor");
                node.setID(parser.cont);
                
                parser.cont++;
                Node bool_true = new Node();
                bool_true.setEtiqueta("true");
                bool_true.setID(parser.cont);
                bool_true.setValor(tru);

                node.setValor(bool_true.getValor());
                RESULT = node;
           :}
           | FALSE:fals
           {:
                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("valor");
                node.setID(parser.cont);
                
                parser.cont++;
                Node bool_false = new Node();
                bool_false.setEtiqueta("false");
                bool_false.setID(parser.cont);
                bool_false.setValor(fals);

                node.setValor(bool_false.getValor());
                RESULT = node;
           :}
           /*| NUM:num
           {:
                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("valor");
                node.setID(parser.cont);
                
                parser.cont++;
                Node num_int = new Node();
                num_int.setEtiqueta("INT");
                num_int.setID(parser.cont);
                num_int.setValor(num);

                node.setValor(num_int.getValor());
                RESULT = node;
           :}*/
           | FLOAT_VAL:flt
           {:
                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("valor");
                node.setID(parser.cont);
                
                parser.cont++;
                Node num_flt = new Node();
                num_flt.setEtiqueta("FLOAT");
                num_flt.setID(parser.cont);
                num_flt.setValor(flt);

                node.setValor(num_flt.getValor());
                RESULT = node;
           :}
           | math_op:mop
           {:
                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("valor");
                node.setID(parser.cont);
                node.addHijos((Node) mop);
                RESULT = node;
           :}
           /*| dec_llamada_funcion:dlf
            {:
                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("valor");
                node.setID(parser.cont);
                node.addHijos((Node) dlf);
                RESULT = node;
            :}*/
            /*| ID:id
            {:
                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("valor");
                node.setID(parser.cont);
                
                parser.cont++;
                Node identificador = new Node();
                identificador.setEtiqueta("ID");
                identificador.setID(parser.cont);
                identificador.setValor(id);

                node.setValor(identificador.getValor());
                RESULT = node;
            :}*/
            /*| ID:id DOT AT L_PAR val_posicion:vp R_PAR 
            {:
                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("valor");
                node.setID(parser.cont);
                
                parser.cont++;
                Node identificador = new Node();
                identificador.setEtiqueta("ID");
                identificador.setID(parser.cont);
                identificador.setValor(id);
                node.addHijos(identificador);
                node.addHijos((Node) vp);
                node.setValor("");

                RESULT = node;
            :}*/
            /*| ID:id DOT AT L_PAR val_posicion:vp1 COMMA val_posicion:vp2 R_PAR 
            {:
                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("valor");
                node.setID(parser.cont);
                
                parser.cont++;
                Node identificador = new Node();
                identificador.setEtiqueta("ID");
                identificador.setID(parser.cont);
                identificador.setValor(id);
                node.addHijos(identificador);
                node.addHijos((Node) vp1);
                node.addHijos((Node) vp2);
                node.setValor("");

                RESULT = node;
            :}*/
            ;

/*math_op ::= s_op:so
            {:
                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("math_op");
                node.setID(parser.cont);
                node.addHijos((Node) so);
                RESULT = node;
            :}
            | m_op:mo
            {:
                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("math_op");
                node.setID(parser.cont);
                node.addHijos((Node) mo);
                RESULT = node;
            :}
            ;

s_op ::= val:vl sum_op:sum
            {:
                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("s_op");
                node.setID(parser.cont);
                node.addHijos((Node) vl);
                node.addHijos((Node) sum);
                RESULT = node;
            :};

sum_op ::= OPSUM val:vl sum_op:sum
            {:
                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("sum_op");
                node.setID(parser.cont);
                node.addHijos((Node) vl);
                node.addHijos((Node) sum);
                RESULT = node;
            :}
            | OPSUM val:vl mult_op:mult
            {:
                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("sum_op");
                node.setID(parser.cont);
                node.addHijos((Node) vl);
                node.addHijos((Node) mult);
                RESULT = node;
            :}
            | OPSUM val:vl
            {:
                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("sum_op");
                node.setID(parser.cont);
                node.addHijos((Node) vl);
                RESULT = node;
            :} 
            ;

m_op ::= val:vl mult_op:mult 
            {:
                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("m_op");
                node.setID(parser.cont);
                node.addHijos((Node) vl);
                node.addHijos((Node) mult);
                RESULT = node;
            :};
            
mult_op ::= OPMULT val:vl mult_op:mult
            {:
                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("mult_op");
                node.setID(parser.cont);
                node.addHijos((Node) vl);
                node.addHijos((Node) mult);
                RESULT = node;
            :}
            | OPMULT val:vl sum_op:sum
            {:
                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("mult_op");
                node.setID(parser.cont);
                node.addHijos((Node) vl);
                node.addHijos((Node) sum);
                RESULT = node;
            :}
            | OPMULT val:vl
            {:
                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("mult_op");
                node.setID(parser.cont);
                node.addHijos((Node) vl);
                RESULT = node;
            :} 
            ;*/
math_op ::= m_op:mult sum_op:sum
            {:
                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("math_op");
                node.setID(parser.cont);
                node.addHijos((Node) mult);
                node.addHijos((Node) sum);
                RESULT = node;
            :}
            ;
sum_op ::= OPSUM m_op:mult sum_op:sum
            {:
                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("math_op +");
                node.setID(parser.cont);
                node.addHijos((Node) mult);
                node.addHijos((Node) sum);
                RESULT = node;
            :}
            |
            {:
                parser.cont++;
                Node nodo = new Node();
				nodo.setEtiqueta("vacio");
				nodo.setID(parser.cont);
                RESULT = nodo;
            :}
            ;
m_op ::= val:vl mult_op:mult
        {:
                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("math_op");
                node.setID(parser.cont);
                node.addHijos((Node) vl);
                node.addHijos((Node) mult);
                RESULT = node;
        :}
        ;
mult_op ::= OPMULT val:vl mult_op:mult
            {:
                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("math_op *");
                node.setID(parser.cont);
                node.addHijos((Node) vl);
                node.addHijos((Node) mult);
                RESULT = node;
            :}
            |
            {:
                parser.cont++;
                Node nodo = new Node();
				nodo.setEtiqueta("vacio");
				nodo.setID(parser.cont);
                RESULT = nodo;
            :}
            ;


val ::= ID:id
        {:
                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("val");
                node.setID(parser.cont);
                
                parser.cont++;
                Node identificador = new Node();
                identificador.setEtiqueta("ID");
                identificador.setID(parser.cont);
                identificador.setValor(id);

                node.setValor(identificador.getValor());
                RESULT = node;
        :}
        | ID:id DOT AT L_PAR val_posicion:vp R_PAR 
        {:
                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("val");
                node.setID(parser.cont);
                
                parser.cont++;
                Node identificador = new Node();
                identificador.setEtiqueta("ID");
                identificador.setID(parser.cont);
                identificador.setValor(id);
                node.addHijos(identificador);
                node.addHijos((Node) vp);
                node.setValor("");

                RESULT = node;
            :}
            | ID:id DOT AT L_PAR val_posicion:vp1 COMMA val_posicion:vp2 R_PAR 
            {:
                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("val");
                node.setID(parser.cont);
                
                parser.cont++;
                Node identificador = new Node();
                identificador.setEtiqueta("ID");
                identificador.setID(parser.cont);
                identificador.setValor(id);
                node.addHijos(identificador);
                node.addHijos((Node) vp1);
                node.addHijos((Node) vp2);
                node.setValor("");

                RESULT = node;
        :}
        | NUM:nm
        {:
                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("val");
                node.setID(parser.cont);
                
                parser.cont++;
                Node num = new Node();
                num.setEtiqueta("num");
                num.setID(parser.cont);
                num.setValor(nm);

                node.setValor(num.getValor());
                RESULT = node;
        :}
        | dec_llamada_funcion:dlf
        {:
                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("val");
                node.setID(parser.cont);
                node.addHijos((Node) dlf);
                RESULT = node;
        :}
        | L_PAR math_op:mo R_PAR 
        {:
                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("val");
                node.setID(parser.cont);
                node.addHijos((Node) mo);
                RESULT = node;
        :}
        ;

dec_while ::= WHILE L_PAR condicion:cond R_PAR L_KEY dec_general:dg R_KEY
            {:
                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("dec_while");
                node.setID(parser.cont);
                node.addHijos((Node) cond);
                node.addHijos((Node) dg);
                RESULT = node;
            :}
;

dec_for ::= FOR L_PAR ID:id COMMA val_posicion:nm1 UPTO val_posicion:nm2 COMMA STEP L_PAR val_posicion:nm3 R_PAR R_PAR L_KEY dec_general:dg R_KEY
            {:
                System.err.println("Entra a dec_for 1");
                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("dec_for");
                node.setID(parser.cont);

                parser.cont++;
                Node identificador = new Node();
                identificador.setEtiqueta("ID");
                identificador.setID(parser.cont);
                identificador.setValor(id);
                /*parser.cont++;
                Node num1 =new Node();
                num1.setEtiqueta("num");
                num1.setID(parser.cont);
                num1.setValor(nm1);
                parser.cont++;
                Node num2 =new Node();
                num2.setEtiqueta("num");
                num2.setID(parser.cont);
                num2.setValor(nm2);
                parser.cont++;
                Node num3 =new Node();
                num3.setEtiqueta("num");
                num3.setID(parser.cont);
                num3.setValor(nm3);*/     
                node.addHijos(identificador);
                node.addHijos((Node) nm1);
                node.addHijos((Node) nm2);
                node.addHijos((Node) nm3);
                node.addHijos((Node) dg);
                RESULT = node;
            :}
            | FOR L_PAR ID:id COMMA val_posicion:nm1 DOWNTO val_posicion:nm2 COMMA STEP L_PAR val_posicion:nm3 R_PAR R_PAR L_KEY dec_general:dg R_KEY
            {:
                System.err.println("Entra a dec_for 2");
                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("dec_for");
                node.setID(parser.cont);

                parser.cont++;
                Node identificador = new Node();
                identificador.setEtiqueta("ID");
                identificador.setID(parser.cont);
                identificador.setValor(id);
                /*parser.cont++;
                Node num1 =new Node();
                num1.setEtiqueta("num");
                num1.setID(parser.cont);
                num1.setValor(nm1);
                parser.cont++;
                Node num2 =new Node();
                num2.setEtiqueta("num");
                num2.setID(parser.cont);
                num2.setValor(nm2);
                parser.cont++;
                Node num3 =new Node();
                num3.setEtiqueta("num");
                num3.setID(parser.cont);
                num3.setValor(nm3);*/     
                node.addHijos(identificador);
                node.addHijos((Node) nm1);
                node.addHijos((Node) nm2);
                node.addHijos((Node) nm3);
                node.addHijos((Node) dg);
                RESULT = node;
            :}
            | FOR L_PAR VARIABLE ID:id COLON INTEGER COMMA val_posicion:nm1 UPTO val_posicion:nm2 COMMA STEP L_PAR val_posicion:nm3 R_PAR R_PAR L_KEY dec_general:dg R_KEY
            {:
                System.err.println("Entra a dec_for 3");
                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("dec_for");
                node.setID(parser.cont);

                parser.cont++;
                Node identificador = new Node();
                identificador.setEtiqueta("ID");
                identificador.setID(parser.cont);
                identificador.setValor(id);
                /*parser.cont++;
                Node num1 =new Node();
                num1.setEtiqueta("num");
                num1.setID(parser.cont);
                num1.setValor(nm1);
                parser.cont++;
                Node num2 =new Node();
                num2.setEtiqueta("num");
                num2.setID(parser.cont);
                num2.setValor(nm2);
                parser.cont++;
                Node num3 =new Node();
                num3.setEtiqueta("num");
                num3.setID(parser.cont);
                num3.setValor(nm3); */    
                node.addHijos(identificador);
                node.addHijos((Node) nm1);
                node.addHijos((Node) nm2);
                node.addHijos((Node) nm3);
                node.addHijos((Node) dg);
                RESULT = node;
            :}
            | FOR L_PAR VARIABLE ID:id COLON INTEGER COMMA val_posicion:nm1 DOWNTO val_posicion:nm2 COMMA STEP L_PAR val_posicion:nm3 R_PAR R_PAR L_KEY dec_general:dg R_KEY
            {:
                System.err.println("Entra a dec_for 4");
                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("dec_for");
                node.setID(parser.cont);

                parser.cont++;
                Node identificador = new Node();
                identificador.setEtiqueta("ID");
                identificador.setID(parser.cont);
                identificador.setValor(id);
               /* parser.cont++;
                Node num1 =new Node();
                num1.setEtiqueta("num");
                num1.setID(parser.cont);
                num1.setValor(nm1);
                parser.cont++;
                Node num2 =new Node();
                num2.setEtiqueta("num");
                num2.setID(parser.cont);
                num2.setValor(nm2);
                parser.cont++;
                Node num3 =new Node();
                num3.setEtiqueta("num");
                num3.setID(parser.cont);
                num3.setValor(nm3);*/     
                node.addHijos(identificador);
                node.addHijos((Node) nm1);
                node.addHijos((Node) nm2);
                node.addHijos((Node) nm3);
                node.addHijos((Node) dg);
                RESULT = node;
            :}
    
            ;

dec_switch ::= SWITCH L_PAR ID:id R_PAR L_KEY list_op:lo R_KEY 
            {:
                System.err.println("Entra a dec_switch");
                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("dec_switch");
                node.setID(parser.cont);

                parser.cont++;
                Node identificador = new Node();
                identificador.setEtiqueta("ID");
                identificador.setID(parser.cont);
                identificador.setValor(id);
                node.addHijos(identificador);
                node.addHijos((Node) lo);
                RESULT = node;
            :}
            ;

list_op ::= OPTION valor:vl COLON dec_general:dg new_op:nwo 
            {:
                System.err.println("Entra a list_op");
                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("list_op");
                node.setID(parser.cont);
                node.addHijos((Node) vl);
                node.addHijos((Node) dg);
                node.addHijos((Node) nwo);
                RESULT = node;
            :}
            ;

new_op ::= BREAK SEMICOLON list_op:lo
            {:
                System.err.println("Entra a new_op 1");
                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("option");
                node.setID(parser.cont);
                node.addHijos((Node) lo);
                RESULT = node;
            :}
            | BREAK SEMICOLON DEFAULT COLON dec_general:dg
            {:
                System.err.println("Entra a new_op 2");
                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("default");
                node.setID(parser.cont);
                node.addHijos((Node) dg);
                RESULT = node;
            :}
            | BREAK SEMICOLON 
            {:
                System.err.println("Entra a new_op 3");
                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("new_op");
                node.setID(parser.cont);
                RESULT = node;
            :}
            ;

dec_if ::= IF L_PAR condicion:cond R_PAR L_KEY dec_general:dg R_KEY dec_else:del
            {:
                System.err.println("Entra a dec_if");
                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("dec_if");
                node.setID(parser.cont);
                node.addHijos((Node) cond);
                node.addHijos((Node) dg);
                node.addHijos((Node) del);
                RESULT = node;
            :}
            ;
dec_else ::= ELIF L_PAR condicion:cond R_PAR L_KEY dec_general:dg R_KEY dec_else:del
            {:
                System.err.println("Entra a dec_else elif");
                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("dec_elif");
                node.setID(parser.cont);
                node.addHijos((Node) cond);
                node.addHijos((Node) dg);
                node.addHijos((Node) del);
                RESULT = node;
            :}
            |ELSE L_KEY dec_general:dg R_KEY 
            {:
                System.err.println("Entra a dec_else else");
                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("dec_else");
                node.setID(parser.cont);
                node.addHijos((Node) dg);
                RESULT = node;
            :}
            |
            {:
                parser.cont++;
                Node nodo = new Node();
				nodo.setEtiqueta("vacio");
				nodo.setID(parser.cont);
                RESULT = nodo;
            :}
            ;

dec_llamada_funcion ::= ID:id L_PAR llamada_parametros:llp R_PAR
            {:
                System.err.println("Entra a dec_llamada_funcion");
                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("dec_llamada_funcion");
                node.setValor(id);
                node.setID(parser.cont);
                node.addHijos((Node) llp);
                RESULT = node;
            :}
            | INPUT:in L_PAR ID:id COMMA tipo:tip R_PAR 
               {:
                System.err.println("Entra a func_input");
                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("func_input");
                node.setID(parser.cont);
                parser.cont++;
                Node identificador =new Node();
                identificador.setEtiqueta("ID");
                identificador.setID(parser.cont);
                identificador.setValor(id);
                node.addHijos(identificador);
                node.addHijos((Node) tip);
                RESULT = node;
                :}
                

                |   OUTPUT:out L_PAR params_output:llp R_PAR  
                {:
                System.err.println("Entra a func_output ");
                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("func_output");
                node.setValor(out);
                node.setID(parser.cont);
                node.addHijos((Node) llp);
                RESULT = node;
                :}
                   
            | error R_PAR
            ;

llamada_parametros ::= valor:vl lista_valores:lv
            {:
                System.err.println("Entra a llamada_parametros 1");
                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("llamada_parametros");
                node.setID(parser.cont);
                node.addHijos((Node) vl);
                node.addHijos((Node) lv);
                RESULT = node;
            :}
            | valor:vl
            {:
                System.err.println("Entra a llamada_parametros 2");
                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("llamada_parametros");
                node.setID(parser.cont);
                node.addHijos((Node) vl);
                RESULT = node;
            :}
            |
            {:
                System.err.println("Entra a vacio");
                parser.cont++;
                Node nodo = new Node();
				nodo.setEtiqueta("vacio");
				nodo.setID(parser.cont);
                RESULT = nodo;
            :}
            ;

params_output ::= valor:vl lista_valores:lv
            {:
                System.err.println("Entra a llamada_parametros 1");
                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("params_output");
                node.setID(parser.cont);
                node.addHijos((Node) vl);
                node.addHijos((Node) lv);
                RESULT = node;
            :}
            | valor:vl
            {:
                System.err.println("Entra a llamada_parametros 2");
                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("params_output");
                node.setID(parser.cont);
                node.addHijos((Node) vl);
                RESULT = node;
            :};

lista_valores ::= COMMA valor:vl lista_valores:lv
            {:
                System.err.println("Entra a lista_valores 1");
                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("lista_valores");
                node.setID(parser.cont);
                node.addHijos((Node) vl);
                node.addHijos((Node) lv);
                RESULT = node;
            :}
            |COMMA valor:vl
            {:
                System.err.println("Entra a lista_valores 2");
                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("lista_valores");
                node.setID(parser.cont);
                node.addHijos((Node) vl);
                RESULT = node;
            :}
            |error COMMA
            ;

/*
condicion ::= valor_cond:vc1 OPREL:opr valor_cond:vc2
            {:
                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("condicion");
                node.setValor(opr);
                node.setID(parser.cont);
                node.addHijos((Node) vc1);
                node.addHijos((Node) vc2);
                RESULT = node;
            :}
            | valor_cond:vc1 OPREL:opr valor_cond:vc2 OPLOG:oplg condicion:cond
            {:
                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("condicion");
                node.setID(parser.cont);
                node.setValor(opr +"," +oplg);
                node.addHijos((Node) vc1);
                node.addHijos((Node) vc2);
                node.addHijos((Node) cond);
                RESULT = node;
            :}
            | valor_cond:vc
            {:
                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("condicion");
                node.setValor("valor condicional");
                node.setID(parser.cont);
                node.addHijos((Node) vc);
                RESULT = node;
            :}
            | NULL:nll
            {:
                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("condicion");
                node.setID(parser.cont);

                parser.cont++;
                Node nulo=new Node();
                nulo.setEtiqueta("Null");
                nulo.setID(parser.cont);
                nulo.setValor(nll);

                node.setValor(nulo.getValor());

                RESULT = node;
            :}
            | valor_cond:vc OPLOG:oplg condicion:cond
            {:
                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("condicion");
                node.setValor(oplg);
                node.setID(parser.cont);
                node.addHijos((Node) vc);
                node.addHijos((Node) cond);
                RESULT = node;
            :}
            ;
*/
condicion ::= valor_cond:vc mas_condicion:masc otra_condicion:otrac
                {:
                    parser.cont++;
                    Node node = new Node();
                    node.setEtiqueta("inicio_condiciones");
                    //node.setValor(vc.getValor());
                    node.setID(parser.cont);
                    node.addHijos((Node) vc);
                    node.addHijos((Node) masc);
                    node.addHijos((Node) otrac);
                    RESULT = node;
                
                :}
                ;
mas_condicion ::= OPREL:opre valor_cond:vc mas_condicion:masc
                {:
                    parser.cont++;
                    Node node = new Node();
                    node.setEtiqueta("mas_condicion");
                    node.setID(parser.cont);
                    node.setValor(opre);
                    node.addHijos((Node) vc);
                    node.addHijos((Node) masc);
                    RESULT = node;
                :}
                |
                {:
                    parser.cont++;
                    Node nodo = new Node();
				    nodo.setEtiqueta("vacio");
				    nodo.setID(parser.cont);
                    RESULT = nodo;
                :}
                ;
otra_condicion ::= OPLOG:oplg valor_cond:vc mas_condicion:masc otra_condicion:otrac
                {:
                    parser.cont++;
                    Node node = new Node();
                    node.setEtiqueta("otra_condicion");
                    node.setID(parser.cont);
                    node.setValor(oplg);
                    node.addHijos((Node) vc);
                    node.addHijos((Node) masc);
                    node.addHijos((Node) otrac);
                    RESULT = node;
                :}
                |
                {:
                    parser.cont++;
                    Node nodo = new Node();
				    nodo.setEtiqueta("vacio");
				    nodo.setID(parser.cont);
                    RESULT = nodo;
                :}
                ;
valor_cond ::= /*NUM:nm
            {:
                System.err.println("Entra a valor_cond 1");
                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("valor_cond");
                node.setID(parser.cont);

                parser.cont++;
                Node num =new Node();
                num.setEtiqueta("num");
                num.setID(parser.cont);
                num.setValor(nm);

                node.setValor(num.getValor());
                RESULT = node;
            :}
            | ID:id
            {:
                System.err.println("Entra a valor_cond 2");
                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("valor_cond");
                node.setID(parser.cont);

                parser.cont++;
                Node identificador =new Node();
                identificador.setEtiqueta("ID");
                identificador.setID(parser.cont);
                identificador.setValor(id);

                node.setValor(identificador.getValor());
                RESULT = node;
            :}
            | */TRUE:tru
            {:
                System.err.println("Entra a valor_cond 3");
                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("valor_cond");
                node.setID(parser.cont);
                
                parser.cont++;
                Node bool_true = new Node();
                bool_true.setEtiqueta("true");
                bool_true.setID(parser.cont);
                bool_true.setValor(tru);

                node.setValor(bool_true.getValor());
                RESULT = node;
            :}
            | FALSE:fals
            {:
                System.err.println("Entra a valor_cond 4");
                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("valor");
                node.setID(parser.cont);
                
                parser.cont++;
                Node bool_false = new Node();
                bool_false.setEtiqueta("false");
                bool_false.setID(parser.cont);
                bool_false.setValor(fals);

                node.setValor(bool_false.getValor());
                RESULT = node;
            :}
            | math_op:mop
           {:
                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("valor");
                node.setID(parser.cont);
                node.addHijos((Node) mop);
                RESULT = node;
           :}
            ;

dec_return ::= RETURN valor:vl
            {:
                System.err.println("Entra a dec_return 1");
                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("dec_return");
                node.setID(parser.cont);
                node.addHijos(vl);
                RESULT = node;
            :}
            | RETURN 
            {:
                System.err.println("Entra a dec_return 2");  
                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("dec_return");
                node.setID(parser.cont);
                RESULT = node;
            :}
            ;


tipo ::= BOOLEAN
            {:
                System.err.println("Entra a tipo 1");
                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("tipo");
                node.setID(parser.cont);
                node.setValor("boolean");
                RESULT = node;
            :}
            | CHARACTER
            {:
                System.err.println("Entra a tipo 2");
                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("tipo");
                node.setID(parser.cont);
                node.setValor("char");
                RESULT = node;
            :}
            | INTEGER
            {:
                System.err.println("Entra a tipo 3");
                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("tipo");
                node.setID(parser.cont);
                node.setValor("Int");
                RESULT = node;
            :}
            | VOID
            {:
                System.err.println("Entra a tipo 4");
                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("tipo");
                node.setID(parser.cont);
                node.setValor("Void");
                RESULT = node;
            :}
            | STRING 
            {:  
                System.err.println("Entra a tipo 5");
                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("tipo");
                node.setID(parser.cont);
                node.setValor("String");
                RESULT = node;
            :}
            | FLOAT 
            {:  
                System.err.println("Entra a tipo 5");
                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("tipo");
                node.setID(parser.cont);
                node.setValor("FLOAT");
                RESULT = node;
            :}
            ;
val_posicion::= /*ID:id
        {:
                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("posicion");
                node.setID(parser.cont);
                
                parser.cont++;
                Node identificador = new Node();
                identificador.setEtiqueta("ID");
                identificador.setID(parser.cont);
                identificador.setValor(id);

                node.setValor(identificador.getValor());
                RESULT = node;
        :}
        | NUM:nm
        {:
                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("posicion");
                node.setID(parser.cont);
                
                parser.cont++;
                Node num = new Node();
                num.setEtiqueta("num");
                num.setID(parser.cont);
                num.setValor(nm);

                node.setValor(num.getValor());
                RESULT = node;
        :}
        | dec_llamada_funcion:dlf
        {:
                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("posicion");
                node.setID(parser.cont);
                node.addHijos((Node) dlf);
                RESULT = node;
        :}
        |*/ math_op:mo
        {:
                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("posicion");
                node.setID(parser.cont);
                node.addHijos((Node) mo);
                RESULT = node;
        :}/*
        | ID:id DOT AT L_PAR val_posicion:vp R_PAR 
            {:
                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("posicion");
                node.setID(parser.cont);
                
                parser.cont++;
                Node identificador = new Node();
                identificador.setEtiqueta("ID");
                identificador.setID(parser.cont);
                identificador.setValor(id);
                node.addHijos(identificador);
                node.addHijos((Node) vp);
                node.setValor("");

                RESULT = node;
            :}
            | ID:id DOT AT L_PAR val_posicion:vp1 COMMA val_posicion:vp2 R_PAR 
            {:
                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("posicion");
                node.setID(parser.cont);
                
                parser.cont++;
                Node identificador = new Node();
                identificador.setEtiqueta("ID");
                identificador.setID(parser.cont);
                identificador.setValor(id);
                node.addHijos(identificador);
                node.addHijos((Node) vp1);
                node.addHijos((Node) vp2);
                node.setValor("");

                RESULT = node;
            :}*/
        ;