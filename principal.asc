= Manual de Usuario: **NACHTs**
:doctype: manpage
:docinfo:
:lang: es
:toc: left
:toc-title: Contenido
:toclevels: 5
:pagenums: 
:description: Proyecto de Clase de Compiladores I
:chapter-label: Capitulo
:icons: font
:imagesdir: images
:sectnums: 
:sectnumlevels: 6

**Proyecto de Clase de Compiladores I creado por:**
[%hardbreaks]
- icon:male[] **Carlos Guillermo Casco Valle**
- icon:male[] **Cristobal Raul Romero Inestroza**


== icon:info-circle[] **Descripcion**
Después de varias horas de pensar en un nombre único para este lenguaje, llegamos a la conclusión de que pasaremos noches de desvelo con este proyecto. Así que el nombre de este proyecto nace de un chiste, y por eso, su nombre es **NACHTs**.


-_Nacht significa noche en alemán._


== icon:wrench[]  **Dependencias**
Este proyecto utiliza las librerias de JFLEX y JCUP para trabajar la defincion lexica y sintactica.
Para ilustrar el arbol, utilizamos la herramiena Graphviz.

En el caso de utilizar una distribucion de linux basada en Debian, ejecutar el siguiente comando en la terminal: 

========
[source, bash]
--------
sudo apt-get install graphviz
--------
========

En caso de utilizar Windows, descargar el siguiente archivo: 

icon:github[]  https://github.com/tim-lebedkov/packages/releases/download/2019_Q1/org.graphviz.Graphviz-2.38-graphviz-2.38.msi[Instalador Graphwiz]

y agregar el programa a las variables de entorno:

icon:youtube[]  https://www.youtube.com/watch?v=JYAHwQ_tMG0[Como instalar Graphviz en Windows] 




== **Lenguaje**

=== **Estructura**
:!sectnums:

==== **Palabras Reservadas**

[options="header,footer"]
|=======================
|Palabra Reservada |Significado      
|int    |tipo entero     
|chr    |tipo caracter     
|bool    |tipo booleano     
|string    |tipo cadena
|if    |Para bloques de decisión
|elif    |Para bloques de decisión      
|else    |Para bloques de decisión     
|wh    |Para bucles while     
|for    |Para bucles for
|main    |Tag para función main      
|sw    |para bloques de decisión tipo switch     
|option   |para bloques de decisión tipo switch    
|dft    |para bloques de decisión tipo switch
|brk    |para salir de un bucle o un bloque switch     
|void    |tipo void     
|true    |valor booleano     
|false    |valor booleano
|null    |valor nulo     
|fnc    |Diferenciador para funciones     
|upTo    |para bucles for     
|downTo   |para bucles for
|step    |para bucles for      
|var    |Diferenciador para variables     
|input    |función de sistema     
|output    |función de sistema
|=======================

[%hardbreaks]

==== **Declaraciones, Instancias y Llamadas** 

===== **Variables**

=======================================================

[source, Nachts]
-----------------

var a:int;

var b:string := "hola guapos";

var c:bool;

var d[5]:int := {1,2,3,4,5};

var dd[2][2]:int := {{1,2}, {3,4}};

var indice:int:= d.at(3);

    indice := dd.at(1,1);

var e:chr := 'e'; 

-----------------
=======================================================


===== **Funciones**

Para las funciones se definen en primer lugar usando la palabra reservada "fnc" seguido del id, sus parámetros entre paréntesis, los cuales se definen de la misma manera que las variables y por último no sin antes poner dos puntos establecemos su tipo(también establecimos el tipo void para las funciones que no retornan nada y el tipo main para establecer la función principal valga la redundancia) y en cuanto a la llamada de funciones funcióna de la misma manera que en java.

====== _**Definición**_
=======================================================

[source, Nachts]
-----------------
fnc main (var a:int, var b:int ):main {
    #* 
        Do something...
    *#
}

fnc hola ():void {
    #* 
        Do something...
    *#
}

fnc adios (var x:string, var b:bool):int{
    #* 
        Do something...
    *#
}
-----------------
=======================================================

====== _**Llamadas**_
=======================================================

[source, Nachts]
-----------------

hola();

var test:int := adios("Este no es el final..." , false);

-----------------
=======================================================

====== _**Funciones de Sistema**_
=======================================================

[source, Nachts]
-----------------

var x:int;

input(x)

output(x + 5);

-----------------
=======================================================

==== **Bucles**

En lo que se refiere a los bucles dentro de nuestro de lenguaje el for funcióna primero estableciendo la palabra reservada "for" seguido del parentesis donde primero que nada definimos la variable, seguido de una coma y con esto establecemos el primer la valor con el que instaciaremos esta variable y tenemos dos opciones de palabras reservadas que podemos usar, son el "upTo" y el "downTo" con las que definimos si la variable ira en aumento o decremento, ponemos una coma y usamos la palabra reservada "step" seguida de parentesis y dentro de estos definimos cuanto ira auementan la variable con cada iteracion y en lo que respecta al while unicamente se define la palabra reservada "wh" y entre parentesis la condicion.

====== _**For**_
=======================================================

[source, Nachts]
-----------------
##iteración por incremento   
for (x:int , 1 upTo 5 , step(1)) {
	x++;
}
 
##Iteración por decremento
for (y:int ,5 downTo 1,step(1)) {
	output("hola");  
}
-----------------
=======================================================

====== _**While**_
=======================================================

[source, Nachts]
-----------------
wh(true){
    output("solo una vez, no harás más");
	brk;
}
-----------------
=======================================================

==== **Bloques de Decisión**

Los bloques de descision que manejamos son el de "if else" y "switch", el bloque de "if else" se maneja de la manera mas comun con la palabra "if" seguida de una condicion entre parentesis seguido esta el condigo dentro de la condicion, puede haber otra condicion o un else o directamente nada, el switch se maneja de manera similar al de java iniciando con la palabra reservada "sw" seguida del id de una variable entre parentesis y depues estarian andentro de este bloque los diferente caminos que pue tomar con la palabra reservada "option" seguida de un valor y dos puntos, le seguiria un bloque de codigo y al final la palabra "dft" como el caso por default(cabe destacar que este ultimo caso puede o no estar dentro del bloque).

===== _**If else**_
=================================================

[source, Nachts]
------------------------
if(1<3){
    #* 
        Do something...
    *#
}elif(1>3){
    #* 
        Dont do the same thing...
    *#
}else{
    #* 
        Do something else...
    *#
}
------------------------
=================================================


===== _**Switch**_
=================================================

[source, Nachts]
------------------------

sw (variable) {
    option 1: 
        #* 
            Do something...
        *#
    brk;
    option 2: 
        #* 
            Do something but diferent...
        *#
    brk;
    option 3: 
        #* 
            Do something but original...
        *#
    brk;
    dft:
        #* 
            At least do something...
        *#
}
------------------------
=================================================

:sectnums:
=== **Lexico y Gramatica**  
:!sectnums:
==== **Terminales**
[options="header,footer"]
|=======================
|**Nombre de Terminal** |**Descripcion** 
|FUNCTION| terminal para token _**fnc**_
|NUM|   terminal para tokens de tipo entero
|UPTO|  terminal para token _**upTo**_
|DOWNTO|terminal para token _**dwnTo**_
|STEP|  terminal para token _**step**_
|VARIABLE| terminal para token _**var**_
|STRING| terminal para token _**string**_
|CONSTSTRING| terminal para tokens de tipo cadena
|INTEGER| terminal para token _**int**_
|CHARACTER| terminal para token _**chr**_
|CONSTSTRING| terminal para tokens de tipo caracter
|BOOLEAN| terminal para token _**bool**_
|IF|    terminal para token _**if**_
|ELIF|  terminal para token _**elif**_
|ELSE|  terminal para token _**else**_
|WHILE| terminal para token _**wh**_
|FOR|   terminal para token _**for**_
|RETURN| terminal para token _**rtn**_
|VOID| terminal para token _**void**_
|TRUE|  terminal para token _**true**_
|FALSE| terminal para token _**false**_
|BREAK| terminal para token _**brk**_
|NULL| terminal para token _**null**_
|INPUT| terminal para token _**input**_
|OUTPUT|terminal para token _**output**_
|SWITCH|terminal para token _**sw**_
|OPTION| terminal para token _**option**_
|DEFAULT| terminal para token _**dft**_
|ID| terminal para los IDs de cada variable
|OPREL|    terminal para tokens  _** = **_ , _** > **_ , _** >= **_ , _** < **_, _** <= **_ y _** != **_
|OPCOND|    terminal para token _** ? **_
|OPLOG|     terminal para tokens  _** || **_ y  _** && **_ 
|OPMOD|  terminal para token _** % **_
|OPMULT| terminal para tokens _**  *  **_ y _** / **_
|OPSUM| terminal para tokens _** + **_  y _** - **_
|OPINC| terminal para tokens _** ++ **_  y _** -- **_
|OPASIGN| terminal para token _** := **_
|OPASIGNADD| terminal para tokens  _** += **_ y   _** -= **_ 
|OPASIGNMULT| terminal para tokens _** *= **_ y _** /= **_
|L_KEY| terminal para token  _** { **_
|R_KEY| terminal para token  _** } **_
|L_BRACKET| terminal para token  _** [ **_
|R_BRACKET| terminal para token  _** ] **_
|L_PAR| terminal para token  _** ( **_
|R_PAR| terminal para token  _** ) **_
|COMMA| terminal para token  _** , **_
|SEMICOLON| terminal para token  _** ; **_
|COLON| terminal para token  _** : **_
|DOT| terminal para token  _** . **_
|AT| terminal para token  _** at **_
|=======================

==== **No-Terminales**

[options="header,footer"]
|=======================
|**Nombre de No-Terminal** 
|inicio
|dec_gen_fun
|dec_función
|parametros
|nuevo_parametro
|func_lenguaje
|func_input
|func_output
|dec_general
|dec_variable
|dec_var
|dec_inst
|arr_cont
|dec_var_inst
|valor
|math_op
|s_op
|sum_op
|m_op
|mult_op
|val
|dec_while
|dec_for
|dec_switch
|list_op
|new_op
|dec_if
|dec_else
|dec_llamada_funcion
|llamada_parametros
|lista_valores
|fin_llamada
|condicion
|valor_cond
|dec_return
|arreglo
|arreglo2d
|arr2_cont
|val_posicion
|tipo
|=======================


== **Funcionamiento del Programa**

:imagesdir: images

* Aqui estamos en la pantalla principal

image::nachts1.png[align="center"]

* Este es nuestro menu de opciones. 

image::nachts2.png[align="center"]

* Intentemos abrir un archivo.

image::3_nachts.png[align="center"]

* Ya teniendo el archivo abierto, continuamos.

image::nachts3.png[align="center"]

* Damos click en el boton RUN. Si se quiere visualizar el arbol, seleccionamos Yes

image::nachts4.png[align="center"]

* ... y es asi como se visualiza nuestro arbol.

image::nachts5.png[align="center"]



**11441102 CARLOS GUILLERMO CASCO VALLE**

**11511091 CRISTOBAL RAUL ROMERO INESTROZA**

