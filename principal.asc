= Manual de Usuario: **NACHTs**
:doctype: manpage
:docinfo:
:lang: es
:toc: left
:toc-title: Contenido
:toclevels: 5
:pagenums: 
:description: Proyecto de Clase de Compiladores I
:chapter-label: Capitulo
:icons: font
:imagesdir: images
:sectnums: 
:sectnumlevels: 6

**Proyecto de Clase de Compiladores I creado por:**
[%hardbreaks]
- icon:male[] **Carlos Guillermo Casco Valle**
- icon:male[] **Cristóbal Raúl Romero Inestroza**


== icon:info-circle[] **Descripción**
Después de varias horas de pensar en un nombre único para este lenguaje, llegamos a la conclusión de que pasaremos noches de desvelo con este proyecto. Así que el nombre de este proyecto nace de un chiste, y por eso, su nombre es **NACHTs**.


-_Nacht significa noche en alemán._


== icon:wrench[] **Dependencias**
Este proyecto utiliza las librerias de JFLEX y JCUP para trabajar la definición lexica y sintactica.

Para ilustrar el arbol, utilizamos la herramienta Graphviz.

En el caso de utilizar una distribución de linux basada en Debian, ejecutar el siguiente comando en la terminal: 

========
[source, bash]
--------
sudo apt-get install graphviz
--------
========

En caso de utilizar Windows, descargar el siguiente archivo: 

icon:github[]  https://github.com/tim-lebedkov/packages/releases/download/2019_Q1/org.graphviz.Graphviz-2.38-graphviz-2.38.msi[Instalador Graphwiz]

y agregar el programa a las variables de entorno:

icon:youtube[]  https://www.youtube.com/watch?v=JYAHwQ_tMG0[Como instalar Graphviz en Windows] 




== icon:language[] **Lenguaje**

=== icon:puzzle-piece[] **Estructura**

==== icon:key[] **Palabras Reservadas**

[options="header,footer"]
|=======================
|Palabra Reservada |Significado      
|int    |Tipo entero     
|chr    |Tipo caracter     
|bool    |Tipo booleano     
|string    |Tipo cadena
|if    |Para bloques de decisión
|elif    |Para bloques de decisión      
|else    |Para bloques de decisión     
|wh    |Para bucles while     
|for    |Para bucles for
|main    |Tag para función main      
|sw    |para bloques de decisión tipo switch     
|option   |Para bloques de decisión tipo switch    
|dft    |Para bloques de decisión tipo switch
|brk    |Para salir de un bucle o un bloque switch     
|void    |Tipo void     
|true    |Valor booleano     
|false    |Valor booleano
|null    |Valor nulo     
|fnc    |Diferenciador para funciones     
|upTo    |Para bucles for     
|downTo   |Para bucles for
|step    |Para bucles for      
|var    |Diferenciador para variables     
|input    |Función de sistema     
|output    |Función de sistema
|at    |Para arreglos
|=======================

[%hardbreaks]

==== icon:chevron-circle-right[] **Declaraciones, Instancias y Llamadas** 

===== icon:chevron-right[] **Variables**

=======================================================

[source, Nachts]
-----------------

var a:int;

var b:string := "hola guapos";

var c:bool := false;

var d[5]:int := {1,2,3,4,5};

var dd[2][2]:int := {{1,2}, {3,4}};

var indice:int := d.at(3);

    indice := dd.at(1,1);

var e:chr := 'e'; 

-----------------
=======================================================


===== icon:chevron-right[] **Funciones**

Para las funciones se definen en primer lugar usando la palabra reservada "fnc" seguido del id, sus parámetros entre paréntesis, los cuales se definen de la misma manera que las variables y por último no sin antes poner dos puntos establecemos su tipo(también establecimos el tipo void para las funciones que no retornan nada y el tipo main para establecer la función principal).

====== _**Definición**_
=======================================================

[source, Nachts]
-----------------
fnc main (var a:int, var b:int ):main {
    #* 
        Do something...
    *#
}

fnc hola ():void {
    #* 
        Do something...
    *#
}

fnc adios (var x:string, var b:bool):int{
    #* 
        Do something...
    *#
}
-----------------
=======================================================

====== _**Llamadas**_
=======================================================

[source, Nachts]
-----------------

hola();

var test:int := adios("Este no es el final..." , false);

-----------------
=======================================================

====== _**Funciones de Sistema**_
=======================================================

[source, Nachts]
-----------------

var x:int;

input(x)

output(x + 5);

-----------------
=======================================================

==== icon:chevron-circle-right[] **Bucles**

Los bucles **for** permiten iteración ascendente y descendente. También se les define un step, para el incremento o decremento del límite de iteraciones.

Nuestros bucles condicionales son los **while**.

====== icon:chevron-right[] _**For**_
=======================================================

[source, Nachts]
-----------------
##iteración por incremento   
for (var x:int , 1 upTo 5 , step(1)) {
	x++;
}

var z:int := 2;

for (z, z upTo 5 , step(1)) {
	z++;
}
 
##Iteración por decremento
for (var y:int ,5 dwnTo 1,step(1)) {
	output("hola",y);  
}


-----------------
=======================================================

====== icon:chevron-right[] _**While**_
=======================================================

[source, Nachts]
-----------------
wh(true){
    output("solo una vez, no harás más");
	brk;
}
-----------------
=======================================================

==== icon:chevron-circle-right[] **Bloques de Decisión**

Los bloques de descisión que manejamos son el de "if else" y "switch", el bloque de "if else" se maneja de la manera mas comun con la palabra "if" seguida de una condicion entre parentesis, seguido esta el condigo dentro del bloque, puede haber otra condicion o un else o directamente nada, el switch se maneja de manera similar al de java iniciando con la palabra reservada "sw" seguida del id de una variable entre parentesis y depues estarian adentro de este bloque los diferente caminos que puede tomar con la palabra reservada "option" seguida de un valor y dos puntos, le seguiria un bloque de codigo, el cual se cerraria con un "brk" y al final la palabra "dft" como el caso por default(cabe destacar que este ultimo caso puede o no estar dentro del bloque).

===== icon:chevron-right[] _**If else**_
=================================================

[source, Nachts]
------------------------
if(1<3){
    #* 
        Do something...
    *#
}elif(1>3){
    #* 
        Dont do the same thing...
    *#
}else{
    #* 
        Do something else...
    *#
}
------------------------
=================================================


===== icon:chevron-right[] _**Switch**_
=================================================

[source, Nachts]
------------------------

sw (variable) {
    option 1: 
        #* 
            Do something...
        *#
    brk;
    option 2: 
        #* 
            Do something but diferent...
        *#
    brk;
    option 3: 
        #* 
            Do something but original...
        *#
    brk;
    dft:
        #* 
            At least do something...
        *#
}
------------------------
=================================================

:sectnums:
=== icon:language[] **Léxico y Gramática**  

==== **Terminales**
[options="header,footer"]
|=======================
|**Nombre de Terminal** |**Descripción** 
|FUNCTION| Terminal para token _**fnc**_
|NUM|   Terminal para tokens de tipo entero
|UPTO|  Terminal para token _**upTo**_
|DOWNTO|Terminal para token _**dwnTo**_
|STEP|  Terminal para token _**step**_
|VARIABLE| Terminal para token _**var**_
|STRING| Terminal para token _**string**_
|CONSTSTRING| Terminal para tokens de tipo cadena
|INTEGER| Terminal para token _**int**_
|CHARACTER| Terminal para token _**chr**_
|CONSTSTRING| Terminal para tokens de tipo caracter
|BOOLEAN| Terminal para token _**bool**_
|IF|    Terminal para token _**if**_
|ELIF|  Terminal para token _**elif**_
|ELSE|  Terminal para token _**else**_
|WHILE| Terminal para token _**wh**_
|FOR|   Terminal para token _**for**_
|RETURN| Terminal para token _**rtn**_
|VOID| Terminal para token _**void**_
|TRUE|  Terminal para token _**true**_
|FALSE| Terminal para token _**false**_
|BREAK| Terminal para token _**brk**_
|NULL| Terminal para token _**null**_
|INPUT| Terminal para token _**input**_
|OUTPUT|Terminal para token _**output**_
|SWITCH|Terminal para token _**sw**_
|OPTION| Terminal para token _**option**_
|DEFAULT| Terminal para token _**dft**_
|ID| Terminal para los IDs de cada variable
|OPREL|    Terminal para tokens  _** = **_ , _** > **_ , _** >= **_ , _** < **_, _** <= **_ y _** != **_
|OPCOND|    Terminal para token _** ? **_
|OPLOG|     Terminal para tokens  _** \|\| **_ y  _** && **_ 
|OPMOD|  Terminal para token _** % **_
|OPMULT| Terminal para tokens _**  *  **_ y _** / **_
|OPSUM| Terminal para tokens _** + **_  y _** - **_
|OPINC| Terminal para tokens _** ++ **_  y _** -- **_
|OPASIGN| Terminal para token _** := **_
|OPASIGNADD| Terminal para tokens  _** += **_ y   _** -= **_ 
|OPASIGNMULT| Terminal para tokens _** *= **_ y _** /= **_
|L_KEY| Terminal para token  _** { **_
|R_KEY| Terminal para token  _** } **_
|L_BRACKET| Terminal para token  _** [ **_
|R_BRACKET| Terminal para token  _** ] **_
|L_PAR| Terminal para token  _** ( **_
|R_PAR| Terminal para token  _** ) **_
|COMMA| Terminal para token  _** , **_
|SEMICOLON| Terminal para token  _** ; **_
|COLON| Terminal para token  _** : **_
|DOT| Terminal para token  _** . **_
|AT| Terminal para token  _** at **_
|=======================

==== **No-Terminales**

[options="header,footer"]
|=======================
|**Nombre de No-Terminal** 
|inicio
|dec_gen_fun
|dec_función
|parametros
|nuevo_parametro
|func_lenguaje
|func_input
|func_output
|dec_general
|dec_variable
|dec_var
|dec_inst
|arr_cont
|dec_var_inst
|valor
|math_op
|s_op
|sum_op
|m_op
|mult_op
|val
|dec_while
|dec_for
|dec_switch
|list_op
|new_op
|dec_if
|dec_else
|dec_llamada_funcion
|llamada_parametros
|lista_valores
|fin_llamada
|condicion
|valor_cond
|dec_return
|arreglo
|arreglo2d
|arr2_cont
|val_posicion
|tipo
|=======================


== icon:plug[] **Demostración**

:imagesdir: images

* Aquí estamos en la pantalla principal.

image::nachts1.png[align="center"]

* Este es nuestro menú de opciones. 

image::nachts2.png[align="center"]

* Intentemos abrir un archivo.

image::3_nachts.png[align="center"]

* Ya teniendo el archivo abierto, continuamos.

image::nachts3.png[align="center"]

* Damos click en el boton RUN. Si se quiere visualizar el árbol, seleccionamos **Yes**.

image::nachts4.png[align="center"]

* ... y es así como se visualiza nuestro árbol.

image::nachts5.png[align="center"]











**11441102 CARLOS GUILLERMO CASCO VALLE**

**11511091 CRISTÓBAL RAÚL ROMERO INESTROZA**

