
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package nachts;

import java_cup.runtime.*;
import java.util.ArrayList;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return Sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\140\000\002\002\004\000\002\002\004\000\002\003" +
    "\004\000\002\003\002\000\002\004\015\000\002\005\007" +
    "\000\002\005\002\000\002\006\010\000\002\006\002\000" +
    "\002\007\003\000\002\007\003\000\002\010\011\000\002" +
    "\011\007\000\002\011\007\000\002\011\007\000\002\012" +
    "\004\000\002\012\004\000\002\012\004\000\002\012\004" +
    "\000\002\012\004\000\002\012\004\000\002\012\004\000" +
    "\002\012\004\000\002\012\004\000\002\012\002\000\002" +
    "\013\007\000\002\013\013\000\002\014\004\000\002\014" +
    "\010\000\002\014\013\000\002\015\004\000\002\015\011" +
    "\000\002\015\004\000\002\015\004\000\002\015\004\000" +
    "\002\015\004\000\002\015\004\000\002\015\004\000\002" +
    "\015\007\000\002\015\002\000\002\016\005\000\002\016" +
    "\002\000\002\017\006\000\002\017\013\000\002\020\003" +
    "\000\002\020\003\000\002\020\003\000\002\020\003\000" +
    "\002\020\003\000\002\021\004\000\002\022\005\000\002" +
    "\022\002\000\002\023\004\000\002\024\005\000\002\024" +
    "\002\000\002\025\003\000\002\025\003\000\002\025\003" +
    "\000\002\025\005\000\002\026\011\000\002\027\021\000" +
    "\002\027\022\000\002\027\025\000\002\027\025\000\002" +
    "\030\011\000\002\031\007\000\002\032\005\000\002\032" +
    "\007\000\002\032\004\000\002\033\012\000\002\034\004" +
    "\000\002\034\006\000\002\034\002\000\002\035\007\000" +
    "\002\036\004\000\002\036\002\000\002\037\004\000\002" +
    "\037\002\000\002\040\003\000\002\041\005\000\002\041" +
    "\007\000\002\041\003\000\002\041\003\000\002\041\005" +
    "\000\002\042\003\000\002\042\003\000\002\042\003\000" +
    "\002\042\003\000\002\043\004\000\002\043\004\000\002" +
    "\043\005\000\002\044\003\000\002\044\003\000\002\044" +
    "\003\000\002\044\003\000\002\044\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u010e\000\034\002\uffe9\004\uffe9\011\014\020\015\022" +
    "\011\023\031\032\005\033\032\034\013\040\017\050\033" +
    "\061\024\062\uffda\001\002\000\044\002\uffe9\004\uffe9\011" +
    "\014\020\015\022\011\023\031\024\uffe9\030\uffe9\032\005" +
    "\033\032\034\013\040\017\050\033\054\uffe9\056\uffe9\061" +
    "\024\062\uffda\001\002\000\004\057\u010a\001\002\000\044" +
    "\002\uffe9\004\uffe9\011\014\020\015\022\011\023\031\024" +
    "\uffe9\030\uffe9\032\005\033\032\034\013\040\017\050\033" +
    "\054\uffe9\056\uffe9\061\024\062\uffda\001\002\000\044\002" +
    "\ufff8\004\ufff8\011\ufff8\020\ufff8\022\ufff8\023\ufff8\024\ufff8" +
    "\030\ufff8\032\ufff8\033\ufff8\034\ufff8\040\ufff8\050\ufff8\054" +
    "\ufff8\056\ufff8\061\ufff8\062\ufff8\001\002\000\044\002\ufff7" +
    "\004\ufff7\011\ufff7\020\ufff7\022\ufff7\023\ufff7\024\ufff7\030" +
    "\ufff7\032\ufff7\033\ufff7\034\ufff7\040\ufff7\050\ufff7\054\ufff7" +
    "\056\ufff7\061\ufff7\062\ufff7\001\002\000\004\057\u0103\001" +
    "\002\000\044\002\uffe9\004\uffe9\011\014\020\015\022\011" +
    "\023\031\024\uffe9\030\uffe9\032\005\033\032\034\013\040" +
    "\017\050\033\054\uffe9\056\uffe9\061\024\062\uffda\001\002" +
    "\000\004\057\361\001\002\000\004\040\346\001\002\000" +
    "\004\057\316\001\002\000\044\002\uffe9\004\uffe9\011\014" +
    "\020\015\022\011\023\031\024\uffe9\030\uffe9\032\005\033" +
    "\032\034\013\040\017\050\033\054\uffe9\056\uffe9\061\024" +
    "\062\uffda\001\002\000\010\050\302\057\066\065\303\001" +
    "\002\000\044\002\uffe9\004\uffe9\011\014\020\015\022\011" +
    "\023\031\024\uffe9\030\uffe9\032\005\033\032\034\013\040" +
    "\017\050\033\054\uffe9\056\uffe9\061\024\062\uffda\001\002" +
    "\000\044\002\uffe9\004\uffe9\011\014\020\015\022\011\023" +
    "\031\024\uffe9\030\uffe9\032\005\033\032\034\013\040\017" +
    "\050\033\054\uffe9\056\uffe9\061\024\062\uffda\001\002\000" +
    "\004\002\277\001\002\000\044\002\uffe9\004\uffe9\011\014" +
    "\020\015\022\011\023\031\024\uffe9\030\uffe9\032\005\033" +
    "\032\034\013\040\017\050\033\054\uffe9\056\uffe9\061\024" +
    "\062\uffda\001\002\000\004\040\262\001\002\000\006\002" +
    "\ufffe\004\220\001\002\000\044\002\uffe9\004\uffe9\011\014" +
    "\020\015\022\011\023\031\024\uffe9\030\uffe9\032\005\033" +
    "\032\034\013\040\017\050\033\054\uffe9\056\uffe9\061\024" +
    "\062\uffda\001\002\000\004\062\215\001\002\000\044\002" +
    "\uffe9\004\uffe9\011\014\020\015\022\011\023\031\024\uffe9" +
    "\030\uffe9\032\005\033\032\034\013\040\017\050\033\054" +
    "\uffe9\056\uffe9\061\024\062\uffda\001\002\000\004\057\127" +
    "\001\002\000\004\057\115\001\002\000\020\005\034\013" +
    "\036\014\040\026\037\027\041\040\035\053\042\001\002" +
    "\000\010\050\uffe1\061\uffe1\062\uffe1\001\002\000\014\050" +
    "\uffe3\057\066\061\uffe3\062\uffe3\065\110\001\002\000\010" +
    "\050\uffe0\061\uffe0\062\uffe0\001\002\000\010\050\uffde\061" +
    "\uffde\062\uffde\001\002\000\010\050\uffdf\061\uffdf\062\uffdf" +
    "\001\002\000\010\050\uffdd\061\uffdd\062\uffdd\001\002\000" +
    "\020\005\044\013\055\014\050\026\047\027\052\040\053" +
    "\057\056\001\002\000\010\050\uffdc\061\uffdc\062\uffdc\001" +
    "\002\000\020\045\uffc9\046\uffc9\054\uffc9\060\uffc9\061\uffc9" +
    "\062\uffc9\063\uffc9\001\002\000\020\045\uffc8\046\uffc8\054" +
    "\uffc8\060\uffc8\061\uffc8\062\uffc8\063\uffc8\001\002\000\020" +
    "\045\105\046\uffcb\054\uffcb\060\uffcb\061\uffcb\062\uffcb\063" +
    "\uffcb\001\002\000\014\054\uffd3\060\uffd3\061\uffd3\062\uffd3" +
    "\063\uffd3\001\002\000\014\054\uffd4\060\uffd4\061\uffd4\062" +
    "\uffd4\063\uffd4\001\002\000\006\054\uffd8\061\077\001\002" +
    "\000\014\054\uffd2\060\uffd2\061\uffd2\062\uffd2\063\uffd2\001" +
    "\002\000\022\045\uffca\046\uffca\054\uffca\057\066\060\uffca" +
    "\061\uffca\062\uffca\063\uffca\001\002\000\016\046\063\054" +
    "\uffce\060\uffce\061\uffce\062\uffce\063\uffce\001\002\000\014" +
    "\054\uffd5\060\uffd5\061\uffd5\062\uffd5\063\uffd5\001\002\000" +
    "\010\005\044\040\053\057\056\001\002\000\014\054\uffd1" +
    "\060\uffd1\061\uffd1\062\uffd1\063\uffd1\001\002\000\004\060" +
    "\061\001\002\000\020\045\uffc7\046\uffc7\054\uffc7\060\uffc7" +
    "\061\uffc7\062\uffc7\063\uffc7\001\002\000\014\054\uffd0\060" +
    "\uffd0\061\uffd0\062\uffd0\063\uffd0\001\002\000\010\005\044" +
    "\040\053\057\056\001\002\000\016\046\063\054\uffce\060" +
    "\uffce\061\uffce\062\uffce\063\uffce\001\002\000\014\054\uffcf" +
    "\060\uffcf\061\uffcf\062\uffcf\063\uffcf\001\002\000\022\005" +
    "\044\013\055\014\050\026\047\027\052\040\053\057\056" +
    "\060\uffb6\001\002\000\006\060\uffb4\061\074\001\002\000" +
    "\004\060\071\001\002\000\004\062\072\001\002\000\054" +
    "\002\uffb3\004\uffb3\011\uffb3\020\uffb3\022\uffb3\023\uffb3\024" +
    "\uffb3\030\uffb3\032\uffb3\033\uffb3\034\uffb3\040\uffb3\045\uffb3" +
    "\046\uffb3\050\uffb3\054\uffb3\056\uffb3\060\uffb3\061\uffb3\062" +
    "\uffb3\063\uffb3\001\002\000\054\002\uffb8\004\uffb8\011\uffb8" +
    "\020\uffb8\022\uffb8\023\uffb8\024\uffb8\030\uffb8\032\uffb8\033" +
    "\uffb8\034\uffb8\040\uffb8\045\uffb8\046\uffb8\050\uffb8\054\uffb8" +
    "\056\uffb8\060\uffb8\061\uffb8\062\uffb8\063\uffb8\001\002\000" +
    "\020\005\044\013\055\014\050\026\047\027\052\040\053" +
    "\057\056\001\002\000\004\060\uffb7\001\002\000\004\060" +
    "\uffb5\001\002\000\020\005\044\013\055\014\050\026\047" +
    "\027\052\040\053\057\056\001\002\000\004\054\101\001" +
    "\002\000\010\050\uffdb\061\uffdb\062\uffdb\001\002\000\006" +
    "\054\uffd8\061\077\001\002\000\004\054\uffd9\001\002\000" +
    "\016\046\uffcd\054\uffcd\060\uffcd\061\uffcd\062\uffcd\063\uffcd" +
    "\001\002\000\010\005\044\040\053\057\056\001\002\000" +
    "\020\045\105\046\uffcb\054\uffcb\060\uffcb\061\uffcb\062\uffcb" +
    "\063\uffcb\001\002\000\016\046\uffcc\054\uffcc\060\uffcc\061" +
    "\uffcc\062\uffcc\063\uffcc\001\002\000\004\064\111\001\002" +
    "\000\004\057\112\001\002\000\004\005\113\001\002\000" +
    "\004\060\114\001\002\000\010\050\uffe2\061\uffe2\062\uffe2" +
    "\001\002\000\010\005\117\013\120\040\116\001\002\000" +
    "\004\060\125\001\002\000\004\060\123\001\002\000\004" +
    "\060\121\001\002\000\004\062\122\001\002\000\044\002" +
    "\ufff5\004\ufff5\011\ufff5\020\ufff5\022\ufff5\023\ufff5\024\ufff5" +
    "\030\ufff5\032\ufff5\033\ufff5\034\ufff5\040\ufff5\050\ufff5\054" +
    "\ufff5\056\ufff5\061\ufff5\062\ufff5\001\002\000\004\062\124" +
    "\001\002\000\044\002\ufff4\004\ufff4\011\ufff4\020\ufff4\022" +
    "\ufff4\023\ufff4\024\ufff4\030\ufff4\032\ufff4\033\ufff4\034\ufff4" +
    "\040\ufff4\050\ufff4\054\ufff4\056\ufff4\061\ufff4\062\ufff4\001" +
    "\002\000\004\062\126\001\002\000\044\002\ufff3\004\ufff3" +
    "\011\ufff3\020\ufff3\022\ufff3\023\ufff3\024\ufff3\030\ufff3\032" +
    "\ufff3\033\ufff3\034\ufff3\040\ufff3\050\ufff3\054\ufff3\056\ufff3" +
    "\061\ufff3\062\ufff3\001\002\000\006\011\131\040\130\001" +
    "\002\000\004\061\165\001\002\000\004\040\132\001\002" +
    "\000\004\063\133\001\002\000\004\015\134\001\002\000" +
    "\004\061\135\001\002\000\004\005\136\001\002\000\006" +
    "\006\137\007\140\001\002\000\004\005\153\001\002\000" +
    "\004\005\141\001\002\000\004\061\142\001\002\000\004" +
    "\010\143\001\002\000\004\057\144\001\002\000\004\005" +
    "\145\001\002\000\004\060\146\001\002\000\004\060\147" +
    "\001\002\000\004\055\150\001\002\000\032\011\014\020" +
    "\015\022\011\023\031\032\005\033\032\034\013\040\017" +
    "\050\033\056\uffe9\061\024\062\uffda\001\002\000\004\056" +
    "\152\001\002\000\044\002\uffc2\004\uffc2\011\uffc2\020\uffc2" +
    "\022\uffc2\023\uffc2\024\uffc2\030\uffc2\032\uffc2\033\uffc2\034" +
    "\uffc2\040\uffc2\050\uffc2\054\uffc2\056\uffc2\061\uffc2\062\uffc2" +
    "\001\002\000\004\061\154\001\002\000\004\010\155\001" +
    "\002\000\004\057\156\001\002\000\004\005\157\001\002" +
    "\000\004\060\160\001\002\000\004\060\161\001\002\000" +
    "\004\055\162\001\002\000\032\011\014\020\015\022\011" +
    "\023\031\032\005\033\032\034\013\040\017\050\033\056" +
    "\uffe9\061\024\062\uffda\001\002\000\004\056\164\001\002" +
    "\000\044\002\uffc3\004\uffc3\011\uffc3\020\uffc3\022\uffc3\023" +
    "\uffc3\024\uffc3\030\uffc3\032\uffc3\033\uffc3\034\uffc3\040\uffc3" +
    "\050\uffc3\054\uffc3\056\uffc3\061\uffc3\062\uffc3\001\002\000" +
    "\004\005\166\001\002\000\006\006\167\007\170\001\002" +
    "\000\004\061\203\001\002\000\004\005\171\001\002\000" +
    "\004\061\172\001\002\000\004\010\173\001\002\000\004" +
    "\057\174\001\002\000\004\005\175\001\002\000\004\060" +
    "\176\001\002\000\004\060\177\001\002\000\004\055\200" +
    "\001\002\000\032\011\014\020\015\022\011\023\031\032" +
    "\005\033\032\034\013\040\017\050\033\056\uffe9\061\024" +
    "\062\uffda\001\002\000\004\056\202\001\002\000\044\002" +
    "\uffc4\004\uffc4\011\uffc4\020\uffc4\022\uffc4\023\uffc4\024\uffc4" +
    "\030\uffc4\032\uffc4\033\uffc4\034\uffc4\040\uffc4\050\uffc4\054" +
    "\uffc4\056\uffc4\061\uffc4\062\uffc4\001\002\000\004\010\204" +
    "\001\002\000\004\057\205\001\002\000\004\005\206\001" +
    "\002\000\004\060\207\001\002\000\004\060\210\001\002" +
    "\000\004\053\211\001\002\000\032\011\014\020\015\022" +
    "\011\023\031\032\005\033\032\034\013\040\017\050\033" +
    "\054\uffe9\061\024\062\uffda\001\002\000\004\054\213\001" +
    "\002\000\044\002\uffc5\004\uffc5\011\uffc5\020\uffc5\022\uffc5" +
    "\023\uffc5\024\uffc5\030\uffc5\032\uffc5\033\uffc5\034\uffc5\040" +
    "\uffc5\050\uffc5\054\uffc5\056\uffc5\061\uffc5\062\uffc5\001\002" +
    "\000\016\002\uffeb\004\uffeb\024\uffeb\030\uffeb\054\uffeb\056" +
    "\uffeb\001\002\000\044\002\uffe6\004\uffe6\011\uffe6\020\uffe6" +
    "\022\uffe6\023\uffe6\024\uffe6\030\uffe6\032\uffe6\033\uffe6\034" +
    "\uffe6\040\uffe6\050\uffe6\054\uffe6\056\uffe6\061\uffe6\062\uffe6" +
    "\001\002\000\016\002\uffee\004\uffee\024\uffee\030\uffee\054" +
    "\uffee\056\uffee\001\002\000\006\002\ufffe\004\220\001\002" +
    "\000\004\040\222\001\002\000\004\002\000\001\002\000" +
    "\004\057\223\001\002\000\006\011\225\060\ufffb\001\002" +
    "\000\004\060\245\001\002\000\004\040\226\001\002\000" +
    "\004\063\227\001\002\000\014\012\231\015\230\016\233" +
    "\017\234\025\235\001\002\000\014\050\uffa4\053\uffa4\060" +
    "\uffa4\061\uffa4\062\uffa4\001\002\000\014\050\uffa2\053\uffa2" +
    "\060\uffa2\061\uffa2\062\uffa2\001\002\000\006\060\ufff9\061" +
    "\236\001\002\000\014\050\uffa5\053\uffa5\060\uffa5\061\uffa5" +
    "\062\uffa5\001\002\000\014\050\uffa6\053\uffa6\060\uffa6\061" +
    "\uffa6\062\uffa6\001\002\000\014\050\uffa3\053\uffa3\060\uffa3" +
    "\061\uffa3\062\uffa3\001\002\000\004\011\240\001\002\000" +
    "\004\060\ufffc\001\002\000\004\040\241\001\002\000\004" +
    "\063\242\001\002\000\014\012\231\015\230\016\233\017" +
    "\234\025\235\001\002\000\006\060\ufff9\061\236\001\002" +
    "\000\004\060\ufffa\001\002\000\004\063\246\001\002\000" +
    "\014\012\231\015\230\016\233\017\234\025\235\001\002" +
    "\000\004\053\250\001\002\000\032\011\014\020\015\022" +
    "\011\023\031\024\uffe9\032\005\033\032\034\013\040\017" +
    "\050\033\061\024\062\uffda\001\002\000\004\024\252\001" +
    "\002\000\022\005\044\013\055\014\050\026\047\027\052" +
    "\040\053\057\056\062\257\001\002\000\004\054\254\001" +
    "\002\000\006\002\ufffd\004\ufffd\001\002\000\012\045\uffc8" +
    "\046\uffc8\054\uffa9\062\uffc8\001\002\000\004\062\260\001" +
    "\002\000\004\054\uffa8\001\002\000\004\054\uffa7\001\002" +
    "\000\004\002\uffff\001\002\000\006\055\263\063\264\001" +
    "\002\000\004\005\270\001\002\000\014\012\231\015\230" +
    "\016\233\017\234\025\235\001\002\000\010\050\033\061" +
    "\uffda\062\uffda\001\002\000\010\050\033\061\024\062\uffda" +
    "\001\002\000\044\002\uffe5\004\uffe5\011\uffe5\020\uffe5\022" +
    "\uffe5\023\uffe5\024\uffe5\030\uffe5\032\uffe5\033\uffe5\034\uffe5" +
    "\040\uffe5\050\uffe5\054\uffe5\056\uffe5\061\uffe5\062\uffe5\001" +
    "\002\000\004\056\271\001\002\000\004\063\272\001\002" +
    "\000\014\012\231\015\230\016\233\017\234\025\235\001" +
    "\002\000\010\050\033\061\uffda\062\uffda\001\002\000\010" +
    "\050\033\061\024\062\uffda\001\002\000\044\002\uffe4\004" +
    "\uffe4\011\uffe4\020\uffe4\022\uffe4\023\uffe4\024\uffe4\030\uffe4" +
    "\032\uffe4\033\uffe4\034\uffe4\040\uffe4\050\uffe4\054\uffe4\056" +
    "\uffe4\061\uffe4\062\uffe4\001\002\000\016\002\ufff1\004\ufff1" +
    "\024\ufff1\030\ufff1\054\ufff1\056\ufff1\001\002\000\004\002" +
    "\001\001\002\000\016\002\uffea\004\uffea\024\uffea\030\uffea" +
    "\054\uffea\056\uffea\001\002\000\016\002\uffef\004\uffef\024" +
    "\uffef\030\uffef\054\uffef\056\uffef\001\002\000\020\005\044" +
    "\013\055\014\050\026\047\027\052\040\053\057\056\001" +
    "\002\000\004\064\304\001\002\000\004\057\305\001\002" +
    "\000\004\005\306\001\002\000\004\060\307\001\002\000" +
    "\004\050\310\001\002\000\020\005\044\013\055\014\050" +
    "\026\047\027\052\040\053\057\056\001\002\000\004\062" +
    "\312\001\002\000\044\002\uffd6\004\uffd6\011\uffd6\020\uffd6" +
    "\022\uffd6\023\uffd6\024\uffd6\030\uffd6\032\uffd6\033\uffd6\034" +
    "\uffd6\040\uffd6\050\uffd6\054\uffd6\056\uffd6\061\uffd6\062\uffd6" +
    "\001\002\000\004\062\314\001\002\000\044\002\uffd7\004" +
    "\uffd7\011\uffd7\020\uffd7\022\uffd7\023\uffd7\024\uffd7\030\uffd7" +
    "\032\uffd7\033\uffd7\034\uffd7\040\uffd7\050\uffd7\054\uffd7\056" +
    "\uffd7\061\uffd7\062\uffd7\001\002\000\016\002\uffed\004\uffed" +
    "\024\uffed\030\uffed\054\uffed\056\uffed\001\002\000\014\005" +
    "\317\026\321\027\323\031\324\040\320\001\002\000\010" +
    "\041\uffad\043\uffad\060\uffad\001\002\000\010\041\uffac\043" +
    "\uffac\060\uffac\001\002\000\010\041\uffab\043\uffab\060\uffab" +
    "\001\002\000\004\060\334\001\002\000\010\041\uffaa\043" +
    "\uffaa\060\uffaa\001\002\000\004\060\uffaf\001\002\000\010" +
    "\041\326\043\327\060\uffb0\001\002\000\012\005\317\026" +
    "\321\027\323\040\320\001\002\000\014\005\317\026\321" +
    "\027\323\031\324\040\320\001\002\000\004\060\uffae\001" +
    "\002\000\006\043\332\060\uffb2\001\002\000\014\005\317" +
    "\026\321\027\323\031\324\040\320\001\002\000\004\060" +
    "\uffb1\001\002\000\004\053\335\001\002\000\032\011\014" +
    "\020\015\022\011\023\031\032\005\033\032\034\013\040" +
    "\017\050\033\054\uffe9\061\024\062\uffda\001\002\000\004" +
    "\054\337\001\002\000\046\002\uffb9\004\uffb9\011\uffb9\020" +
    "\uffb9\021\340\022\uffb9\023\uffb9\024\uffb9\030\uffb9\032\uffb9" +
    "\033\uffb9\034\uffb9\040\uffb9\050\uffb9\054\uffb9\056\uffb9\061" +
    "\uffb9\062\uffb9\001\002\000\006\020\015\053\343\001\002" +
    "\000\044\002\uffbc\004\uffbc\011\uffbc\020\uffbc\022\uffbc\023" +
    "\uffbc\024\uffbc\030\uffbc\032\uffbc\033\uffbc\034\uffbc\040\uffbc" +
    "\050\uffbc\054\uffbc\056\uffbc\061\uffbc\062\uffbc\001\002\000" +
    "\044\002\uffbb\004\uffbb\011\uffbb\020\uffbb\022\uffbb\023\uffbb" +
    "\024\uffbb\030\uffbb\032\uffbb\033\uffbb\034\uffbb\040\uffbb\050" +
    "\uffbb\054\uffbb\056\uffbb\061\uffbb\062\uffbb\001\002\000\032" +
    "\011\014\020\015\022\011\023\031\032\005\033\032\034" +
    "\013\040\017\050\033\054\uffe9\061\024\062\uffda\001\002" +
    "\000\004\054\345\001\002\000\044\002\uffba\004\uffba\011" +
    "\uffba\020\uffba\022\uffba\023\uffba\024\uffba\030\uffba\032\uffba" +
    "\033\uffba\034\uffba\040\uffba\050\uffba\054\uffba\056\uffba\061" +
    "\uffba\062\uffba\001\002\000\006\055\347\063\350\001\002" +
    "\000\004\005\353\001\002\000\014\012\231\015\230\016" +
    "\233\017\234\025\235\001\002\000\010\050\033\061\024" +
    "\062\uffda\001\002\000\044\002\uffe8\004\uffe8\011\uffe8\020" +
    "\uffe8\022\uffe8\023\uffe8\024\uffe8\030\uffe8\032\uffe8\033\uffe8" +
    "\034\uffe8\040\uffe8\050\uffe8\054\uffe8\056\uffe8\061\uffe8\062" +
    "\uffe8\001\002\000\004\056\354\001\002\000\004\063\355" +
    "\001\002\000\014\012\231\015\230\016\233\017\234\025" +
    "\235\001\002\000\010\050\033\061\uffda\062\uffda\001\002" +
    "\000\010\050\033\061\024\062\uffda\001\002\000\044\002" +
    "\uffe7\004\uffe7\011\uffe7\020\uffe7\022\uffe7\023\uffe7\024\uffe7" +
    "\030\uffe7\032\uffe7\033\uffe7\034\uffe7\040\uffe7\050\uffe7\054" +
    "\uffe7\056\uffe7\061\uffe7\062\uffe7\001\002\000\004\040\362" +
    "\001\002\000\004\060\363\001\002\000\004\055\364\001" +
    "\002\000\004\036\365\001\002\000\020\005\044\013\055" +
    "\014\050\026\047\027\052\040\053\057\056\001\002\000" +
    "\004\056\367\001\002\000\044\002\uffc1\004\uffc1\011\uffc1" +
    "\020\uffc1\022\uffc1\023\uffc1\024\uffc1\030\uffc1\032\uffc1\033" +
    "\uffc1\034\uffc1\040\uffc1\050\uffc1\054\uffc1\056\uffc1\061\uffc1" +
    "\062\uffc1\001\002\000\004\063\371\001\002\000\032\011" +
    "\014\020\015\022\011\023\031\030\uffe9\032\005\033\032" +
    "\034\013\040\017\050\033\061\024\062\uffda\001\002\000" +
    "\004\030\374\001\002\000\004\056\uffc0\001\002\000\004" +
    "\062\375\001\002\000\010\036\365\037\376\056\uffbd\001" +
    "\002\000\004\063\u0100\001\002\000\004\056\uffbf\001\002" +
    "\000\032\011\014\020\015\022\011\023\031\032\005\033" +
    "\032\034\013\040\017\050\033\056\uffe9\061\024\062\uffda" +
    "\001\002\000\004\056\uffbe\001\002\000\016\002\ufff0\004" +
    "\ufff0\024\ufff0\030\ufff0\054\ufff0\056\ufff0\001\002\000\014" +
    "\005\317\026\321\027\323\031\324\040\320\001\002\000" +
    "\004\060\u0105\001\002\000\004\055\u0106\001\002\000\032" +
    "\011\014\020\015\022\011\023\031\032\005\033\032\034" +
    "\013\040\017\050\033\056\uffe9\061\024\062\uffda\001\002" +
    "\000\004\056\u0108\001\002\000\044\002\uffc6\004\uffc6\011" +
    "\uffc6\020\uffc6\022\uffc6\023\uffc6\024\uffc6\030\uffc6\032\uffc6" +
    "\033\uffc6\034\uffc6\040\uffc6\050\uffc6\054\uffc6\056\uffc6\061" +
    "\uffc6\062\uffc6\001\002\000\016\002\ufff2\004\ufff2\024\ufff2" +
    "\030\ufff2\054\ufff2\056\ufff2\001\002\000\004\040\u010b\001" +
    "\002\000\004\061\u010c\001\002\000\014\012\231\015\230" +
    "\016\233\017\234\025\235\001\002\000\004\060\u010e\001" +
    "\002\000\004\062\u010f\001\002\000\044\002\ufff6\004\ufff6" +
    "\011\ufff6\020\ufff6\022\ufff6\023\ufff6\024\ufff6\030\ufff6\032" +
    "\ufff6\033\ufff6\034\ufff6\040\ufff6\050\ufff6\054\ufff6\056\ufff6" +
    "\061\ufff6\062\ufff6\001\002\000\016\002\uffec\004\uffec\024" +
    "\uffec\030\uffec\054\uffec\056\uffec\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u010e\000\036\002\021\007\020\010\006\011\007\012" +
    "\024\013\005\014\022\015\026\017\027\026\011\027\017" +
    "\030\025\033\015\035\003\001\001\000\034\007\020\010" +
    "\006\011\007\012\u010f\013\005\014\022\015\026\017\027" +
    "\026\011\027\017\030\025\033\015\035\003\001\001\000" +
    "\002\001\001\000\034\007\020\010\006\011\007\012\u0108" +
    "\013\005\014\022\015\026\017\027\026\011\027\017\030" +
    "\025\033\015\035\003\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\034\007\020\010\006\011" +
    "\007\012\u0101\013\005\014\022\015\026\017\027\026\011" +
    "\027\017\030\025\033\015\035\003\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\034\007\020" +
    "\010\006\011\007\012\314\013\005\014\022\015\026\017" +
    "\027\026\011\027\017\030\025\033\015\035\003\001\001" +
    "\000\002\001\001\000\034\007\020\010\006\011\007\012" +
    "\300\013\005\014\022\015\026\017\027\026\011\027\017" +
    "\030\025\033\015\035\003\001\001\000\034\007\020\010" +
    "\006\011\007\012\277\013\005\014\022\015\026\017\027" +
    "\026\011\027\017\030\025\033\015\035\003\001\001\000" +
    "\002\001\001\000\034\007\020\010\006\011\007\012\275" +
    "\013\005\014\022\015\026\017\027\026\011\027\017\030" +
    "\025\033\015\035\003\001\001\000\002\001\001\000\006" +
    "\003\220\004\216\001\001\000\034\007\020\010\006\011" +
    "\007\012\215\013\005\014\022\015\026\017\027\026\011" +
    "\027\017\030\025\033\015\035\003\001\001\000\002\001" +
    "\001\000\034\007\020\010\006\011\007\012\213\013\005" +
    "\014\022\015\026\017\027\026\011\027\017\030\025\033" +
    "\015\035\003\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\035\042\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\014\020\050\021\056\023\053\025" +
    "\045\035\044\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\024\103\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\016\077\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\022\061\001\001\000" +
    "\002\001\001\000\012\021\057\023\053\025\045\035\044" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\023\063\025\045\035\044" +
    "\001\001\000\004\022\064\001\001\000\002\001\001\000" +
    "\016\020\066\021\056\023\053\025\045\035\044\036\067" +
    "\001\001\000\004\037\074\001\001\000\002\001\001\000" +
    "\004\040\072\001\001\000\002\001\001\000\002\001\001" +
    "\000\014\020\075\021\056\023\053\025\045\035\044\001" +
    "\001\000\002\001\001\000\002\001\001\000\014\020\101" +
    "\021\056\023\053\025\045\035\044\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\016\102\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\025\105\035\044\001" +
    "\001\000\004\024\106\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\034\007\020" +
    "\010\006\011\007\012\150\013\005\014\022\015\026\017" +
    "\027\026\011\027\017\030\025\033\015\035\003\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\034\007" +
    "\020\010\006\011\007\012\162\013\005\014\022\015\026" +
    "\017\027\026\011\027\017\030\025\033\015\035\003\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\034\007\020\010\006\011\007\012\200\013\005" +
    "\014\022\015\026\017\027\026\011\027\017\030\025\033" +
    "\015\035\003\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\034" +
    "\007\020\010\006\011\007\012\211\013\005\014\022\015" +
    "\026\017\027\026\011\027\017\030\025\033\015\035\003" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\003\260" +
    "\004\216\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\005\223\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\044\231\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\006\236" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\044\242\001\001\000\004\006" +
    "\243\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\044\246\001\001\000\002\001\001\000\034\007\020\010" +
    "\006\011\007\012\250\013\005\014\022\015\026\017\027" +
    "\026\011\027\017\030\025\033\015\035\003\001\001\000" +
    "\004\043\252\001\001\000\014\020\255\021\056\023\053" +
    "\025\045\035\254\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\044\264\001\001\000\004\015\265" +
    "\001\001\000\006\014\266\015\026\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\044\272" +
    "\001\001\000\004\015\273\001\001\000\006\014\274\015" +
    "\026\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\014\020" +
    "\312\021\056\023\053\025\045\035\044\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\014\020\310\021\056\023\053" +
    "\025\045\035\044\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\041\321\042\324\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\042" +
    "\330\001\001\000\006\041\327\042\324\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\041\332\042\324\001" +
    "\001\000\002\001\001\000\002\001\001\000\034\007\020" +
    "\010\006\011\007\012\335\013\005\014\022\015\026\017" +
    "\027\026\011\027\017\030\025\033\015\035\003\001\001" +
    "\000\002\001\001\000\004\034\340\001\001\000\004\033" +
    "\341\001\001\000\002\001\001\000\002\001\001\000\034" +
    "\007\020\010\006\011\007\012\343\013\005\014\022\015" +
    "\026\017\027\026\011\027\017\030\025\033\015\035\003" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\044\350\001\001\000\006" +
    "\014\351\015\026\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\044\355\001\001\000\004" +
    "\015\356\001\001\000\006\014\357\015\026\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\031\365\001\001\000\014\020\367\021" +
    "\056\023\053\025\045\035\044\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\034\007\020\010" +
    "\006\011\007\012\371\013\005\014\022\015\026\017\027" +
    "\026\011\027\017\030\025\033\015\035\003\001\001\000" +
    "\004\032\372\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\031\376\001\001\000\002\001\001\000\002\001" +
    "\001\000\034\007\020\010\006\011\007\012\u0100\013\005" +
    "\014\022\015\026\017\027\026\011\027\017\030\025\033" +
    "\015\035\003\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\041\u0103\042\324\001\001\000\002\001\001\000" +
    "\002\001\001\000\034\007\020\010\006\011\007\012\u0106" +
    "\013\005\014\022\015\026\017\027\026\011\027\017\030" +
    "\025\033\015\035\003\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\044\u010c\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



   ArrayList<String> errores = new ArrayList();
   public static Node root;
   public int cont = 1;

     public String getToken(int id){
        String value = Sym.terminalNames[id];
        switch(id){
            case Sym.L_KEY:
                return "{";
            case Sym.R_KEY:
                return "}";
            case Sym.L_PAR:
                return "(";
            case Sym.R_PAR:
                return ")";
            case Sym.L_BRACKET:
                return "[";
            case Sym.R_BRACKET:
                return "]";
            default:
                return value;
        }
    }   

    @Override
    public void syntax_error(Symbol s){
        String lex = s.value != null ? s.value.toString() : getToken(s.sym);
        int fila = s.right;
        int columna = s.left;
        String err = "";
        if(lex.equals("EOF")){
            err = "Error sintáctico: Se esperaba el token }";
        } else {
            err = "Error sintáctico: " +  " fila: " + fila + " columna: " + columna + ", No se esperaba el token: " + lex;
        }

        System.err.println(err);
        errores.add(err);
    }

    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception {
        String lex = s.value != null ? s.value.toString() : getToken(s.sym);
        int fila = s.right;
        int columna = s.left;
        String err = "";
        if(lex.equals("EOF")){
            err = "";
        }else{
            err = "Error sintáctico, pánico: " + " fila: " + fila + " columna: " + columna + ", No se esperaba el token: " + lex;
        }
        System.err.println(err);
        errores.add(err);
    }




/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= inicio EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Node start_val = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // inicio ::= dec_general dec_gen_fun 
            {
              Node RESULT =null;
		int dgleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dgright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Node dg = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int dgfleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dgfright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Node dgf = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    Node node = new Node();
    node.setEtiqueta("INICIO");
    node.setID(parser.cont);
    node.addHijos((Node) dg);
    node.addHijos((Node) dgf);
    
    parser.root = node;
    RESULT = node; 
    
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // dec_gen_fun ::= dec_funcion dec_gen_fun 
            {
              Node RESULT =null;
		int dfleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dfright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Node df = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int dgfleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dgfright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Node dgf = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                Node node = new Node();
                RESULT = node;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("dec_gen_fun",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // dec_gen_fun ::= 
            {
              Node RESULT =null;
		
                Node node = new Node();
                RESULT = node;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("dec_gen_fun",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // dec_funcion ::= FUNCTION ID L_PAR parametros R_PAR COLON tipo L_KEY dec_general dec_return R_KEY 
            {
              Node RESULT =null;
		
                Node node = new Node();
                RESULT = node;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("dec_funcion",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // parametros ::= VARIABLE ID COLON tipo nuevo_parametro 
            {
              Node RESULT =null;
		
                Node node = new Node();
                RESULT = node;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // parametros ::= 
            {
              Node RESULT =null;
		
                Node node = new Node();
                RESULT = node;
               
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // nuevo_parametro ::= COMMA VARIABLE ID COLON tipo nuevo_parametro 
            {
              Node RESULT =null;
		
                Node node = new Node();
                RESULT = node;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("nuevo_parametro",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // nuevo_parametro ::= 
            {
              Node RESULT =null;
		
                Node node = new Node();
                RESULT = node;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("nuevo_parametro",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // func_lenguaje ::= func_input 
            {
              Node RESULT =null;
		
                    Node node = new Node();
                    RESULT = node;
                  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("func_lenguaje",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // func_lenguaje ::= func_output 
            {
              Node RESULT =null;
		
                    Node node = new Node();
                    RESULT = node;
                  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("func_lenguaje",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // func_input ::= INPUT L_PAR ID COMMA tipo R_PAR SEMICOLON 
            {
              Node RESULT =null;
		
                Node node = new Node();
                RESULT = node;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("func_input",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // func_output ::= OUTPUT L_PAR CONSTSTRING R_PAR SEMICOLON 
            {
              Node RESULT =null;
		
                Node node = new Node();
                RESULT = node;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("func_output",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // func_output ::= OUTPUT L_PAR NUM R_PAR SEMICOLON 
            {
              Node RESULT =null;
		
                Node node = new Node();
                RESULT = node;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("func_output",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // func_output ::= OUTPUT L_PAR ID R_PAR SEMICOLON 
            {
              Node RESULT =null;
		
                Node node = new Node();
                RESULT = node;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("func_output",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // dec_general ::= dec_variable dec_general 
            {
              Node RESULT =null;
		int dgleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dgright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Node dg = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                Node node = new Node();
                RESULT = node;
               
              CUP$parser$result = parser.getSymbolFactory().newSymbol("dec_general",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // dec_general ::= dec_var dec_general 
            {
              Node RESULT =null;
		
                Node node = new Node();
                RESULT = node;
               
              CUP$parser$result = parser.getSymbolFactory().newSymbol("dec_general",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // dec_general ::= dec_while dec_general 
            {
              Node RESULT =null;
		
                Node node = new Node();
                RESULT = node;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("dec_general",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // dec_general ::= dec_for dec_general 
            {
              Node RESULT =null;
		
                Node node = new Node();
                RESULT = node;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("dec_general",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // dec_general ::= dec_switch dec_general 
            {
              Node RESULT =null;
		
                Node node = new Node();
                RESULT = node;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("dec_general",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // dec_general ::= dec_if dec_general 
            {
              Node RESULT =null;
		
                Node node = new Node();
                RESULT = node;
               
              CUP$parser$result = parser.getSymbolFactory().newSymbol("dec_general",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // dec_general ::= dec_llamada_funcion dec_general 
            {
              Node RESULT =null;
		
                Node node = new Node();
                RESULT = node;
               
              CUP$parser$result = parser.getSymbolFactory().newSymbol("dec_general",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // dec_general ::= dec_var_inst dec_general 
            {
              Node RESULT =null;
		
                Node node = new Node();
                RESULT = node;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("dec_general",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // dec_general ::= func_lenguaje dec_general 
            {
              Node RESULT =null;
		
                Node node = new Node();
                RESULT = node;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("dec_general",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // dec_general ::= 
            {
              Node RESULT =null;
		
                Node node = new Node();
                RESULT = node;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("dec_general",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // dec_variable ::= VARIABLE ID COLON tipo dec_var 
            {
              Node RESULT =null;
		
                Node node = new Node();
                RESULT = node;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("dec_variable",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // dec_variable ::= VARIABLE ID L_BRACKET NUM R_BRACKET COLON tipo dec_inst dec_var 
            {
              Node RESULT =null;
		
                Node node = new Node();
                RESULT = node;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("dec_variable",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // dec_var ::= dec_inst SEMICOLON 
            {
              Node RESULT =null;
		
                Node node = new Node();
                RESULT = node;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("dec_var",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // dec_var ::= COMMA ID COLON tipo dec_inst dec_var 
            {
              Node RESULT =null;
		
                Node node = new Node();
                RESULT = node;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("dec_var",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // dec_var ::= COMMA ID L_BRACKET NUM R_BRACKET COLON tipo dec_inst dec_var 
            {
              Node RESULT =null;
		
                Node node = new Node();
                RESULT = node;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("dec_var",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // dec_inst ::= OPASIGN ID 
            {
              Node RESULT =null;
		
                Node node = new Node();
                RESULT = node;
             
              CUP$parser$result = parser.getSymbolFactory().newSymbol("dec_inst",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // dec_inst ::= OPASIGN ID DOT AT L_PAR NUM R_PAR 
            {
              Node RESULT =null;
		
                Node node = new Node();
                RESULT = node;
             
              CUP$parser$result = parser.getSymbolFactory().newSymbol("dec_inst",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // dec_inst ::= OPASIGN NUM 
            {
              Node RESULT =null;
		
                Node node = new Node();
                RESULT = node;
             
              CUP$parser$result = parser.getSymbolFactory().newSymbol("dec_inst",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // dec_inst ::= OPASIGN CONSTSTRING 
            {
              Node RESULT =null;
		
                Node node = new Node();
                RESULT = node;
             
              CUP$parser$result = parser.getSymbolFactory().newSymbol("dec_inst",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // dec_inst ::= OPASIGN CONSTCHAR 
            {
              Node RESULT =null;
		
                Node node = new Node();
                RESULT = node;
             
              CUP$parser$result = parser.getSymbolFactory().newSymbol("dec_inst",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // dec_inst ::= OPASIGN TRUE 
            {
              Node RESULT =null;
		
                Node node = new Node();
                RESULT = node;
             
              CUP$parser$result = parser.getSymbolFactory().newSymbol("dec_inst",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // dec_inst ::= OPASIGN FALSE 
            {
              Node RESULT =null;
		
                Node node = new Node();
                RESULT = node;
             
              CUP$parser$result = parser.getSymbolFactory().newSymbol("dec_inst",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // dec_inst ::= OPASIGN dec_llamada_funcion 
            {
              Node RESULT =null;
		
                Node node = new Node();
                RESULT = node;
             
              CUP$parser$result = parser.getSymbolFactory().newSymbol("dec_inst",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // dec_inst ::= OPASIGN L_KEY valor arr_cont R_KEY 
            {
              Node RESULT =null;
		
                Node node = new Node();
                RESULT = node;
             
              CUP$parser$result = parser.getSymbolFactory().newSymbol("dec_inst",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // dec_inst ::= 
            {
              Node RESULT =null;
		
                Node node = new Node();
                RESULT = node;
             
              CUP$parser$result = parser.getSymbolFactory().newSymbol("dec_inst",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // arr_cont ::= COMMA valor arr_cont 
            {
              Node RESULT =null;
		
                Node node = new Node();
                RESULT = node;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("arr_cont",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // arr_cont ::= 
            {
              Node RESULT =null;
		
                Node node = new Node();
                RESULT = node;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("arr_cont",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // dec_var_inst ::= ID OPASIGN valor SEMICOLON 
            {
              Node RESULT =null;
		
                Node node = new Node();
                RESULT = node;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("dec_var_inst",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // dec_var_inst ::= ID DOT AT L_PAR NUM R_PAR OPASIGN valor SEMICOLON 
            {
              Node RESULT =null;
		
                Node node = new Node();
                RESULT = node;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("dec_var_inst",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // valor ::= CONSTSTRING 
            {
              Node RESULT =null;
		
                Node node = new Node();
                RESULT = node;
           
              CUP$parser$result = parser.getSymbolFactory().newSymbol("valor",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // valor ::= CONSTCHAR 
            {
              Node RESULT =null;
		
                Node node = new Node();
                RESULT = node;
           
              CUP$parser$result = parser.getSymbolFactory().newSymbol("valor",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // valor ::= TRUE 
            {
              Node RESULT =null;
		
                Node node = new Node();
                RESULT = node;
           
              CUP$parser$result = parser.getSymbolFactory().newSymbol("valor",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // valor ::= FALSE 
            {
              Node RESULT =null;
		
                Node node = new Node();
                RESULT = node;
           
              CUP$parser$result = parser.getSymbolFactory().newSymbol("valor",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // valor ::= math_op 
            {
              Node RESULT =null;
		
                Node node = new Node();
                RESULT = node;
           
              CUP$parser$result = parser.getSymbolFactory().newSymbol("valor",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // math_op ::= m_op sum_op 
            {
              Node RESULT =null;
		
                Node node = new Node();
                RESULT = node;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("math_op",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // sum_op ::= OPSUM m_op sum_op 
            {
              Node RESULT =null;
		
                Node node = new Node();
                RESULT = node;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sum_op",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // sum_op ::= 
            {
              Node RESULT =null;
		
                Node node = new Node();
                RESULT = node;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sum_op",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // m_op ::= val mult_op 
            {
              Node RESULT =null;
		
                Node node = new Node();
                RESULT = node;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("m_op",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // mult_op ::= OPMULT val mult_op 
            {
              Node RESULT =null;
		
                Node node = new Node();
                RESULT = node;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("mult_op",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // mult_op ::= 
            {
              Node RESULT =null;
		
                Node node = new Node();
                RESULT = node;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("mult_op",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // val ::= ID 
            {
              Node RESULT =null;
		
                Node node = new Node();
                RESULT = node;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("val",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // val ::= NUM 
            {
              Node RESULT =null;
		
                Node node = new Node();
                RESULT = node;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("val",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // val ::= dec_llamada_funcion 
            {
              Node RESULT =null;
		
                Node node = new Node();
                RESULT = node;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("val",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // val ::= L_PAR math_op R_PAR 
            {
              Node RESULT =null;
		
                Node node = new Node();
                RESULT = node;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("val",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // dec_while ::= WHILE L_PAR condicion R_PAR L_BRACKET dec_general R_BRACKET 
            {
              Node RESULT =null;
		
                Node node = new Node();
                RESULT = node;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("dec_while",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // dec_for ::= FOR L_PAR ID COMMA NUM UPTO COMMA STEP L_PAR NUM R_PAR R_PAR L_KEY dec_general R_KEY 
            {
              Node RESULT =null;
		
                Node node = new Node();
                RESULT = node;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("dec_for",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-14)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // dec_for ::= FOR L_PAR ID COMMA NUM DOWNTO NUM COMMA STEP L_PAR NUM R_PAR R_PAR L_BRACKET dec_general R_BRACKET 
            {
              Node RESULT =null;
		
                Node node = new Node();
                RESULT = node;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("dec_for",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-15)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // dec_for ::= FOR L_PAR VARIABLE ID COLON INTEGER COMMA NUM UPTO NUM COMMA STEP L_PAR NUM R_PAR R_PAR L_BRACKET dec_general R_BRACKET 
            {
              Node RESULT =null;
		
                Node node = new Node();
                RESULT = node;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("dec_for",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-18)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // dec_for ::= FOR L_PAR VARIABLE ID COLON INTEGER COMMA NUM DOWNTO NUM COMMA STEP L_PAR NUM R_PAR R_PAR L_BRACKET dec_general R_BRACKET 
            {
              Node RESULT =null;
		
                Node node = new Node();
                RESULT = node;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("dec_for",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-18)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // dec_switch ::= SWITCH L_PAR ID R_PAR L_BRACKET list_op R_BRACKET 
            {
              Node RESULT =null;
		
                Node node = new Node();
                RESULT = node;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("dec_switch",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // list_op ::= OPTION valor COLON dec_general new_op 
            {
              Node RESULT =null;
		
                Node node = new Node();
                RESULT = node;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("list_op",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // new_op ::= BREAK SEMICOLON list_op 
            {
              Node RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("new_op",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // new_op ::= BREAK SEMICOLON DEFAULT COLON dec_general 
            {
              Node RESULT =null;
		
                Node node = new Node();
                RESULT = node;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("new_op",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // new_op ::= BREAK SEMICOLON 
            {
              Node RESULT =null;
		
                Node node = new Node();
                RESULT = node;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("new_op",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // dec_if ::= IF L_PAR condicion R_PAR L_KEY dec_general R_KEY dec_else 
            {
              Node RESULT =null;
		
                Node node = new Node();
                RESULT = node;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("dec_if",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // dec_else ::= ELSE dec_if 
            {
              Node RESULT =null;
		
                Node node = new Node();
                RESULT = node;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("dec_else",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // dec_else ::= ELSE L_KEY dec_general R_KEY 
            {
              Node RESULT =null;
		
                Node node = new Node();
                RESULT = node;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("dec_else",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // dec_else ::= 
            {
              Node RESULT =null;
		
                Node node = new Node();
                RESULT = node;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("dec_else",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // dec_llamada_funcion ::= ID L_PAR llamada_parametros R_PAR fin_llamada 
            {
              Node RESULT =null;
		
                Node node = new Node();
                RESULT = node;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("dec_llamada_funcion",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // llamada_parametros ::= valor lista_valores 
            {
              Node RESULT =null;
		
                Node node = new Node();
                RESULT = node;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("llamada_parametros",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // llamada_parametros ::= 
            {
              Node RESULT =null;
		
                Node node = new Node();
                RESULT = node;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("llamada_parametros",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // lista_valores ::= COMMA valor 
            {
              Node RESULT =null;
		
                Node node = new Node();
                RESULT = node;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_valores",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // lista_valores ::= 
            {
              Node RESULT =null;
		
                Node node = new Node();
                RESULT = node;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_valores",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // fin_llamada ::= SEMICOLON 
            {
              Node RESULT =null;
		
                Node node = new Node();
                RESULT = node;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("fin_llamada",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // condicion ::= valor_cond OPREL valor_cond 
            {
              Node RESULT =null;
		
                Node node = new Node();
                RESULT = node;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("condicion",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // condicion ::= valor_cond OPREL valor_cond OPLOG condicion 
            {
              Node RESULT =null;
		
                Node node = new Node();
                RESULT = node;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("condicion",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // condicion ::= valor_cond 
            {
              Node RESULT =null;
		
                Node node = new Node();
                RESULT = node;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("condicion",31, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // condicion ::= NULL 
            {
              Node RESULT =null;
		
                Node node = new Node();
                RESULT = node;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("condicion",31, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // condicion ::= valor_cond OPLOG condicion 
            {
              Node RESULT =null;
		
                Node node = new Node();
                RESULT = node;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("condicion",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // valor_cond ::= NUM 
            {
              Node RESULT =null;
		
                Node node = new Node();
                RESULT = node;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("valor_cond",32, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // valor_cond ::= ID 
            {
              Node RESULT =null;
		
                Node node = new Node();
                RESULT = node;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("valor_cond",32, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // valor_cond ::= TRUE 
            {
              Node RESULT =null;
		
                Node node = new Node();
                RESULT = node;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("valor_cond",32, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // valor_cond ::= FALSE 
            {
              Node RESULT =null;
		
                Node node = new Node();
                RESULT = node;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("valor_cond",32, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // dec_return ::= RETURN dec_llamada_funcion 
            {
              Node RESULT =null;
		
                Node node = new Node();
                RESULT = node;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("dec_return",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // dec_return ::= RETURN SEMICOLON 
            {
              Node RESULT =null;
		
                Node node = new Node();
                RESULT = node;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("dec_return",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // dec_return ::= RETURN valor SEMICOLON 
            {
              Node RESULT =null;
		
                Node node = new Node();
                RESULT = node;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("dec_return",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // tipo ::= BOOLEAN 
            {
              Node RESULT =null;
		
                Node node = new Node();
                RESULT = node;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo",34, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // tipo ::= CHARACTER 
            {
              Node RESULT =null;
		
                Node node = new Node();
                RESULT = node;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo",34, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // tipo ::= INTEGER 
            {
              Node RESULT =null;
		
                Node node = new Node();
                RESULT = node;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo",34, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // tipo ::= VOID 
            {
              Node RESULT =null;
		
                Node node = new Node();
                RESULT = node;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo",34, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // tipo ::= STRING 
            {
              Node RESULT =null;
		
                Node node = new Node();
                RESULT = node;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo",34, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
