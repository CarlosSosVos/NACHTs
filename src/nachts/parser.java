
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package nachts;

import java_cup.runtime.*;
import java.util.ArrayList;
import java.util.LinkedList;
import java.util.List;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return Sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\172\000\002\002\004\000\002\002\004\000\002\003" +
    "\004\000\002\003\002\000\002\004\014\000\002\004\014" +
    "\000\002\005\007\000\002\005\006\000\002\005\002\000" +
    "\002\006\010\000\002\006\007\000\002\007\003\000\002" +
    "\007\003\000\002\010\010\000\002\011\006\000\002\011" +
    "\006\000\002\011\006\000\002\011\006\000\002\012\004" +
    "\000\002\012\004\000\002\012\004\000\002\012\004\000" +
    "\002\012\004\000\002\012\004\000\002\012\005\000\002" +
    "\012\004\000\002\012\005\000\002\012\004\000\002\012" +
    "\004\000\002\012\002\000\002\013\007\000\002\013\013" +
    "\000\002\013\016\000\002\014\004\000\002\014\010\000" +
    "\002\014\013\000\002\014\016\000\002\015\004\000\002" +
    "\015\011\000\002\015\004\000\002\015\004\000\002\015" +
    "\004\000\002\015\004\000\002\015\004\000\002\015\004" +
    "\000\002\015\004\000\002\015\004\000\002\015\004\000" +
    "\002\015\002\000\002\047\006\000\002\050\005\000\002" +
    "\050\002\000\002\046\006\000\002\016\005\000\002\016" +
    "\002\000\002\017\006\000\002\017\013\000\002\017\006" +
    "\000\002\017\006\000\002\017\005\000\002\017\015\000" +
    "\002\020\003\000\002\020\003\000\002\020\003\000\002" +
    "\020\003\000\002\020\003\000\002\020\003\000\002\020" +
    "\003\000\002\020\003\000\002\020\003\000\002\020\010" +
    "\000\002\021\003\000\002\021\003\000\002\022\004\000" +
    "\002\023\005\000\002\023\005\000\002\023\004\000\002" +
    "\024\004\000\002\025\005\000\002\025\005\000\002\025" +
    "\004\000\002\026\003\000\002\026\003\000\002\026\003" +
    "\000\002\026\005\000\002\027\011\000\002\030\022\000" +
    "\002\030\022\000\002\030\025\000\002\030\025\000\002" +
    "\031\011\000\002\032\007\000\002\033\005\000\002\033" +
    "\007\000\002\033\004\000\002\034\012\000\002\035\012" +
    "\000\002\035\006\000\002\035\002\000\002\036\006\000" +
    "\002\037\004\000\002\037\003\000\002\037\002\000\002" +
    "\040\005\000\002\040\004\000\002\042\005\000\002\042" +
    "\007\000\002\042\003\000\002\042\003\000\002\042\005" +
    "\000\002\043\003\000\002\043\003\000\002\043\003\000" +
    "\002\043\003\000\002\044\004\000\002\044\003\000\002" +
    "\045\003\000\002\045\003\000\002\045\003\000\002\045" +
    "\003\000\002\045\003\000\002\045\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u014c\000\004\004\005\001\002\000\006\002\ufffe\004" +
    "\005\001\002\000\004\043\010\001\002\000\004\002\007" +
    "\001\002\000\004\002\001\001\002\000\004\062\011\001" +
    "\002\000\006\011\013\063\ufff9\001\002\000\004\063\034" +
    "\001\002\000\004\043\014\001\002\000\004\066\015\001" +
    "\002\000\016\012\017\014\022\020\016\021\021\022\023" +
    "\030\024\001\002\000\014\053\uff8b\056\uff8b\063\uff8b\064" +
    "\uff8b\065\uff8b\001\002\000\014\053\uff89\056\uff89\063\uff89" +
    "\064\uff89\065\uff89\001\002\000\006\063\ufffa\064\025\001" +
    "\002\000\014\053\uff8c\056\uff8c\063\uff8c\064\uff8c\065\uff8c" +
    "\001\002\000\014\053\uff88\056\uff88\063\uff88\064\uff88\065" +
    "\uff88\001\002\000\014\053\uff8d\056\uff8d\063\uff8d\064\uff8d" +
    "\065\uff8d\001\002\000\014\053\uff8a\056\uff8a\063\uff8a\064" +
    "\uff8a\065\uff8a\001\002\000\004\011\027\001\002\000\004" +
    "\063\ufffb\001\002\000\004\043\030\001\002\000\004\066" +
    "\031\001\002\000\016\012\017\014\022\020\016\021\021" +
    "\022\023\030\024\001\002\000\006\063\ufff7\064\025\001" +
    "\002\000\004\063\ufff8\001\002\000\004\066\035\001\002" +
    "\000\020\012\017\014\022\020\016\021\021\022\023\030" +
    "\024\071\037\001\002\000\004\056\u0149\001\002\000\004" +
    "\056\040\001\002\000\036\003\065\011\052\023\053\025" +
    "\046\026\070\027\047\035\042\036\071\037\051\043\055" +
    "\053\072\057\uffe4\064\061\065\uffd1\001\002\000\004\065" +
    "\u0147\001\002\000\004\062\u0142\001\002\000\040\003\065" +
    "\011\052\023\053\025\046\026\070\027\047\033\uffe4\035" +
    "\042\036\071\037\051\043\055\053\072\057\uffe4\064\061" +
    "\065\uffd1\001\002\000\004\065\ufff5\001\002\000\004\065" +
    "\ufff6\001\002\000\004\062\u013b\001\002\000\024\005\114" +
    "\015\116\016\130\017\121\031\123\032\125\043\126\062" +
    "\131\065\uff8e\001\002\000\040\003\065\011\052\023\053" +
    "\025\046\026\070\027\047\033\uffe4\035\042\036\071\037" +
    "\051\043\055\053\072\057\uffe4\064\061\065\uffd1\001\002" +
    "\000\004\062\u0128\001\002\000\004\043\u0116\001\002\000" +
    "\004\062\367\001\002\000\040\003\065\011\052\023\053" +
    "\025\046\026\070\027\047\033\uffe4\035\042\036\071\037" +
    "\051\043\055\053\072\057\uffe4\064\061\065\uffd1\001\002" +
    "\000\016\052\340\053\335\054\337\055\336\062\106\070" +
    "\341\001\002\000\040\003\065\011\052\023\053\025\046" +
    "\026\070\027\047\033\uffe4\035\042\036\071\037\051\043" +
    "\055\053\072\057\uffe4\064\061\065\uffd1\001\002\000\004" +
    "\065\332\001\002\000\040\003\065\011\052\023\053\025" +
    "\046\026\070\027\047\033\uffe4\035\042\036\071\037\051" +
    "\043\055\053\072\057\uffe4\064\061\065\uffd1\001\002\000" +
    "\004\043\306\001\002\000\004\065\305\001\002\000\004" +
    "\057\304\001\002\000\040\003\065\011\052\023\053\025" +
    "\046\026\070\027\047\033\uffe4\035\042\036\071\037\051" +
    "\043\055\053\072\057\uffe4\064\061\065\uffd1\001\002\000" +
    "\004\057\302\001\002\000\004\065\301\001\002\000\040" +
    "\003\065\011\052\023\053\025\046\026\070\027\047\033" +
    "\uffe4\035\042\036\071\037\051\043\055\053\072\057\uffe4" +
    "\064\061\065\uffd1\001\002\000\004\062\212\001\002\000" +
    "\004\062\201\001\002\000\022\005\074\015\076\016\105" +
    "\017\101\031\100\032\103\043\104\056\073\001\002\000" +
    "\024\005\114\015\116\016\130\017\121\031\123\032\125" +
    "\043\126\056\164\062\131\001\002\000\010\053\uffda\064" +
    "\uffda\065\uffda\001\002\000\010\053\uffd4\064\uffd4\065\uffd4" +
    "\001\002\000\010\053\uffd9\064\uffd9\065\uffd9\001\002\000" +
    "\010\053\uffd3\064\uffd3\065\uffd3\001\002\000\010\053\uffd6" +
    "\064\uffd6\065\uffd6\001\002\000\010\053\uffd7\064\uffd7\065" +
    "\uffd7\001\002\000\010\053\uffd2\064\uffd2\065\uffd2\001\002" +
    "\000\010\053\uffd5\064\uffd5\065\uffd5\001\002\000\014\053" +
    "\uffdc\062\106\064\uffdc\065\uffdc\070\107\001\002\000\010" +
    "\053\uffd8\064\uffd8\065\uffd8\001\002\000\024\005\114\015" +
    "\116\016\130\017\121\031\123\032\125\043\126\062\131" +
    "\063\uff9b\001\002\000\004\067\110\001\002\000\004\062" +
    "\111\001\002\000\004\005\112\001\002\000\004\063\113" +
    "\001\002\000\010\053\uffdb\064\uffdb\065\uffdb\001\002\000" +
    "\020\050\uffaf\051\uffaf\057\uffc0\063\uffc0\064\uffc0\065\uffc0" +
    "\066\uffc0\001\002\000\020\050\uffae\051\uffae\057\uffbd\063" +
    "\uffbd\064\uffbd\065\uffbd\066\uffbd\001\002\000\014\057\uffbf" +
    "\063\uffbf\064\uffbf\065\uffbf\066\uffbf\001\002\000\014\057" +
    "\uffba\063\uffba\064\uffba\065\uffba\066\uffba\001\002\000\006" +
    "\050\155\051\154\001\002\000\014\057\uffc3\063\uffc3\064" +
    "\uffc3\065\uffc3\066\uffc3\001\002\000\006\063\uff9c\064\146" +
    "\001\002\000\014\057\uffc2\063\uffc2\064\uffc2\065\uffc2\066" +
    "\uffc2\001\002\000\004\063\145\001\002\000\014\057\uffc1" +
    "\063\uffc1\064\uffc1\065\uffc1\066\uffc1\001\002\000\024\050" +
    "\uffb0\051\uffb0\057\uffbc\062\106\063\uffbc\064\uffbc\065\uffbc" +
    "\066\uffbc\070\140\001\002\000\014\057\uffb9\063\uffb9\064" +
    "\uffb9\065\uffb9\066\uffb9\001\002\000\014\057\uffc4\063\uffc4" +
    "\064\uffc4\065\uffc4\066\uffc4\001\002\000\010\005\134\043" +
    "\133\062\131\001\002\000\014\057\uffbe\063\uffbe\064\uffbe" +
    "\065\uffbe\066\uffbe\001\002\000\022\050\uffb0\051\uffb0\057" +
    "\uffb0\062\106\063\uffb0\064\uffb0\065\uffb0\066\uffb0\001\002" +
    "\000\020\050\uffaf\051\uffaf\057\uffaf\063\uffaf\064\uffaf\065" +
    "\uffaf\066\uffaf\001\002\000\004\063\137\001\002\000\020" +
    "\050\uffae\051\uffae\057\uffae\063\uffae\064\uffae\065\uffae\066" +
    "\uffae\001\002\000\020\050\uffad\051\uffad\057\uffad\063\uffad" +
    "\064\uffad\065\uffad\066\uffad\001\002\000\004\067\141\001" +
    "\002\000\004\062\142\001\002\000\004\005\143\001\002" +
    "\000\004\063\144\001\002\000\014\057\uffbb\063\uffbb\064" +
    "\uffbb\065\uffbb\066\uffbb\001\002\000\022\050\uff9e\051\uff9e" +
    "\053\uff9e\057\uff9e\063\uff9e\064\uff9e\065\uff9e\066\uff9e\001" +
    "\002\000\022\005\114\015\116\016\130\017\121\031\123" +
    "\032\125\043\126\062\131\001\002\000\004\063\uff9d\001" +
    "\002\000\006\063\uff99\064\146\001\002\000\004\063\uff9a" +
    "\001\002\000\014\057\uffb4\063\uffb4\064\uffb4\065\uffb4\066" +
    "\uffb4\001\002\000\014\057\uffb8\063\uffb8\064\uffb8\065\uffb8" +
    "\066\uffb8\001\002\000\010\005\134\043\133\062\131\001" +
    "\002\000\010\005\134\043\133\062\131\001\002\000\020" +
    "\050\155\051\154\057\uffb1\063\uffb1\064\uffb1\065\uffb1\066" +
    "\uffb1\001\002\000\014\057\uffb3\063\uffb3\064\uffb3\065\uffb3" +
    "\066\uffb3\001\002\000\014\057\uffb2\063\uffb2\064\uffb2\065" +
    "\uffb2\066\uffb2\001\002\000\020\050\155\051\154\057\uffb5" +
    "\063\uffb5\064\uffb5\065\uffb5\066\uffb5\001\002\000\014\057" +
    "\uffb6\063\uffb6\064\uffb6\065\uffb6\066\uffb6\001\002\000\014" +
    "\057\uffb7\063\uffb7\064\uffb7\065\uffb7\066\uffb7\001\002\000" +
    "\022\005\114\015\116\016\130\017\121\031\123\032\125" +
    "\043\126\062\131\001\002\000\006\057\uffce\064\174\001" +
    "\002\000\006\057\uffcb\064\167\001\002\000\022\005\114" +
    "\015\116\016\130\017\121\031\123\032\125\043\126\062" +
    "\131\001\002\000\004\057\171\001\002\000\012\053\uffcd" +
    "\057\uffcd\064\uffcd\065\uffcd\001\002\000\006\057\uffcb\064" +
    "\167\001\002\000\004\057\uffcc\001\002\000\004\056\164" +
    "\001\002\000\004\057\176\001\002\000\010\053\uffd0\064" +
    "\uffd0\065\uffd0\001\002\000\006\057\uffce\064\174\001\002" +
    "\000\004\057\uffcf\001\002\000\012\005\202\016\204\017" +
    "\205\043\203\001\002\000\004\063\211\001\002\000\004" +
    "\063\210\001\002\000\004\063\207\001\002\000\004\063" +
    "\206\001\002\000\004\065\ufff2\001\002\000\004\065\ufff3" +
    "\001\002\000\004\065\ufff0\001\002\000\004\065\ufff1\001" +
    "\002\000\006\011\214\043\213\001\002\000\004\064\250" +
    "\001\002\000\004\043\215\001\002\000\004\066\216\001" +
    "\002\000\004\020\217\001\002\000\004\064\220\001\002" +
    "\000\004\005\221\001\002\000\006\006\222\007\223\001" +
    "\002\000\004\005\236\001\002\000\004\005\224\001\002" +
    "\000\004\064\225\001\002\000\004\010\226\001\002\000" +
    "\004\062\227\001\002\000\004\005\230\001\002\000\004" +
    "\063\231\001\002\000\004\063\232\001\002\000\004\056" +
    "\233\001\002\000\036\003\065\011\052\023\053\025\046" +
    "\026\070\027\047\035\042\036\071\037\051\043\055\053" +
    "\072\057\uffe4\064\061\065\uffd1\001\002\000\004\057\235" +
    "\001\002\000\040\003\uffa8\011\uffa8\023\uffa8\025\uffa8\026" +
    "\uffa8\027\uffa8\033\uffa8\035\uffa8\036\uffa8\037\uffa8\043\uffa8" +
    "\053\uffa8\057\uffa8\064\uffa8\065\uffa8\001\002\000\004\064" +
    "\237\001\002\000\004\010\240\001\002\000\004\062\241" +
    "\001\002\000\004\005\242\001\002\000\004\063\243\001" +
    "\002\000\004\063\244\001\002\000\004\056\245\001\002" +
    "\000\036\003\065\011\052\023\053\025\046\026\070\027" +
    "\047\035\042\036\071\037\051\043\055\053\072\057\uffe4" +
    "\064\061\065\uffd1\001\002\000\004\057\247\001\002\000" +
    "\040\003\uffa9\011\uffa9\023\uffa9\025\uffa9\026\uffa9\027\uffa9" +
    "\033\uffa9\035\uffa9\036\uffa9\037\uffa9\043\uffa9\053\uffa9\057" +
    "\uffa9\064\uffa9\065\uffa9\001\002\000\004\005\251\001\002" +
    "\000\006\006\252\007\253\001\002\000\004\005\266\001" +
    "\002\000\004\005\254\001\002\000\004\064\255\001\002" +
    "\000\004\010\256\001\002\000\004\062\257\001\002\000" +
    "\004\005\260\001\002\000\004\063\261\001\002\000\004" +
    "\063\262\001\002\000\004\056\263\001\002\000\036\003" +
    "\065\011\052\023\053\025\046\026\070\027\047\035\042" +
    "\036\071\037\051\043\055\053\072\057\uffe4\064\061\065" +
    "\uffd1\001\002\000\004\057\265\001\002\000\040\003\uffaa" +
    "\011\uffaa\023\uffaa\025\uffaa\026\uffaa\027\uffaa\033\uffaa\035" +
    "\uffaa\036\uffaa\037\uffaa\043\uffaa\053\uffaa\057\uffaa\064\uffaa" +
    "\065\uffaa\001\002\000\004\064\267\001\002\000\004\010" +
    "\270\001\002\000\004\062\271\001\002\000\004\005\272" +
    "\001\002\000\004\063\273\001\002\000\004\063\274\001" +
    "\002\000\004\056\275\001\002\000\036\003\065\011\052" +
    "\023\053\025\046\026\070\027\047\035\042\036\071\037" +
    "\051\043\055\053\072\057\uffe4\064\061\065\uffd1\001\002" +
    "\000\004\057\277\001\002\000\040\003\uffab\011\uffab\023" +
    "\uffab\025\uffab\026\uffab\027\uffab\033\uffab\035\uffab\036\uffab" +
    "\037\uffab\043\uffab\053\uffab\057\uffab\064\uffab\065\uffab\001" +
    "\002\000\006\033\uffe8\057\uffe8\001\002\000\040\003\uffe0" +
    "\011\uffe0\023\uffe0\025\uffe0\026\uffe0\027\uffe0\033\uffe0\035" +
    "\uffe0\036\uffe0\037\uffe0\043\uffe0\053\uffe0\057\uffe0\064\uffe0" +
    "\065\uffe0\001\002\000\006\033\uffe5\057\uffe5\001\002\000" +
    "\006\033\uffeb\057\uffeb\001\002\000\006\002\ufffc\004\ufffc" +
    "\001\002\000\006\033\uffe6\057\uffe6\001\002\000\006\060" +
    "\307\066\310\001\002\000\004\005\314\001\002\000\016" +
    "\012\017\014\022\020\016\021\021\022\023\030\024\001" +
    "\002\000\010\053\072\064\uffd1\065\uffd1\001\002\000\010" +
    "\053\072\064\061\065\uffd1\001\002\000\040\003\uffdf\011" +
    "\uffdf\023\uffdf\025\uffdf\026\uffdf\027\uffdf\033\uffdf\035\uffdf" +
    "\036\uffdf\037\uffdf\043\uffdf\053\uffdf\057\uffdf\064\uffdf\065" +
    "\uffdf\001\002\000\004\061\315\001\002\000\006\060\316" +
    "\066\317\001\002\000\004\005\323\001\002\000\016\012" +
    "\017\014\022\020\016\021\021\022\023\030\024\001\002" +
    "\000\010\053\072\064\uffd1\065\uffd1\001\002\000\010\053" +
    "\072\064\061\065\uffd1\001\002\000\040\003\uffde\011\uffde" +
    "\023\uffde\025\uffde\026\uffde\027\uffde\033\uffde\035\uffde\036" +
    "\uffde\037\uffde\043\uffde\053\uffde\057\uffde\064\uffde\065\uffde" +
    "\001\002\000\004\061\324\001\002\000\004\066\325\001" +
    "\002\000\016\012\017\014\022\020\016\021\021\022\023" +
    "\030\024\001\002\000\010\053\072\064\uffd1\065\uffd1\001" +
    "\002\000\010\053\072\064\061\065\uffd1\001\002\000\040" +
    "\003\uffdd\011\uffdd\023\uffdd\025\uffdd\026\uffdd\027\uffdd\033" +
    "\uffdd\035\uffdd\036\uffdd\037\uffdd\043\uffdd\053\uffdd\057\uffdd" +
    "\064\uffdd\065\uffdd\001\002\000\006\033\uffee\057\uffee\001" +
    "\002\000\040\003\065\011\052\023\053\025\046\026\070" +
    "\027\047\033\uffe4\035\042\036\071\037\051\043\055\053" +
    "\072\057\uffe4\064\061\065\uffd1\001\002\000\006\033\uffe7" +
    "\057\uffe7\001\002\000\006\033\uffec\057\uffec\001\002\000" +
    "\022\005\114\015\116\016\130\017\121\031\123\032\125" +
    "\043\126\062\131\001\002\000\004\005\362\001\002\000" +
    "\022\005\114\015\116\016\130\017\121\031\123\032\125" +
    "\043\126\062\131\001\002\000\004\065\357\001\002\000" +
    "\004\067\342\001\002\000\004\062\343\001\002\000\004" +
    "\005\344\001\002\000\006\063\346\064\345\001\002\000" +
    "\004\005\352\001\002\000\004\053\347\001\002\000\022" +
    "\005\114\015\116\016\130\017\121\031\123\032\125\043" +
    "\126\062\131\001\002\000\004\065\351\001\002\000\040" +
    "\003\uffc9\011\uffc9\023\uffc9\025\uffc9\026\uffc9\027\uffc9\033" +
    "\uffc9\035\uffc9\036\uffc9\037\uffc9\043\uffc9\053\uffc9\057\uffc9" +
    "\064\uffc9\065\uffc9\001\002\000\004\063\353\001\002\000" +
    "\004\053\354\001\002\000\022\005\114\015\116\016\130" +
    "\017\121\031\123\032\125\043\126\062\131\001\002\000" +
    "\004\065\356\001\002\000\040\003\uffc5\011\uffc5\023\uffc5" +
    "\025\uffc5\026\uffc5\027\uffc5\033\uffc5\035\uffc5\036\uffc5\037" +
    "\uffc5\043\uffc5\053\uffc5\057\uffc5\064\uffc5\065\uffc5\001\002" +
    "\000\040\003\uffc6\011\uffc6\023\uffc6\025\uffc6\026\uffc6\027" +
    "\uffc6\033\uffc6\035\uffc6\036\uffc6\037\uffc6\043\uffc6\053\uffc6" +
    "\057\uffc6\064\uffc6\065\uffc6\001\002\000\004\065\361\001" +
    "\002\000\040\003\uffc8\011\uffc8\023\uffc8\025\uffc8\026\uffc8" +
    "\027\uffc8\033\uffc8\035\uffc8\036\uffc8\037\uffc8\043\uffc8\053" +
    "\uffc8\057\uffc8\064\uffc8\065\uffc8\001\002\000\004\065\363" +
    "\001\002\000\040\003\uffc7\011\uffc7\023\uffc7\025\uffc7\026" +
    "\uffc7\027\uffc7\033\uffc7\035\uffc7\036\uffc7\037\uffc7\043\uffc7" +
    "\053\uffc7\057\uffc7\064\uffc7\065\uffc7\001\002\000\004\065" +
    "\365\001\002\000\040\003\uffca\011\uffca\023\uffca\025\uffca" +
    "\026\uffca\027\uffca\033\uffca\035\uffca\036\uffca\037\uffca\043" +
    "\uffca\053\uffca\057\uffca\064\uffca\065\uffca\001\002\000\006" +
    "\033\uffea\057\uffea\001\002\000\014\005\370\031\372\032" +
    "\374\034\375\043\371\001\002\000\010\044\uff93\046\uff93" +
    "\063\uff93\001\002\000\010\044\uff92\046\uff92\063\uff92\001" +
    "\002\000\010\044\uff91\046\uff91\063\uff91\001\002\000\004" +
    "\063\u0105\001\002\000\010\044\uff90\046\uff90\063\uff90\001" +
    "\002\000\004\063\uff95\001\002\000\010\044\377\046\u0100" +
    "\063\uff96\001\002\000\012\005\370\031\372\032\374\043" +
    "\371\001\002\000\014\005\370\031\372\032\374\034\375" +
    "\043\371\001\002\000\004\063\uff94\001\002\000\006\046" +
    "\u0103\063\uff98\001\002\000\014\005\370\031\372\032\374" +
    "\034\375\043\371\001\002\000\004\063\uff97\001\002\000" +
    "\004\056\u0106\001\002\000\036\003\065\011\052\023\053" +
    "\025\046\026\070\027\047\035\042\036\071\037\051\043" +
    "\055\053\072\057\uffe4\064\061\065\uffd1\001\002\000\004" +
    "\057\u0108\001\002\000\044\003\uff9f\011\uff9f\013\u010b\023" +
    "\uff9f\024\u0109\025\uff9f\026\uff9f\027\uff9f\033\uff9f\035\uff9f" +
    "\036\uff9f\037\uff9f\043\uff9f\053\uff9f\057\uff9f\064\uff9f\065" +
    "\uff9f\001\002\000\004\056\u0113\001\002\000\040\003\uffa2" +
    "\011\uffa2\023\uffa2\025\uffa2\026\uffa2\027\uffa2\033\uffa2\035" +
    "\uffa2\036\uffa2\037\uffa2\043\uffa2\053\uffa2\057\uffa2\064\uffa2" +
    "\065\uffa2\001\002\000\004\062\u010c\001\002\000\014\005" +
    "\370\031\372\032\374\034\375\043\371\001\002\000\004" +
    "\063\u010e\001\002\000\004\056\u010f\001\002\000\036\003" +
    "\065\011\052\023\053\025\046\026\070\027\047\035\042" +
    "\036\071\037\051\043\055\053\072\057\uffe4\064\061\065" +
    "\uffd1\001\002\000\004\057\u0111\001\002\000\044\003\uff9f" +
    "\011\uff9f\013\u010b\023\uff9f\024\u0109\025\uff9f\026\uff9f\027" +
    "\uff9f\033\uff9f\035\uff9f\036\uff9f\037\uff9f\043\uff9f\053\uff9f" +
    "\057\uff9f\064\uff9f\065\uff9f\001\002\000\040\003\uffa1\011" +
    "\uffa1\023\uffa1\025\uffa1\026\uffa1\027\uffa1\033\uffa1\035\uffa1" +
    "\036\uffa1\037\uffa1\043\uffa1\053\uffa1\057\uffa1\064\uffa1\065" +
    "\uffa1\001\002\000\036\003\065\011\052\023\053\025\046" +
    "\026\070\027\047\035\042\036\071\037\051\043\055\053" +
    "\072\057\uffe4\064\061\065\uffd1\001\002\000\004\057\u0115" +
    "\001\002\000\040\003\uffa0\011\uffa0\023\uffa0\025\uffa0\026" +
    "\uffa0\027\uffa0\033\uffa0\035\uffa0\036\uffa0\037\uffa0\043\uffa0" +
    "\053\uffa0\057\uffa0\064\uffa0\065\uffa0\001\002\000\006\060" +
    "\u0117\066\u0118\001\002\000\004\005\u011b\001\002\000\016" +
    "\012\017\014\022\020\016\021\021\022\023\030\024\001" +
    "\002\000\010\053\072\064\061\065\uffd1\001\002\000\040" +
    "\003\uffe3\011\uffe3\023\uffe3\025\uffe3\026\uffe3\027\uffe3\033" +
    "\uffe3\035\uffe3\036\uffe3\037\uffe3\043\uffe3\053\uffe3\057\uffe3" +
    "\064\uffe3\065\uffe3\001\002\000\004\061\u011c\001\002\000" +
    "\006\060\u011d\066\u011e\001\002\000\004\005\u0122\001\002" +
    "\000\016\012\017\014\022\020\016\021\021\022\023\030" +
    "\024\001\002\000\010\053\072\064\uffd1\065\uffd1\001\002" +
    "\000\010\053\072\064\061\065\uffd1\001\002\000\040\003" +
    "\uffe2\011\uffe2\023\uffe2\025\uffe2\026\uffe2\027\uffe2\033\uffe2" +
    "\035\uffe2\036\uffe2\037\uffe2\043\uffe2\053\uffe2\057\uffe2\064" +
    "\uffe2\065\uffe2\001\002\000\004\061\u0123\001\002\000\004" +
    "\066\u0124\001\002\000\016\012\017\014\022\020\016\021" +
    "\021\022\023\030\024\001\002\000\010\053\072\064\uffd1" +
    "\065\uffd1\001\002\000\010\053\072\064\061\065\uffd1\001" +
    "\002\000\040\003\uffe1\011\uffe1\023\uffe1\025\uffe1\026\uffe1" +
    "\027\uffe1\033\uffe1\035\uffe1\036\uffe1\037\uffe1\043\uffe1\053" +
    "\uffe1\057\uffe1\064\uffe1\065\uffe1\001\002\000\004\043\u0129" +
    "\001\002\000\004\063\u012a\001\002\000\004\056\u012b\001" +
    "\002\000\004\041\u012c\001\002\000\022\005\114\015\116" +
    "\016\130\017\121\031\123\032\125\043\126\062\131\001" +
    "\002\000\004\057\u012e\001\002\000\040\003\uffa7\011\uffa7" +
    "\023\uffa7\025\uffa7\026\uffa7\027\uffa7\033\uffa7\035\uffa7\036" +
    "\uffa7\037\uffa7\043\uffa7\053\uffa7\057\uffa7\064\uffa7\065\uffa7" +
    "\001\002\000\004\066\u0130\001\002\000\036\003\065\011" +
    "\052\023\053\025\046\026\070\027\047\033\uffe4\035\042" +
    "\036\071\037\051\043\055\053\072\064\061\065\uffd1\001" +
    "\002\000\004\033\u0133\001\002\000\004\057\uffa6\001\002" +
    "\000\004\065\u0134\001\002\000\010\041\u012c\042\u0135\057" +
    "\uffa3\001\002\000\004\066\u0137\001\002\000\004\057\uffa5" +
    "\001\002\000\036\003\065\011\052\023\053\025\046\026" +
    "\070\027\047\035\042\036\071\037\051\043\055\053\072" +
    "\057\uffe4\064\061\065\uffd1\001\002\000\004\057\uffa4\001" +
    "\002\000\006\033\uffed\057\uffed\001\002\000\004\065\uff8f" +
    "\001\002\000\014\005\370\031\372\032\374\034\375\043" +
    "\371\001\002\000\004\063\u013d\001\002\000\004\056\u013e" +
    "\001\002\000\036\003\065\011\052\023\053\025\046\026" +
    "\070\027\047\035\042\036\071\037\051\043\055\053\072" +
    "\057\uffe4\064\061\065\uffd1\001\002\000\004\057\u0140\001" +
    "\002\000\040\003\uffac\011\uffac\023\uffac\025\uffac\026\uffac" +
    "\027\uffac\033\uffac\035\uffac\036\uffac\037\uffac\043\uffac\053" +
    "\uffac\057\uffac\064\uffac\065\uffac\001\002\000\006\033\uffef" +
    "\057\uffef\001\002\000\004\043\u0143\001\002\000\004\064" +
    "\u0144\001\002\000\016\012\017\014\022\020\016\021\021" +
    "\022\023\030\024\001\002\000\004\063\u0146\001\002\000" +
    "\004\065\ufff4\001\002\000\040\003\065\011\052\023\053" +
    "\025\046\026\070\027\047\033\uffe4\035\042\036\071\037" +
    "\051\043\055\053\072\057\uffe4\064\061\065\uffd1\001\002" +
    "\000\006\033\uffe9\057\uffe9\001\002\000\036\003\065\011" +
    "\052\023\053\025\046\026\070\027\047\035\042\036\071" +
    "\037\051\043\055\053\072\057\uffe4\064\061\065\uffd1\001" +
    "\002\000\004\057\u014b\001\002\000\006\002\ufffd\004\ufffd" +
    "\001\002\000\006\002\ufffe\004\005\001\002\000\004\002" +
    "\000\001\002\000\004\002\uffff\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u014c\000\006\002\005\004\003\001\001\000\006\003" +
    "\u014c\004\u014b\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\005\011\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\045\017\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\006\025\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\045\031\001\001\000\004\006\032\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\045\035\001\001" +
    "\000\002\001\001\000\002\001\001\000\036\007\056\010" +
    "\044\011\043\012\062\013\042\014\057\015\065\017\066" +
    "\027\047\030\055\031\063\034\053\036\040\044\061\001" +
    "\001\000\002\001\001\000\002\001\001\000\036\007\056" +
    "\010\044\011\043\012\u0140\013\042\014\057\015\065\017" +
    "\066\027\047\030\055\031\063\034\053\036\040\044\061" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\016\020\u0139\021\131\022\116\024\126\026\117" +
    "\036\114\001\001\000\036\007\056\010\044\011\043\012" +
    "\u0138\013\042\014\057\015\065\017\066\027\047\030\055" +
    "\031\063\034\053\036\040\044\061\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\036\007\056" +
    "\010\044\011\043\012\365\013\042\014\057\015\065\017" +
    "\066\027\047\030\055\031\063\034\053\036\040\044\061" +
    "\001\001\000\002\001\001\000\036\007\056\010\044\011" +
    "\043\012\333\013\042\014\057\015\065\017\066\027\047" +
    "\030\055\031\063\034\053\036\040\044\061\001\001\000" +
    "\002\001\001\000\036\007\056\010\044\011\043\012\330" +
    "\013\042\014\057\015\065\017\066\027\047\030\055\031" +
    "\063\034\053\036\040\044\061\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\036\007\056\010" +
    "\044\011\043\012\302\013\042\014\057\015\065\017\066" +
    "\027\047\030\055\031\063\034\053\036\040\044\061\001" +
    "\001\000\002\001\001\000\002\001\001\000\036\007\056" +
    "\010\044\011\043\012\277\013\042\014\057\015\065\017" +
    "\066\027\047\030\055\031\063\034\053\036\040\044\061" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\036" +
    "\074\046\076\047\101\001\001\000\020\020\165\021\131" +
    "\022\116\024\126\026\117\036\114\046\164\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\020\020\121\021\131\022\116\024\126\026\117\036" +
    "\114\037\123\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\023\152\025\151\001\001\000\002\001" +
    "\001\000\004\040\146\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\014\021\134\022\116\024\126" +
    "\026\117\036\135\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\016\020\147\021\131\022\116\024\126\026" +
    "\117\036\114\001\001\000\002\001\001\000\004\040\150" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\026\160\036\135\001\001\000\006\026\155" +
    "\036\135\001\001\000\006\023\157\025\156\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\023\162\025\161" +
    "\001\001\000\002\001\001\000\002\001\001\000\016\020" +
    "\165\021\131\022\116\024\126\026\117\036\114\001\001" +
    "\000\004\050\174\001\001\000\004\016\167\001\001\000" +
    "\016\020\171\021\131\022\116\024\126\026\117\036\114" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\016" +
    "\172\001\001\000\002\001\001\000\004\046\176\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\050\177\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\036\007\056\010\044\011\043" +
    "\012\233\013\042\014\057\015\065\017\066\027\047\030" +
    "\055\031\063\034\053\036\040\044\061\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\036\007\056\010" +
    "\044\011\043\012\245\013\042\014\057\015\065\017\066" +
    "\027\047\030\055\031\063\034\053\036\040\044\061\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\036\007\056\010\044\011\043\012\263\013\042" +
    "\014\057\015\065\017\066\027\047\030\055\031\063\034" +
    "\053\036\040\044\061\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\036\007\056\010\044\011\043\012" +
    "\275\013\042\014\057\015\065\017\066\027\047\030\055" +
    "\031\063\034\053\036\040\044\061\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\045\310\001\001\000\004\015\311\001\001\000\006\014" +
    "\312\015\065\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\045\317\001" +
    "\001\000\004\015\320\001\001\000\006\014\321\015\065" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\045\325\001\001\000\004\015\326\001\001" +
    "\000\006\014\327\015\065\001\001\000\002\001\001\000" +
    "\002\001\001\000\036\007\056\010\044\011\043\012\332" +
    "\013\042\014\057\015\065\017\066\027\047\030\055\031" +
    "\063\034\053\036\040\044\061\001\001\000\002\001\001" +
    "\000\002\001\001\000\016\020\363\021\131\022\116\024" +
    "\126\026\117\036\114\001\001\000\002\001\001\000\016" +
    "\020\357\021\131\022\116\024\126\026\117\036\114\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\016\020\347\021\131\022\116\024\126" +
    "\026\117\036\114\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\016\020\354" +
    "\021\131\022\116\024\126\026\117\036\114\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\042\372\043\375\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\043" +
    "\u0101\001\001\000\006\042\u0100\043\375\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\042\u0103\043\375\001" +
    "\001\000\002\001\001\000\002\001\001\000\036\007\056" +
    "\010\044\011\043\012\u0106\013\042\014\057\015\065\017" +
    "\066\027\047\030\055\031\063\034\053\036\040\044\061" +
    "\001\001\000\002\001\001\000\004\035\u0109\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\042\u010c\043\375\001\001\000\002\001\001\000\002\001" +
    "\001\000\036\007\056\010\044\011\043\012\u010f\013\042" +
    "\014\057\015\065\017\066\027\047\030\055\031\063\034" +
    "\053\036\040\044\061\001\001\000\002\001\001\000\004" +
    "\035\u0111\001\001\000\002\001\001\000\036\007\056\010" +
    "\044\011\043\012\u0113\013\042\014\057\015\065\017\066" +
    "\027\047\030\055\031\063\034\053\036\040\044\061\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\045\u0118\001\001\000\006\014" +
    "\u0119\015\065\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\045\u011e\001" +
    "\001\000\004\015\u011f\001\001\000\006\014\u0120\015\065" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\045\u0124\001\001\000\004\015\u0125\001\001" +
    "\000\006\014\u0126\015\065\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\032\u012c\001\001\000\016\020\u012e\021\131\022\116\024" +
    "\126\026\117\036\114\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\036\007\056\010\044\011" +
    "\043\012\u0130\013\042\014\057\015\065\017\066\027\047" +
    "\030\055\031\063\034\053\036\040\044\061\001\001\000" +
    "\004\033\u0131\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\032\u0135\001\001\000\002\001\001\000\002\001" +
    "\001\000\036\007\056\010\044\011\043\012\u0137\013\042" +
    "\014\057\015\065\017\066\027\047\030\055\031\063\034" +
    "\053\036\040\044\061\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\042\u013b\043\375\001" +
    "\001\000\002\001\001\000\002\001\001\000\036\007\056" +
    "\010\044\011\043\012\u013e\013\042\014\057\015\065\017" +
    "\066\027\047\030\055\031\063\034\053\036\040\044\061" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\045\u0144" +
    "\001\001\000\002\001\001\000\002\001\001\000\036\007" +
    "\056\010\044\011\043\012\u0147\013\042\014\057\015\065" +
    "\017\066\027\047\030\055\031\063\034\053\036\040\044" +
    "\061\001\001\000\002\001\001\000\036\007\056\010\044" +
    "\011\043\012\u0149\013\042\014\057\015\065\017\066\027" +
    "\047\030\055\031\063\034\053\036\040\044\061\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\003\u014d\004" +
    "\u014b\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



   ArrayList<String> errores = new ArrayList();
   Node Tree  = new Node();
   int cont=0;
   int contMain=0;


    public void report_error(String message,Object info){
                StringBuffer m=new StringBuffer("Error ");
                if(info instanceof Symbol){
                        Symbol s=((Symbol)info);
                      
                        if(s.left>=0){
                                m.append("en linea "+(s.right+1));
                        if(s.right>=0)
                                m.append(", columna "+(s.left+1));
                        }
                }
                m.append(": "+message);
                System.err.println(m);
                errores.add(m+"");

                

        }

        public void report_fatal_error(String message, Object info){
                report_error("fatal"+ message, info);
                //System.exit(1);
        }

        public void unrecovered_syntax_error(Symbol cur_token){
               // System.out.println(cur_token.toString());
                System.err.println("CRITICO: At line "+(cur_token.right)+", column "+cur_token.left);
                errores.add("CRITICO: At line "+(cur_token.right)+", column "+cur_token.left);
                //System.exit(1);
        }

        protected void report_expected_token_ids() {
	        List<Integer> ids = expected_token_ids();
	        LinkedList<String> list = new LinkedList<String>();
	        for (Integer expected : ids)
		        list.add(symbl_name_from_id(expected));
                System.err.println("Se esperaba cualquiera de estas: "+list);
                errores.add("Se esperaba cualquiera de estas: "+list);
	}
    



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {


    
    

  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= inicio EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Node start_val = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // inicio ::= dec_funcion dec_gen_fun 
            {
              Node RESULT =null;
		int dgleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dgright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Node dg = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int dgfleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dgfright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Node dgf = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    System.err.println("Entra a inicio");
    parser.cont++;
    Node node = new Node();
    node.setEtiqueta("INICIO");
    node.setID(parser.cont);
    node.addHijos((Node) dg);
    node.addHijos((Node) dgf);
    
    parser.Tree = node;
    RESULT = node; 
    
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // dec_gen_fun ::= dec_funcion dec_gen_fun 
            {
              Node RESULT =null;
		int dfleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dfright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Node df = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int dgfleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dgfright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Node dgf = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                System.err.println("Entra a dec_gen_fun");
                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("dec_gen_fun");
                node.setID(parser.cont);
                node.addHijos((Node) df);
                node.addHijos((Node) dgf);  
                
                RESULT = node;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("dec_gen_fun",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // dec_gen_fun ::= 
            {
              Node RESULT =null;
		
                parser.cont++;
                Node nodo = new Node();
				nodo.setEtiqueta("vacio");
				nodo.setID(parser.cont);
				
                RESULT = nodo;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("dec_gen_fun",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // dec_funcion ::= FUNCTION ID L_PAR parametros R_PAR COLON tipo L_KEY dec_general R_KEY 
            {
              Node RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int partsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int partsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Node parts = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int tipleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int tipright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Node tip = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int deGleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int deGright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Node deG = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
               System.err.println("Entra a dec_funcion");
                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("dec_funcion");
                node.setID(parser.cont);

                parser.cont++;
                Node identificador =new Node();
                identificador.setEtiqueta("ID");
                identificador.setID(parser.cont);
                identificador.setValor(id);
                node.addHijos(identificador);
                node.addHijos((Node) parts);
                node.addHijos((Node) tip);
                node.addHijos((Node) deG);

                
                RESULT = node;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("dec_funcion",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // dec_funcion ::= FUNCTION ID L_PAR parametros R_PAR COLON MAIN L_KEY dec_general R_KEY 
            {
              Node RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int partsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int partsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Node parts = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int deGleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int deGright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Node deG = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
               
                System.err.println("Entra a dec_funcion");
            
                parser.contMain++;
                if(parser.contMain>1){
                    parser.errores.add("Error! Se ha encontrado otra declaracion de main.");
                }
               
                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("dec_Funcion");
                node.setID(parser.cont);

                parser.cont++;
                Node identificador =new Node();
                identificador.setEtiqueta("ID");
                identificador.setID(parser.cont);
                identificador.setValor(id);
                parser.cont++;
                Node main =new Node();
                main.setEtiqueta("Main");
                main.setID(parser.cont);
                main.setValor("Main");

                
                node.addHijos(identificador);
                node.addHijos((Node) parts);
                node.addHijos(main);
                node.addHijos((Node) deG);
                RESULT = node;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("dec_funcion",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // parametros ::= VARIABLE ID COLON tipo nuevo_parametro 
            {
              Node RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int tipleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tipright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Node tip = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int nuPleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nuPright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Node nuP = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                System.err.println("Entra a parametros 1");

                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("parametros");
                node.setID(parser.cont);

                parser.cont++;
                Node identificador =new Node();
                identificador.setEtiqueta("ID");
                identificador.setID(parser.cont);
                identificador.setValor(id);
                node.addHijos(identificador);
                node.addHijos((Node) tip);
                node.addHijos((Node) nuP);
                
                RESULT = node;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // parametros ::= VARIABLE ID COLON tipo 
            {
              Node RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int tipleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tipright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Node tip = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                System.err.println("Entra a parametros 1");

                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("parametros");
                node.setID(parser.cont);

                parser.cont++;
                Node identificador =new Node();
                identificador.setEtiqueta("ID");
                identificador.setID(parser.cont);
                identificador.setValor(id);
                node.addHijos(identificador);
                node.addHijos((Node) tip);

                RESULT = node;
               
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // parametros ::= 
            {
              Node RESULT =null;
		
                System.err.println("Entra a vacio");

                parser.cont++;
                Node nodo = new Node();
				nodo.setEtiqueta("vacio");
				nodo.setID(parser.cont);
                RESULT = nodo;
               
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // nuevo_parametro ::= COMMA VARIABLE ID COLON tipo nuevo_parametro 
            {
              Node RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int tipleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tipright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Node tip = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int nuPleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nuPright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Node nuP = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                System.err.println("Entra a nuevo_parametro 1");

                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("nuevo_parametro");
                node.setID(parser.cont);

                parser.cont++;
                Node identificador =new Node();
                identificador.setEtiqueta("ID");
                identificador.setID(parser.cont);
                identificador.setValor(id);
                node.addHijos(identificador);
                node.addHijos((Node) tip);
                node.addHijos((Node) nuP);

                RESULT = node;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("nuevo_parametro",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // nuevo_parametro ::= COMMA VARIABLE ID COLON tipo 
            {
              Node RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int tipleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tipright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Node tip = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                System.err.println("Entra a nuevo_parametro 2");
                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("nuevo_parametro");
                node.setID(parser.cont);

                parser.cont++;
                Node identificador =new Node();
                identificador.setEtiqueta("ID");
                identificador.setID(parser.cont);
                identificador.setValor(id);
                node.addHijos(identificador);
                node.addHijos((Node) tip);
                RESULT = node;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("nuevo_parametro",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // func_lenguaje ::= func_input 
            {
              Node RESULT =null;
		int fuIleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fuIright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Node fuI = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    System.err.println("Entra a func_lenguaje 1");
                    parser.cont++;
                    Node node = new Node();
                    node.setEtiqueta("func_lenguaje");
                    node.setID(parser.cont);
                    node.addHijos((Node) fuI);
                    RESULT = node;
                  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("func_lenguaje",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // func_lenguaje ::= func_output 
            {
              Node RESULT =null;
		int fuOleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fuOright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Node fuO = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    System.err.println("Entra a func_lenguaje 2");
                    parser.cont++;
                    Node node = new Node();
                    node.setEtiqueta("func_lenguaje");
                    node.setID(parser.cont);
                    node.addHijos((Node) fuO);
                    RESULT = node;
                  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("func_lenguaje",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // func_input ::= INPUT L_PAR ID COMMA tipo R_PAR 
            {
              Node RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int tipleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tipright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Node tip = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                System.err.println("Entra a func_input");
                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("func_input");
                node.setID(parser.cont);
                parser.cont++;
                Node identificador =new Node();
                identificador.setEtiqueta("ID");
                identificador.setID(parser.cont);
                identificador.setValor(id);
                node.addHijos(identificador);
                node.addHijos((Node) tip);
                RESULT = node;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("func_input",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // func_output ::= OUTPUT L_PAR CONSTSTRING R_PAR 
            {
              Node RESULT =null;
		int csleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int csright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String cs = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                System.err.println("Entra a func_output 1");
                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("func_output");
                node.setID(parser.cont);
                parser.cont++;
                Node const_string =new Node();
                const_string.setEtiqueta("const_string");
                const_string.setID(parser.cont);
                String temp = cs.replaceAll("\"", "");

                const_string.setValor(temp);
                node.addHijos(const_string);
                RESULT = node;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("func_output",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // func_output ::= OUTPUT L_PAR CONSTCHAR R_PAR 
            {
              Node RESULT =null;
		int csleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int csright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String cs = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                System.err.println("Entra a func_output 1");
                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("func_output");
                node.setID(parser.cont);
                parser.cont++;
                Node const_string =new Node();
                const_string.setEtiqueta("const_char");
                const_string.setID(parser.cont);
                String temp = cs.replaceAll("\'", "");

                const_string.setValor(temp);
                node.addHijos(const_string);
                RESULT = node;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("func_output",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // func_output ::= OUTPUT L_PAR NUM R_PAR 
            {
              Node RESULT =null;
		int nmleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int nmright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String nm = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                System.err.println("Entra a func_output 2");
                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("func_output");
                node.setID(parser.cont);

                parser.cont++;
                Node num =new Node();
                num.setEtiqueta("Num");
                num.setID(parser.cont);
                num.setValor(nm);
                node.addHijos(num);
                RESULT = node;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("func_output",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // func_output ::= OUTPUT L_PAR ID R_PAR 
            {
              Node RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                System.err.println("Entra a func_output 3");
                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("func_output");
                node.setID(parser.cont);

                parser.cont++;
                Node identificador =new Node();
                identificador.setEtiqueta("ID");
                identificador.setID(parser.cont);
                identificador.setValor(id);
                node.addHijos(identificador);
                RESULT = node;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("func_output",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // dec_general ::= dec_variable dec_general 
            {
              Node RESULT =null;
		int dvaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dvaright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Node dva = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int dgleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dgright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Node dg = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                System.err.println("Entra a dec_general de vairable");
                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("dec_general");
                node.setID(parser.cont);
                node.addHijos((Node) dva);
                node.addHijos((Node) dg);
                RESULT = node;
               
              CUP$parser$result = parser.getSymbolFactory().newSymbol("dec_general",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // dec_general ::= dec_var dec_general 
            {
              Node RESULT =null;
		int dvleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dvright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Node dv = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int dgleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dgright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Node dg = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                System.err.println("Entra a dec_general de vairable2");
                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("dec_general");
                node.setID(parser.cont);
                node.addHijos((Node) dv);
                node.addHijos((Node) dg);
                RESULT = node;
               
              CUP$parser$result = parser.getSymbolFactory().newSymbol("dec_general",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // dec_general ::= dec_while dec_general 
            {
              Node RESULT =null;
		int dwleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dwright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Node dw = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int dgleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dgright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Node dg = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                System.err.println("Entra a dec_general de while");
                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("dec_general");
                node.setID(parser.cont);
                node.addHijos((Node) dw);
                node.addHijos((Node) dg);
                RESULT = node;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("dec_general",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // dec_general ::= dec_for dec_general 
            {
              Node RESULT =null;
		int dfleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dfright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Node df = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int dgleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dgright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Node dg = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                System.err.println("Entra a dec_general de for");
                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("dec_general");
                node.setID(parser.cont);
                node.addHijos((Node) df);
                node.addHijos((Node) dg);
                RESULT = node;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("dec_general",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // dec_general ::= dec_switch dec_general 
            {
              Node RESULT =null;
		int dsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Node ds = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int dgleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dgright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Node dg = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                System.err.println("Entra a dec_general de switch");
                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("dec_general");
                node.setID(parser.cont);
                node.addHijos((Node) ds);
                node.addHijos((Node) dg);
                RESULT = node;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("dec_general",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // dec_general ::= dec_if dec_general 
            {
              Node RESULT =null;
		int dileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int diright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Node di = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int dgleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dgright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Node dg = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
               System.err.println("Entra a dec_general de if");
                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("dec_general");
                node.setID(parser.cont);
                node.addHijos((Node) di);
                node.addHijos((Node) dg);
                RESULT = node;
               
              CUP$parser$result = parser.getSymbolFactory().newSymbol("dec_general",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // dec_general ::= dec_llamada_funcion SEMICOLON dec_general 
            {
              Node RESULT =null;
		int dlfleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int dlfright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Node dlf = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int dgleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dgright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Node dg = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                System.err.println("Entra a dec_general de llamada_funcion");
                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("dec_general");
                node.setID(parser.cont);
                node.addHijos((Node) dlf);
                node.addHijos((Node) dg);
                RESULT = node;
               
              CUP$parser$result = parser.getSymbolFactory().newSymbol("dec_general",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // dec_general ::= dec_var_inst dec_general 
            {
              Node RESULT =null;
		int dvileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dviright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Node dvi = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int dgleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dgright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Node dg = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                System.err.println("Entra a dec_general de dec_var_inst");
                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("dec_general");
                node.setID(parser.cont);
                node.addHijos((Node) dvi);
                node.addHijos((Node) dg);
                RESULT = node;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("dec_general",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // dec_general ::= func_lenguaje SEMICOLON dec_general 
            {
              Node RESULT =null;
		int flleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int flright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Node fl = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int dgleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dgright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Node dg = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                System.err.println("Entra a dec_general de func_lenguaje");
                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("dec_general");
                node.setID(parser.cont);
                node.addHijos((Node) fl);
                node.addHijos((Node) dg);
                RESULT = node;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("dec_general",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // dec_general ::= dec_return SEMICOLON 
            {
              Node RESULT =null;
		int drleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int drright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Node dr = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                System.err.println("Entra a dec_general de dec_return");
                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("dec_general");
                node.setID(parser.cont);
                node.addHijos((Node) dr);
                RESULT = node;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("dec_general",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // dec_general ::= error R_KEY 
            {
              Node RESULT =null;
		
                System.err.println("Entra a dec_general nos vamos para el error ");
                Node node = new Node();
                RESULT = node;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("dec_general",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // dec_general ::= 
            {
              Node RESULT =null;
		
                System.err.println("Entra a dec_general a vacio");
                parser.cont++;
                Node nodo = new Node();
				nodo.setEtiqueta("vacio");
				nodo.setID(parser.cont);
                RESULT = nodo;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("dec_general",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // dec_variable ::= VARIABLE ID COLON tipo dec_var 
            {
              Node RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int tipleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tipright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Node tip = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int dvleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dvright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Node dv = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("dec_variable");
                node.setID(parser.cont);

                parser.cont++;
                Node identificador =new Node();
                identificador.setEtiqueta("ID");
                identificador.setID(parser.cont);
                identificador.setValor(id);
                node.addHijos(identificador);
                node.addHijos((Node) tip);
                node.addHijos((Node) dv);
                RESULT = node;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("dec_variable",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // dec_variable ::= VARIABLE ID L_BRACKET NUM R_BRACKET COLON tipo dec_inst dec_var 
            {
              Node RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int nmleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int nmright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String nm = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int tipleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tipright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Node tip = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int dileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int diright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Node di = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int dvleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dvright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Node dv = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("dec_variable");
                node.setID(parser.cont);

                parser.cont++;
                Node identificador =new Node();
                identificador.setEtiqueta("ID");
                identificador.setID(parser.cont);
                identificador.setValor(id);
                parser.cont++;
                Node num =new Node();
                num.setEtiqueta("tamaño");
                num.setID(parser.cont);
                num.setValor(nm);
                node.addHijos(identificador);
                node.addHijos(num);
                node.addHijos((Node) tip);
                node.addHijos((Node) di);
                node.addHijos((Node) dv);
                RESULT = node;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("dec_variable",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // dec_variable ::= VARIABLE ID L_BRACKET NUM R_BRACKET L_BRACKET NUM R_BRACKET COLON tipo dec_inst dec_var 
            {
              Node RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-10)).value;
		int nm1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int nm1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		String nm1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int nm2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int nm2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String nm2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int tipleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tipright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Node tip = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int dileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int diright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Node di = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int dvleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dvright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Node dv = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("dec_variable");
                node.setID(parser.cont);

                parser.cont++;
                Node identificador =new Node();
                identificador.setEtiqueta("ID");
                identificador.setID(parser.cont);
                identificador.setValor(id);
                parser.cont++;
                Node num1 =new Node();
                num1.setEtiqueta("tamaño1");
                num1.setID(parser.cont);
                num1.setValor(nm1);
                parser.cont++;
                Node num2 =new Node();
                num2.setEtiqueta("tamaño2");
                num2.setID(parser.cont);
                num2.setValor(nm2);
                node.addHijos(identificador);
                node.addHijos(num1);
                node.addHijos(num2);
                node.addHijos((Node) tip);
                node.addHijos((Node) di);
                node.addHijos((Node) dv);
                RESULT = node;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("dec_variable",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // dec_var ::= dec_inst SEMICOLON 
            {
              Node RESULT =null;
		int dileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int diright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Node di = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("dec_var");
                node.setID(parser.cont);
                node.addHijos((Node) di);
                RESULT = node;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("dec_var",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // dec_var ::= COMMA ID COLON tipo dec_inst dec_var 
            {
              Node RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int tipleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tipright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Node tip = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int dileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int diright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Node di = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int dvleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dvright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Node dv = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("dec_var");
                node.setID(parser.cont);

                parser.cont++;
                Node identificador =new Node();
                identificador.setEtiqueta("ID");
                identificador.setID(parser.cont);
                identificador.setValor(id);
                node.addHijos(identificador);
                node.addHijos((Node) tip);
                node.addHijos((Node) di);
                node.addHijos((Node) dv);
                RESULT = node;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("dec_var",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // dec_var ::= COMMA ID L_BRACKET NUM R_BRACKET COLON tipo dec_inst dec_var 
            {
              Node RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int nmleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int nmright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String nm = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int tipleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tipright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Node tip = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int dileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int diright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Node di = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int dvleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dvright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Node dv = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("dec_var");
                node.setID(parser.cont);

                parser.cont++;
                Node identificador =new Node();
                identificador.setEtiqueta("ID");
                identificador.setID(parser.cont);
                identificador.setValor(id);
                parser.cont++;
                Node num =new Node();
                num.setEtiqueta("tamaño");
                num.setID(parser.cont);
                num.setValor(nm);
                node.addHijos(identificador);
                node.addHijos(num);
                node.addHijos((Node) tip);
                node.addHijos((Node) di);
                node.addHijos((Node) dv);
                RESULT = node;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("dec_var",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // dec_var ::= COMMA ID L_BRACKET NUM R_BRACKET L_BRACKET NUM R_BRACKET COLON tipo dec_inst dec_var 
            {
              Node RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-10)).value;
		int nm1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int nm1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		String nm1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int nm2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int nm2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String nm2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int tipleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tipright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Node tip = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int dileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int diright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Node di = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int dvleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dvright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Node dv = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("dec_var");
                node.setID(parser.cont);

                parser.cont++;
                Node identificador =new Node();
                identificador.setEtiqueta("ID");
                identificador.setID(parser.cont);
                identificador.setValor(id);
                parser.cont++;
                Node num1 =new Node();
                num1.setEtiqueta("tamaño1");
                num1.setID(parser.cont);
                num1.setValor(nm1);
                parser.cont++;
                Node num2 =new Node();
                num2.setEtiqueta("tamaño2");
                num2.setID(parser.cont);
                num2.setValor(nm2);
                node.addHijos(identificador);
                node.addHijos(num1);
                node.addHijos(num2);
                node.addHijos((Node) tip);
                node.addHijos((Node) di);
                node.addHijos((Node) dv);
                RESULT = node;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("dec_var",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // dec_inst ::= OPASIGN ID 
            {
              Node RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("dec_inst");
                node.setID(parser.cont);

                parser.cont++;
                Node identificador =new Node();
                identificador.setEtiqueta("ID");
                identificador.setID(parser.cont);
                identificador.setValor(id);
                node.addHijos(identificador);
                RESULT = node;
             
              CUP$parser$result = parser.getSymbolFactory().newSymbol("dec_inst",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // dec_inst ::= OPASIGN ID DOT AT L_PAR NUM R_PAR 
            {
              Node RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int nmleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int nmright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String nm = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("dec_inst");
                node.setID(parser.cont);

                parser.cont++;
                Node identificador =new Node();
                identificador.setEtiqueta("ID");
                identificador.setID(parser.cont);
                identificador.setValor(id);
                parser.cont++;
                Node num =new Node();
                num.setEtiqueta("num");
                num.setID(parser.cont);
                num.setValor(nm);
                node.addHijos(identificador);
                node.addHijos(num);
                RESULT = node;
             
              CUP$parser$result = parser.getSymbolFactory().newSymbol("dec_inst",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // dec_inst ::= OPASIGN NUM 
            {
              Node RESULT =null;
		int nmleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nmright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String nm = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("dec_inst");
                node.setID(parser.cont);

                parser.cont++;
                Node num =new Node();
                num.setEtiqueta("num");
                num.setID(parser.cont);
                num.setValor(nm);
                node.addHijos(num);
                RESULT = node;
             
              CUP$parser$result = parser.getSymbolFactory().newSymbol("dec_inst",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // dec_inst ::= OPASIGN FLOAT_VAL 
            {
              Node RESULT =null;
		int nmleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nmright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String nm = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("dec_inst");
                node.setID(parser.cont);

                parser.cont++;
                Node num =new Node();
                num.setEtiqueta("float");
                num.setID(parser.cont);
                num.setValor(nm);
                node.addHijos(num);
                RESULT = node;
             
              CUP$parser$result = parser.getSymbolFactory().newSymbol("dec_inst",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // dec_inst ::= OPASIGN CONSTSTRING 
            {
              Node RESULT =null;
		int csleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int csright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String cs = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("dec_inst");
                node.setID(parser.cont);

                parser.cont++;
                Node const_string =new Node();
                const_string.setEtiqueta("const string");
                const_string.setID(parser.cont);
                const_string.setValor(cs);
                node.addHijos(const_string);
                RESULT = node;
             
              CUP$parser$result = parser.getSymbolFactory().newSymbol("dec_inst",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // dec_inst ::= OPASIGN CONSTCHAR 
            {
              Node RESULT =null;
		int ccleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int ccright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String cc = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("dec_inst");
                node.setID(parser.cont);

                parser.cont++;
                Node const_char =new Node();
                const_char.setEtiqueta("const char");
                const_char.setID(parser.cont);
                const_char.setValor(cc);
                node.addHijos(const_char);
                RESULT = node;
             
              CUP$parser$result = parser.getSymbolFactory().newSymbol("dec_inst",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // dec_inst ::= OPASIGN TRUE 
            {
              Node RESULT =null;
		int truleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int truright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String tru = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("dec_inst");
                node.setID(parser.cont);

                parser.cont++;
                Node bool_true =new Node();
                bool_true.setEtiqueta("true");
                bool_true.setID(parser.cont);
                bool_true.setValor(tru);
                node.addHijos(bool_true);
                RESULT = node;
             
              CUP$parser$result = parser.getSymbolFactory().newSymbol("dec_inst",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // dec_inst ::= OPASIGN FALSE 
            {
              Node RESULT =null;
		int falsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int falsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String fals = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("dec_inst");
                node.setID(parser.cont);

                parser.cont++;
                Node bool_false =new Node();
                bool_false.setEtiqueta("false");
                bool_false.setID(parser.cont);
                bool_false.setValor(fals);
                node.addHijos(bool_false);
                RESULT = node;
             
              CUP$parser$result = parser.getSymbolFactory().newSymbol("dec_inst",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // dec_inst ::= OPASIGN dec_llamada_funcion 
            {
              Node RESULT =null;
		int dlfleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dlfright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Node dlf = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("dec_inst");
                node.setID(parser.cont);
                node.addHijos((Node) dlf);
                RESULT = node;
             
              CUP$parser$result = parser.getSymbolFactory().newSymbol("dec_inst",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // dec_inst ::= OPASIGN arreglo 
            {
              Node RESULT =null;
		int arrleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int arrright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Node arr = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("dec_inst");
                node.setID(parser.cont);
                node.addHijos((Node) arr);
                RESULT = node;
             
              CUP$parser$result = parser.getSymbolFactory().newSymbol("dec_inst",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // dec_inst ::= OPASIGN arreglo2d 
            {
              Node RESULT =null;
		int arrleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int arrright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Node arr = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("dec_inst");
                node.setID(parser.cont);
                node.addHijos((Node) arr);
                RESULT = node;
             
              CUP$parser$result = parser.getSymbolFactory().newSymbol("dec_inst",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // dec_inst ::= 
            {
              Node RESULT =null;
		
                parser.cont++;
                Node node = new Node();
				node.setEtiqueta("vacio");
				node.setID(parser.cont);
                RESULT = node;
             
              CUP$parser$result = parser.getSymbolFactory().newSymbol("dec_inst",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // arreglo2d ::= L_KEY arreglo arr2_cont R_KEY 
            {
              Node RESULT =null;
		int arrleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int arrright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Node arr = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int arcleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int arcright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Node arc = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                parser.cont++;
                Node node=new Node();
                node.setEtiqueta("arreglo2d");
                node.setID(parser.cont);
                node.addHijos((Node) arr);
                node.addHijos((Node) arc);
                RESULT=node;
             
              CUP$parser$result = parser.getSymbolFactory().newSymbol("arreglo2d",37, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // arr2_cont ::= COMMA arreglo arr2_cont 
            {
              Node RESULT =null;
		int arrleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int arrright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Node arr = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int arcleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int arcright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Node arc = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                parser.cont++;
                Node node=new Node();
                node.setEtiqueta("arr2_cont");
                node.setID(parser.cont);
                node.addHijos((Node) arr);
                node.addHijos((Node) arc);
                RESULT=node;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("arr2_cont",38, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // arr2_cont ::= 
            {
              Node RESULT =null;
		
                parser.cont++;
                Node nodo = new Node();
				nodo.setEtiqueta("vacio");
				nodo.setID(parser.cont);
                RESULT = nodo;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("arr2_cont",38, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // arreglo ::= L_KEY valor arr_cont R_KEY 
            {
              Node RESULT =null;
		int valeft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int varight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Node va = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int arcleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int arcright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Node arc = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                parser.cont++;
                Node node=new Node();
                node.setEtiqueta("arreglo");
                node.setID(parser.cont);
                node.addHijos((Node) va);
                node.addHijos((Node) arc);
                RESULT=node;
             
              CUP$parser$result = parser.getSymbolFactory().newSymbol("arreglo",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // arr_cont ::= COMMA valor arr_cont 
            {
              Node RESULT =null;
		int valeft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int varight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Node va = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int arcleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int arcright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Node arc = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("arr_cont");
                node.setID(parser.cont);
                node.addHijos((Node) va);
                node.addHijos((Node) arc);
                RESULT = node;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("arr_cont",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // arr_cont ::= 
            {
              Node RESULT =null;
		
                parser.cont++;
                Node nodo = new Node();
				nodo.setEtiqueta("vacio");
				nodo.setID(parser.cont);
                RESULT = nodo;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("arr_cont",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // dec_var_inst ::= ID OPASIGN valor SEMICOLON 
            {
              Node RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int valeft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int varight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Node va = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("dec_var_inst");
                node.setID(parser.cont);

                parser.cont++;
                Node identificador =new Node();
                identificador.setEtiqueta("ID");
                identificador.setID(parser.cont);
                identificador.setValor(id);
                node.addHijos(identificador);
                node.addHijos((Node) va);
                RESULT = node;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("dec_var_inst",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // dec_var_inst ::= ID DOT AT L_PAR NUM R_PAR OPASIGN valor SEMICOLON 
            {
              Node RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int nmleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int nmright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String nm = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int valeft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int varight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Node va = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("dec_var_inst");
                node.setID(parser.cont);

                parser.cont++;
                Node identificador =new Node();
                identificador.setEtiqueta("ID");
                identificador.setID(parser.cont);
                identificador.setValor(id);
                parser.cont++;
                Node num =new Node();
                num.setEtiqueta("num");
                num.setID(parser.cont);
                num.setValor(nm);
                node.addHijos(identificador);
                node.addHijos(num);
                node.addHijos((Node) va);
                RESULT = node;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("dec_var_inst",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // dec_var_inst ::= ID OPASIGNADD valor SEMICOLON 
            {
              Node RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int valeft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int varight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Node va = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("dec_var_inst");
                node.setID(parser.cont);

                parser.cont++;
                Node identificador =new Node();
                identificador.setEtiqueta("ID");
                identificador.setID(parser.cont);
                identificador.setValor(id);
                node.addHijos(identificador);
                node.addHijos((Node) va);
                RESULT = node;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("dec_var_inst",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // dec_var_inst ::= ID OPASIGNMULT NUM SEMICOLON 
            {
              Node RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int nmleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int nmright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String nm = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("dec_var_inst");
                node.setID(parser.cont);

                parser.cont++;
                Node identificador =new Node();
                identificador.setEtiqueta("ID");
                identificador.setID(parser.cont);
                identificador.setValor(id);
                parser.cont++;
                Node num =new Node();
                num.setEtiqueta("num");
                num.setID(parser.cont);
                num.setValor(nm);
                node.addHijos(identificador);
                node.addHijos(num);
                RESULT = node;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("dec_var_inst",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // dec_var_inst ::= ID OPINC SEMICOLON 
            {
              Node RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("dec_var_inst");
                node.setID(parser.cont);

                parser.cont++;
                Node identificador =new Node();
                identificador.setEtiqueta("ID");
                identificador.setID(parser.cont);
                identificador.setValor(id);
                node.addHijos(identificador);
                RESULT = node;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("dec_var_inst",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // dec_var_inst ::= ID DOT AT L_PAR NUM COMMA NUM R_PAR OPASIGN valor SEMICOLON 
            {
              Node RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-10)).value;
		int nm1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int nm1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String nm1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int nm2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int nm2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String nm2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int valeft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int varight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Node va = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("dec_var_inst");
                node.setID(parser.cont);

                parser.cont++;
                Node identificador =new Node();
                identificador.setEtiqueta("ID");
                identificador.setID(parser.cont);
                identificador.setValor(id);
                parser.cont++;
                Node num1 =new Node();
                num1.setEtiqueta("num");
                num1.setID(parser.cont);
                num1.setValor(nm1);
                parser.cont++;
                Node num2 =new Node();
                num2.setEtiqueta("num");
                num2.setID(parser.cont);
                num2.setValor(nm2);
                node.addHijos(identificador);
                node.addHijos(num1);
                node.addHijos(num2);
                node.addHijos((Node) va);
                RESULT = node;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("dec_var_inst",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // valor ::= CONSTSTRING 
            {
              Node RESULT =null;
		int csleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int csright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String cs = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("valor");
                node.setID(parser.cont);
                
                parser.cont++;
                Node const_string = new Node();
                const_string.setEtiqueta("const string");
                const_string.setID(parser.cont);
                if(cs.equals("")){
                    const_string.setValor("empty");
                }else{
                    const_string.setValor(cs);
                }    
                node.setValor(const_string.getValor().replaceAll("\"",""));

                RESULT = node;
           
              CUP$parser$result = parser.getSymbolFactory().newSymbol("valor",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // valor ::= CONSTCHAR 
            {
              Node RESULT =null;
		int ccleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int ccright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String cc = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("valor");
                node.setID(parser.cont);
                
                parser.cont++;
                Node const_char = new Node();
                const_char.setEtiqueta("const char");
                const_char.setID(parser.cont);
                const_char.setValor(cc);

                node.setValor(const_char.getValor());
                RESULT = node;
           
              CUP$parser$result = parser.getSymbolFactory().newSymbol("valor",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // valor ::= TRUE 
            {
              Node RESULT =null;
		int truleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int truright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String tru = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("valor");
                node.setID(parser.cont);
                
                parser.cont++;
                Node bool_true = new Node();
                bool_true.setEtiqueta("true");
                bool_true.setID(parser.cont);
                bool_true.setValor(tru);

                node.setValor(bool_true.getValor());
                RESULT = node;
           
              CUP$parser$result = parser.getSymbolFactory().newSymbol("valor",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // valor ::= FALSE 
            {
              Node RESULT =null;
		int falsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int falsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String fals = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("valor");
                node.setID(parser.cont);
                
                parser.cont++;
                Node bool_false = new Node();
                bool_false.setEtiqueta("false");
                bool_false.setID(parser.cont);
                bool_false.setValor(fals);

                node.setValor(bool_false.getValor());
                RESULT = node;
           
              CUP$parser$result = parser.getSymbolFactory().newSymbol("valor",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // valor ::= NUM 
            {
              Node RESULT =null;
		int numleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int numright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String num = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("valor");
                node.setID(parser.cont);
                
                parser.cont++;
                Node num_int = new Node();
                num_int.setEtiqueta("INT");
                num_int.setID(parser.cont);
                num_int.setValor(num);

                node.setValor(num_int.getValor());
                RESULT = node;
           
              CUP$parser$result = parser.getSymbolFactory().newSymbol("valor",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // valor ::= FLOAT_VAL 
            {
              Node RESULT =null;
		int fltleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fltright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String flt = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("valor");
                node.setID(parser.cont);
                
                parser.cont++;
                Node num_flt = new Node();
                num_flt.setEtiqueta("FLOAT");
                num_flt.setID(parser.cont);
                num_flt.setValor(flt);

                node.setValor(num_flt.getValor());
                RESULT = node;
           
              CUP$parser$result = parser.getSymbolFactory().newSymbol("valor",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // valor ::= math_op 
            {
              Node RESULT =null;
		int mopleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int mopright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Node mop = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("valor");
                node.setID(parser.cont);
                node.addHijos((Node) mop);
                RESULT = node;
           
              CUP$parser$result = parser.getSymbolFactory().newSymbol("valor",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // valor ::= dec_llamada_funcion 
            {
              Node RESULT =null;
		int dlfleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dlfright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Node dlf = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("valor");
                node.setID(parser.cont);
                node.addHijos((Node) dlf);
                RESULT = node;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("valor",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // valor ::= ID 
            {
              Node RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("valor");
                node.setID(parser.cont);
                
                parser.cont++;
                Node identificador = new Node();
                identificador.setEtiqueta("ID");
                identificador.setID(parser.cont);
                identificador.setValor(id);

                node.setValor(identificador.getValor());
                RESULT = node;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("valor",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // valor ::= ID DOT AT L_PAR NUM R_PAR 
            {
              Node RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int nmleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int nmright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String nm = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("valor");
                node.setID(parser.cont);
                
                parser.cont++;
                Node identificador = new Node();
                identificador.setEtiqueta("ID");
                identificador.setID(parser.cont);
                identificador.setValor(id);
                node.addHijos(identificador);
                node.setValor("");

                RESULT = node;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("valor",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // math_op ::= s_op 
            {
              Node RESULT =null;
		int soleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int soright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Node so = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("math_op");
                node.setID(parser.cont);
                node.addHijos((Node) so);
                RESULT = node;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("math_op",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // math_op ::= m_op 
            {
              Node RESULT =null;
		int moleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int moright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Node mo = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("math_op");
                node.setID(parser.cont);
                node.addHijos((Node) mo);
                RESULT = node;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("math_op",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // s_op ::= val sum_op 
            {
              Node RESULT =null;
		int vlleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int vlright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Node vl = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int sumleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sumright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Node sum = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("s_op");
                node.setID(parser.cont);
                node.addHijos((Node) vl);
                node.addHijos((Node) sum);
                RESULT = node;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("s_op",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // sum_op ::= OPSUM val sum_op 
            {
              Node RESULT =null;
		int vlleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int vlright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Node vl = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int sumleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sumright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Node sum = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("sum_op");
                node.setID(parser.cont);
                node.addHijos((Node) vl);
                node.addHijos((Node) sum);
                RESULT = node;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sum_op",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // sum_op ::= OPSUM val mult_op 
            {
              Node RESULT =null;
		int vlleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int vlright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Node vl = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int multleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int multright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Node mult = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("sum_op");
                node.setID(parser.cont);
                node.addHijos((Node) vl);
                node.addHijos((Node) mult);
                RESULT = node;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sum_op",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // sum_op ::= OPSUM val 
            {
              Node RESULT =null;
		int vlleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vlright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Node vl = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("sum_op");
                node.setID(parser.cont);
                node.addHijos((Node) vl);
                RESULT = node;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sum_op",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // m_op ::= val mult_op 
            {
              Node RESULT =null;
		int vlleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int vlright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Node vl = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int multleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int multright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Node mult = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("m_op");
                node.setID(parser.cont);
                node.addHijos((Node) vl);
                node.addHijos((Node) mult);
                RESULT = node;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("m_op",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // mult_op ::= OPMULT val mult_op 
            {
              Node RESULT =null;
		int vlleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int vlright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Node vl = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int multleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int multright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Node mult = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("mult_op");
                node.setID(parser.cont);
                node.addHijos((Node) vl);
                node.addHijos((Node) mult);
                RESULT = node;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("mult_op",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // mult_op ::= OPMULT val sum_op 
            {
              Node RESULT =null;
		int vlleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int vlright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Node vl = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int sumleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sumright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Node sum = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("mult_op");
                node.setID(parser.cont);
                node.addHijos((Node) vl);
                node.addHijos((Node) sum);
                RESULT = node;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("mult_op",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // mult_op ::= OPMULT val 
            {
              Node RESULT =null;
		int vlleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vlright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Node vl = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("mult_op");
                node.setID(parser.cont);
                node.addHijos((Node) vl);
                RESULT = node;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("mult_op",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // val ::= ID 
            {
              Node RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("val");
                node.setID(parser.cont);
                
                parser.cont++;
                Node identificador = new Node();
                identificador.setEtiqueta("ID");
                identificador.setID(parser.cont);
                identificador.setValor(id);

                node.setValor(identificador.getValor());
                RESULT = node;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("val",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // val ::= NUM 
            {
              Node RESULT =null;
		int nmleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nmright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String nm = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("val");
                node.setID(parser.cont);
                
                parser.cont++;
                Node num = new Node();
                num.setEtiqueta("num");
                num.setID(parser.cont);
                num.setValor(nm);

                node.setValor(num.getValor());
                RESULT = node;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("val",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // val ::= dec_llamada_funcion 
            {
              Node RESULT =null;
		int dlfleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dlfright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Node dlf = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("val");
                node.setID(parser.cont);
                node.addHijos((Node) dlf);
                RESULT = node;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("val",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // val ::= L_PAR math_op R_PAR 
            {
              Node RESULT =null;
		int moleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int moright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Node mo = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("val");
                node.setID(parser.cont);
                node.addHijos((Node) mo);
                RESULT = node;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("val",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // dec_while ::= WHILE L_PAR condicion R_PAR L_KEY dec_general R_KEY 
            {
              Node RESULT =null;
		int condleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int condright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Node cond = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int dgleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dgright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Node dg = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("dec_while");
                node.setID(parser.cont);
                node.addHijos((Node) cond);
                node.addHijos((Node) dg);
                RESULT = node;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("dec_while",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // dec_for ::= FOR L_PAR ID COMMA NUM UPTO NUM COMMA STEP L_PAR NUM R_PAR R_PAR L_KEY dec_general R_KEY 
            {
              Node RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-13)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-13)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-13)).value;
		int nm1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).left;
		int nm1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).right;
		String nm1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-11)).value;
		int nm2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int nm2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		String nm2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int nm3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int nm3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String nm3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int dgleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dgright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Node dg = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                System.err.println("Entra a dec_for 1");
                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("dec_for");
                node.setID(parser.cont);

                parser.cont++;
                Node identificador = new Node();
                identificador.setEtiqueta("ID");
                identificador.setID(parser.cont);
                identificador.setValor(id);
                parser.cont++;
                Node num1 =new Node();
                num1.setEtiqueta("num");
                num1.setID(parser.cont);
                num1.setValor(nm1);
                parser.cont++;
                Node num2 =new Node();
                num2.setEtiqueta("num");
                num2.setID(parser.cont);
                num2.setValor(nm2);
                parser.cont++;
                Node num3 =new Node();
                num3.setEtiqueta("num");
                num3.setID(parser.cont);
                num3.setValor(nm3);     
                node.addHijos(identificador);
                node.addHijos(num1);
                node.addHijos(num2);
                node.addHijos(num3);
                node.addHijos((Node) dg);
                RESULT = node;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("dec_for",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-15)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // dec_for ::= FOR L_PAR ID COMMA NUM DOWNTO NUM COMMA STEP L_PAR NUM R_PAR R_PAR L_KEY dec_general R_KEY 
            {
              Node RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-13)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-13)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-13)).value;
		int nm1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).left;
		int nm1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).right;
		String nm1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-11)).value;
		int nm2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int nm2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		String nm2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int nm3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int nm3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String nm3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int dgleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dgright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Node dg = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                System.err.println("Entra a dec_for 2");
                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("dec_for");
                node.setID(parser.cont);

                parser.cont++;
                Node identificador = new Node();
                identificador.setEtiqueta("ID");
                identificador.setID(parser.cont);
                identificador.setValor(id);
                parser.cont++;
                Node num1 =new Node();
                num1.setEtiqueta("num");
                num1.setID(parser.cont);
                num1.setValor(nm1);
                parser.cont++;
                Node num2 =new Node();
                num2.setEtiqueta("num");
                num2.setID(parser.cont);
                num2.setValor(nm2);
                parser.cont++;
                Node num3 =new Node();
                num3.setEtiqueta("num");
                num3.setID(parser.cont);
                num3.setValor(nm3);     
                node.addHijos(identificador);
                node.addHijos(num1);
                node.addHijos(num2);
                node.addHijos(num3);
                node.addHijos((Node) dg);
                RESULT = node;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("dec_for",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-15)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // dec_for ::= FOR L_PAR VARIABLE ID COLON INTEGER COMMA NUM UPTO NUM COMMA STEP L_PAR NUM R_PAR R_PAR L_KEY dec_general R_KEY 
            {
              Node RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-15)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-15)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-15)).value;
		int nm1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).left;
		int nm1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).right;
		String nm1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-11)).value;
		int nm2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int nm2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		String nm2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int nm3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int nm3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String nm3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int dgleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dgright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Node dg = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                System.err.println("Entra a dec_for 3");
                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("dec_for");
                node.setID(parser.cont);

                parser.cont++;
                Node identificador = new Node();
                identificador.setEtiqueta("ID");
                identificador.setID(parser.cont);
                identificador.setValor(id);
                parser.cont++;
                Node num1 =new Node();
                num1.setEtiqueta("num");
                num1.setID(parser.cont);
                num1.setValor(nm1);
                parser.cont++;
                Node num2 =new Node();
                num2.setEtiqueta("num");
                num2.setID(parser.cont);
                num2.setValor(nm2);
                parser.cont++;
                Node num3 =new Node();
                num3.setEtiqueta("num");
                num3.setID(parser.cont);
                num3.setValor(nm3);     
                node.addHijos(identificador);
                node.addHijos(num1);
                node.addHijos(num2);
                node.addHijos(num3);
                node.addHijos((Node) dg);
                RESULT = node;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("dec_for",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-18)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // dec_for ::= FOR L_PAR VARIABLE ID COLON INTEGER COMMA NUM DOWNTO NUM COMMA STEP L_PAR NUM R_PAR R_PAR L_KEY dec_general R_KEY 
            {
              Node RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-15)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-15)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-15)).value;
		int nm1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).left;
		int nm1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).right;
		String nm1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-11)).value;
		int nm2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int nm2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		String nm2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int nm3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int nm3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String nm3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int dgleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dgright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Node dg = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                System.err.println("Entra a dec_for 4");
                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("dec_for");
                node.setID(parser.cont);

                parser.cont++;
                Node identificador = new Node();
                identificador.setEtiqueta("ID");
                identificador.setID(parser.cont);
                identificador.setValor(id);
                parser.cont++;
                Node num1 =new Node();
                num1.setEtiqueta("num");
                num1.setID(parser.cont);
                num1.setValor(nm1);
                parser.cont++;
                Node num2 =new Node();
                num2.setEtiqueta("num");
                num2.setID(parser.cont);
                num2.setValor(nm2);
                parser.cont++;
                Node num3 =new Node();
                num3.setEtiqueta("num");
                num3.setID(parser.cont);
                num3.setValor(nm3);     
                node.addHijos(identificador);
                node.addHijos(num1);
                node.addHijos(num2);
                node.addHijos(num3);
                node.addHijos((Node) dg);
                RESULT = node;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("dec_for",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-18)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // dec_switch ::= SWITCH L_PAR ID R_PAR L_KEY list_op R_KEY 
            {
              Node RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int loleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int loright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Node lo = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                System.err.println("Entra a dec_switch");
                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("dec_switch");
                node.setID(parser.cont);

                parser.cont++;
                Node identificador = new Node();
                identificador.setEtiqueta("ID");
                identificador.setID(parser.cont);
                identificador.setValor(id);
                node.addHijos(identificador);
                node.addHijos((Node) lo);
                RESULT = node;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("dec_switch",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // list_op ::= OPTION valor COLON dec_general new_op 
            {
              Node RESULT =null;
		int vlleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int vlright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Node vl = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int dgleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dgright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Node dg = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int nwoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nworight = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Node nwo = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                System.err.println("Entra a list_op");
                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("list_op");
                node.setID(parser.cont);
                node.addHijos((Node) vl);
                node.addHijos((Node) dg);
                node.addHijos((Node) nwo);
                RESULT = node;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("list_op",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // new_op ::= BREAK SEMICOLON list_op 
            {
              Node RESULT =null;
		int loleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int loright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Node lo = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                System.err.println("Entra a new_op 1");
                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("option");
                node.setID(parser.cont);
                node.addHijos((Node) lo);
                RESULT = node;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("new_op",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // new_op ::= BREAK SEMICOLON DEFAULT COLON dec_general 
            {
              Node RESULT =null;
		int dgleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dgright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Node dg = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                System.err.println("Entra a new_op 2");
                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("default");
                node.setID(parser.cont);
                node.addHijos((Node) dg);
                RESULT = node;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("new_op",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // new_op ::= BREAK SEMICOLON 
            {
              Node RESULT =null;
		
                System.err.println("Entra a new_op 3");
                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("new_op");
                node.setID(parser.cont);
                RESULT = node;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("new_op",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // dec_if ::= IF L_PAR condicion R_PAR L_KEY dec_general R_KEY dec_else 
            {
              Node RESULT =null;
		int condleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int condright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Node cond = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int dgleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int dgright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Node dg = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int delleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int delright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Node del = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                System.err.println("Entra a dec_if");
                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("dec_if");
                node.setID(parser.cont);
                node.addHijos((Node) cond);
                node.addHijos((Node) dg);
                node.addHijos((Node) del);
                RESULT = node;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("dec_if",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // dec_else ::= ELIF L_PAR condicion R_PAR L_KEY dec_general R_KEY dec_else 
            {
              Node RESULT =null;
		int condleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int condright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Node cond = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int dgleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int dgright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Node dg = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int delleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int delright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Node del = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                System.err.println("Entra a dec_else elif");
                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("dec_elif");
                node.setID(parser.cont);
                node.addHijos((Node) cond);
                node.addHijos((Node) dg);
                node.addHijos((Node) del);
                RESULT = node;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("dec_else",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // dec_else ::= ELSE L_KEY dec_general R_KEY 
            {
              Node RESULT =null;
		int dgleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dgright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Node dg = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                System.err.println("Entra a dec_else else");
                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("dec_else");
                node.setID(parser.cont);
                node.addHijos((Node) dg);
                RESULT = node;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("dec_else",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // dec_else ::= 
            {
              Node RESULT =null;
		
                parser.cont++;
                Node nodo = new Node();
				nodo.setEtiqueta("vacio");
				nodo.setID(parser.cont);
                RESULT = nodo;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("dec_else",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // dec_llamada_funcion ::= ID L_PAR llamada_parametros R_PAR 
            {
              Node RESULT =null;
		int llpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int llpright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Node llp = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                System.err.println("Entra a dec_llamada_funcion");
                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("dec_llamada_funcion");
                node.setID(parser.cont);
                node.addHijos((Node) llp);
                RESULT = node;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("dec_llamada_funcion",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // llamada_parametros ::= valor lista_valores 
            {
              Node RESULT =null;
		int vlleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int vlright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Node vl = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int lvleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lvright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Node lv = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                System.err.println("Entra a llamada_parametros 1");
                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("llamada_parametros");
                node.setID(parser.cont);
                node.addHijos((Node) vl);
                node.addHijos((Node) lv);
                RESULT = node;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("llamada_parametros",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // llamada_parametros ::= valor 
            {
              Node RESULT =null;
		int vlleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vlright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Node vl = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                System.err.println("Entra a llamada_parametros 2");
                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("llamada_parametros");
                node.setID(parser.cont);
                node.addHijos((Node) vl);
                RESULT = node;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("llamada_parametros",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // llamada_parametros ::= 
            {
              Node RESULT =null;
		
                System.err.println("Entra a vacio");
                parser.cont++;
                Node nodo = new Node();
				nodo.setEtiqueta("vacio");
				nodo.setID(parser.cont);
                RESULT = nodo;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("llamada_parametros",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // lista_valores ::= COMMA valor lista_valores 
            {
              Node RESULT =null;
		int vlleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int vlright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Node vl = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int lvleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lvright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Node lv = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                System.err.println("Entra a lista_valores 1");
                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("lista_valores");
                node.setID(parser.cont);
                node.addHijos((Node) vl);
                node.addHijos((Node) lv);
                RESULT = node;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_valores",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // lista_valores ::= COMMA valor 
            {
              Node RESULT =null;
		int vlleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vlright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Node vl = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                System.err.println("Entra a lista_valores 2");
                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("lista_valores");
                node.setID(parser.cont);
                node.addHijos((Node) vl);
                RESULT = node;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_valores",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // condicion ::= valor_cond OPREL valor_cond 
            {
              Node RESULT =null;
		int vc1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int vc1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Node vc1 = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int oprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int oprright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String opr = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int vc2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vc2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Node vc2 = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("condicion");
                node.setValor(opr);
                node.setID(parser.cont);
                node.addHijos((Node) vc1);
                node.addHijos((Node) vc2);
                RESULT = node;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("condicion",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // condicion ::= valor_cond OPREL valor_cond OPLOG condicion 
            {
              Node RESULT =null;
		int vc1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int vc1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Node vc1 = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int oprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int oprright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String opr = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int vc2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int vc2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Node vc2 = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int oplgleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int oplgright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String oplg = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int condleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int condright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Node cond = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("condicion");
                node.setID(parser.cont);
                node.setValor(opr +"," +oplg);
                node.addHijos((Node) vc1);
                node.addHijos((Node) vc2);
                node.addHijos((Node) cond);
                RESULT = node;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("condicion",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // condicion ::= valor_cond 
            {
              Node RESULT =null;
		int vcleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vcright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Node vc = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("condicion");
                node.setValor("valor condicional");
                node.setID(parser.cont);
                node.addHijos((Node) vc);
                RESULT = node;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("condicion",32, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // condicion ::= NULL 
            {
              Node RESULT =null;
		int nllleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nllright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String nll = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("condicion");
                node.setID(parser.cont);

                parser.cont++;
                Node nulo=new Node();
                nulo.setEtiqueta("Null");
                nulo.setID(parser.cont);
                nulo.setValor(nll);

                node.setValor(nulo.getValor());

                RESULT = node;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("condicion",32, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // condicion ::= valor_cond OPLOG condicion 
            {
              Node RESULT =null;
		int vcleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int vcright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Node vc = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int oplgleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int oplgright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String oplg = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int condleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int condright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Node cond = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("condicion");
                node.setValor(oplg);
                node.setID(parser.cont);
                node.addHijos((Node) vc);
                node.addHijos((Node) cond);
                RESULT = node;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("condicion",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // valor_cond ::= NUM 
            {
              Node RESULT =null;
		int nmleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nmright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String nm = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                System.err.println("Entra a valor_cond 1");
                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("valor_cond");
                node.setID(parser.cont);

                parser.cont++;
                Node num =new Node();
                num.setEtiqueta("num");
                num.setID(parser.cont);
                num.setValor(nm);

                node.setValor(num.getValor());
                RESULT = node;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("valor_cond",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // valor_cond ::= ID 
            {
              Node RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                System.err.println("Entra a valor_cond 2");
                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("valor_cond");
                node.setID(parser.cont);

                parser.cont++;
                Node identificador =new Node();
                identificador.setEtiqueta("ID");
                identificador.setID(parser.cont);
                identificador.setValor(id);

                node.setValor(identificador.getValor());
                RESULT = node;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("valor_cond",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // valor_cond ::= TRUE 
            {
              Node RESULT =null;
		int truleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int truright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String tru = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                System.err.println("Entra a valor_cond 3");
                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("valor_cond");
                node.setID(parser.cont);
                
                parser.cont++;
                Node bool_true = new Node();
                bool_true.setEtiqueta("true");
                bool_true.setID(parser.cont);
                bool_true.setValor(tru);

                node.setValor(bool_true.getValor());
                RESULT = node;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("valor_cond",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // valor_cond ::= FALSE 
            {
              Node RESULT =null;
		int falsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int falsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String fals = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                System.err.println("Entra a valor_cond 4");
                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("valor");
                node.setID(parser.cont);
                
                parser.cont++;
                Node bool_false = new Node();
                bool_false.setEtiqueta("false");
                bool_false.setID(parser.cont);
                bool_false.setValor(fals);

                node.setValor(bool_false.getValor());
                RESULT = node;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("valor_cond",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // dec_return ::= RETURN valor 
            {
              Node RESULT =null;
		int vlleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vlright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Node vl = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                System.err.println("Entra a dec_return 1");
                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("dec_return");
                node.setID(parser.cont);
                node.addHijos(vl);
                RESULT = node;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("dec_return",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // dec_return ::= RETURN 
            {
              Node RESULT =null;
		
                System.err.println("Entra a dec_return 2");  
                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("dec_return");
                node.setID(parser.cont);
                RESULT = node;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("dec_return",34, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // tipo ::= BOOLEAN 
            {
              Node RESULT =null;
		
                System.err.println("Entra a tipo 1");
                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("tipo");
                node.setID(parser.cont);
                node.setValor("boolean");
                RESULT = node;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo",35, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // tipo ::= CHARACTER 
            {
              Node RESULT =null;
		
                System.err.println("Entra a tipo 2");
                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("tipo");
                node.setID(parser.cont);
                node.setValor("char");
                RESULT = node;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo",35, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // tipo ::= INTEGER 
            {
              Node RESULT =null;
		
                System.err.println("Entra a tipo 3");
                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("tipo");
                node.setID(parser.cont);
                node.setValor("Int");
                RESULT = node;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo",35, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // tipo ::= VOID 
            {
              Node RESULT =null;
		
                System.err.println("Entra a tipo 4");
                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("tipo");
                node.setID(parser.cont);
                node.setValor("Void");
                RESULT = node;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo",35, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // tipo ::= STRING 
            {
              Node RESULT =null;
		  
                System.err.println("Entra a tipo 5");
                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("tipo");
                node.setID(parser.cont);
                node.setValor("String");
                RESULT = node;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo",35, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // tipo ::= FLOAT 
            {
              Node RESULT =null;
		  
                System.err.println("Entra a tipo 5");
                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("tipo");
                node.setID(parser.cont);
                node.setValor("FLOAT");
                RESULT = node;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo",35, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
