
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package nachts;

import java_cup.runtime.*;
import java.util.ArrayList;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return Sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\153\000\002\002\004\000\002\002\004\000\002\046" +
    "\003\000\002\003\004\000\002\003\003\000\002\004\013" +
    "\000\002\005\010\000\002\005\007\000\002\005\003\000" +
    "\002\006\010\000\002\006\007\000\002\007\003\000\002" +
    "\007\003\000\002\010\010\000\002\011\006\000\002\011" +
    "\006\000\002\011\006\000\002\012\004\000\002\012\004" +
    "\000\002\012\004\000\002\012\004\000\002\012\004\000" +
    "\002\012\004\000\002\012\005\000\002\012\004\000\002" +
    "\012\005\000\002\012\003\000\002\012\005\000\002\012" +
    "\004\000\002\012\004\000\002\013\007\000\002\013\013" +
    "\000\002\014\004\000\002\014\010\000\002\014\013\000" +
    "\002\015\004\000\002\015\011\000\002\015\004\000\002" +
    "\015\004\000\002\015\004\000\002\015\004\000\002\015" +
    "\004\000\002\015\004\000\002\015\007\000\002\015\003" +
    "\000\002\016\005\000\002\016\003\000\002\017\006\000" +
    "\002\017\013\000\002\020\003\000\002\020\003\000\002" +
    "\020\003\000\002\020\003\000\002\020\003\000\002\020" +
    "\003\000\002\020\003\000\002\021\003\000\002\021\003" +
    "\000\002\022\004\000\002\023\005\000\002\023\005\000" +
    "\002\023\004\000\002\024\004\000\002\025\005\000\002" +
    "\025\005\000\002\025\004\000\002\026\003\000\002\026" +
    "\003\000\002\026\003\000\002\026\005\000\002\027\011" +
    "\000\002\030\021\000\002\030\022\000\002\030\025\000" +
    "\002\030\025\000\002\031\011\000\002\032\007\000\002" +
    "\033\005\000\002\033\007\000\002\033\004\000\002\034" +
    "\011\000\002\035\005\000\002\035\007\000\002\035\003" +
    "\000\002\036\005\000\002\037\005\000\002\037\004\000" +
    "\002\037\003\000\002\040\005\000\002\040\004\000\002" +
    "\042\005\000\002\042\007\000\002\042\003\000\002\042" +
    "\003\000\002\042\005\000\002\043\003\000\002\043\003" +
    "\000\002\043\003\000\002\043\003\000\002\044\004\000" +
    "\002\044\004\000\002\044\005\000\002\045\003\000\002" +
    "\045\003\000\002\045\003\000\002\045\003\000\002\045" +
    "\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u011e\000\004\004\005\001\002\000\006\004\005\066" +
    "\075\001\002\000\004\040\010\001\002\000\004\002\007" +
    "\001\002\000\004\002\001\001\002\000\004\057\011\001" +
    "\002\000\006\011\014\060\012\001\002\000\004\063\ufff9" +
    "\001\002\000\004\063\036\001\002\000\004\040\015\001" +
    "\002\000\004\063\016\001\002\000\014\012\020\015\017" +
    "\016\022\017\023\025\024\001\002\000\014\050\uff99\053" +
    "\uff99\060\uff99\061\uff99\066\uff99\001\002\000\014\050\uff97" +
    "\053\uff97\060\uff97\061\uff97\066\uff97\001\002\000\006\060" +
    "\026\061\025\001\002\000\014\050\uff9a\053\uff9a\060\uff9a" +
    "\061\uff9a\066\uff9a\001\002\000\014\050\uff9b\053\uff9b\060" +
    "\uff9b\061\uff9b\066\uff9b\001\002\000\014\050\uff98\053\uff98" +
    "\060\uff98\061\uff98\066\uff98\001\002\000\004\011\031\001" +
    "\002\000\004\063\ufffa\001\002\000\004\060\030\001\002" +
    "\000\004\063\ufffb\001\002\000\004\040\032\001\002\000" +
    "\004\063\033\001\002\000\014\012\020\015\017\016\022" +
    "\017\023\025\024\001\002\000\006\060\ufff7\061\025\001" +
    "\002\000\004\060\ufff8\001\002\000\014\012\020\015\017" +
    "\016\022\017\023\025\024\001\002\000\004\053\040\001" +
    "\002\000\036\003\067\011\051\020\053\022\046\023\072" +
    "\024\047\030\066\032\042\033\073\034\052\040\055\050" +
    "\074\061\062\066\075\001\002\000\004\062\u011b\001\002" +
    "\000\004\057\u0116\001\002\000\036\003\067\011\051\020" +
    "\053\022\046\023\072\024\047\030\066\032\042\033\073" +
    "\034\052\040\055\050\074\061\062\066\075\001\002\000" +
    "\004\062\ufff5\001\002\000\004\062\ufff6\001\002\000\004" +
    "\057\u010f\001\002\000\022\005\106\013\120\014\113\026" +
    "\114\027\115\040\116\057\121\062\u010d\001\002\000\036" +
    "\003\067\011\051\020\053\022\046\023\072\024\047\030" +
    "\066\032\042\033\073\034\052\040\055\050\074\061\062" +
    "\066\075\001\002\000\004\040\377\001\002\000\004\057" +
    "\356\001\002\000\004\057\326\001\002\000\036\003\067" +
    "\011\051\020\053\022\046\023\072\024\047\030\066\032" +
    "\042\033\073\034\052\040\055\050\074\061\062\066\075" +
    "\001\002\000\010\050\312\057\127\065\313\001\002\000" +
    "\012\050\uffd5\061\uffd5\062\uffd5\066\uffd5\001\002\000\036" +
    "\003\067\011\051\020\053\022\046\023\072\024\047\030" +
    "\066\032\042\033\073\034\052\040\055\050\074\061\062" +
    "\066\075\001\002\000\004\062\307\001\002\000\036\003" +
    "\067\011\051\020\053\022\046\023\072\024\047\030\066" +
    "\032\042\033\073\034\052\040\055\050\074\061\062\066" +
    "\075\001\002\000\004\040\272\001\002\000\010\030\uffe7" +
    "\054\uffe7\056\uffe7\001\002\000\004\054\271\001\002\000" +
    "\036\003\067\011\051\020\053\022\046\023\072\024\047" +
    "\030\066\032\042\033\073\034\052\040\055\050\074\061" +
    "\062\066\075\001\002\000\004\062\266\001\002\000\006" +
    "\054\265\066\075\001\002\000\004\062\263\001\002\000" +
    "\036\003\067\011\051\020\053\022\046\023\072\024\047" +
    "\030\066\032\042\033\073\034\052\040\055\050\074\061" +
    "\062\066\075\001\002\000\004\057\175\001\002\000\004" +
    "\057\166\001\002\000\020\005\077\013\100\014\102\026" +
    "\101\027\103\040\076\053\104\001\002\000\022\002\uffff" +
    "\030\uffff\050\uffff\054\uffff\056\uffff\061\uffff\062\uffff\066" +
    "\uffff\001\002\000\016\050\uffde\057\127\061\uffde\062\uffde" +
    "\065\161\066\uffde\001\002\000\012\050\uffdc\061\uffdc\062" +
    "\uffdc\066\uffdc\001\002\000\012\050\uffdb\061\uffdb\062\uffdb" +
    "\066\uffdb\001\002\000\012\050\uffd9\061\uffd9\062\uffd9\066" +
    "\uffd9\001\002\000\012\050\uffda\061\uffda\062\uffda\066\uffda" +
    "\001\002\000\012\050\uffd8\061\uffd8\062\uffd8\066\uffd8\001" +
    "\002\000\020\005\106\013\120\014\113\026\114\027\115" +
    "\040\116\057\121\001\002\000\012\050\uffd7\061\uffd7\062" +
    "\uffd7\066\uffd7\001\002\000\020\045\uffbe\046\uffbe\060\uffbe" +
    "\061\uffbe\062\uffbe\063\uffbe\066\uffbe\001\002\000\020\045" +
    "\uffbd\046\uffbd\060\uffcb\061\uffcb\062\uffcb\063\uffcb\066\uffcb" +
    "\001\002\000\014\060\uffc9\061\uffc9\062\uffc9\063\uffc9\066" +
    "\uffc9\001\002\000\006\045\152\046\151\001\002\000\006" +
    "\061\141\066\075\001\002\000\014\060\uffcf\061\uffcf\062" +
    "\uffcf\063\uffcf\066\uffcf\001\002\000\014\060\uffce\061\uffce" +
    "\062\uffce\063\uffce\066\uffce\001\002\000\014\060\uffcd\061" +
    "\uffcd\062\uffcd\063\uffcd\066\uffcd\001\002\000\022\045\uffbf" +
    "\046\uffbf\057\127\060\uffca\061\uffca\062\uffca\063\uffca\066" +
    "\uffca\001\002\000\014\060\uffc8\061\uffc8\062\uffc8\063\uffc8" +
    "\066\uffc8\001\002\000\014\060\uffd0\061\uffd0\062\uffd0\063" +
    "\uffd0\066\uffd0\001\002\000\010\005\106\040\123\057\121" +
    "\001\002\000\014\060\uffcc\061\uffcc\062\uffcc\063\uffcc\066" +
    "\uffcc\001\002\000\022\045\uffbf\046\uffbf\057\127\060\uffbf" +
    "\061\uffbf\062\uffbf\063\uffbf\066\uffbf\001\002\000\004\060" +
    "\126\001\002\000\020\045\uffbd\046\uffbd\060\uffbd\061\uffbd" +
    "\062\uffbd\063\uffbd\066\uffbd\001\002\000\020\045\uffbc\046" +
    "\uffbc\060\uffbc\061\uffbc\062\uffbc\063\uffbc\066\uffbc\001\002" +
    "\000\022\005\106\013\120\014\113\026\114\027\115\040" +
    "\116\057\121\060\130\001\002\000\030\030\uffaa\045\uffaa" +
    "\046\uffaa\050\uffaa\054\uffaa\056\uffaa\060\uffaa\061\uffaa\062" +
    "\uffaa\063\uffaa\066\uffaa\001\002\000\006\060\133\061\134" +
    "\001\002\000\030\030\uffad\045\uffad\046\uffad\050\uffad\054" +
    "\uffad\056\uffad\060\uffad\061\uffad\062\uffad\063\uffad\066\uffad" +
    "\001\002\000\030\030\uffab\045\uffab\046\uffab\050\uffab\054" +
    "\uffab\056\uffab\060\uffab\061\uffab\062\uffab\063\uffab\066\uffab" +
    "\001\002\000\020\005\106\013\120\014\113\026\114\027" +
    "\115\040\116\057\121\001\002\000\004\060\136\001\002" +
    "\000\030\030\uffac\045\uffac\046\uffac\050\uffac\054\uffac\056" +
    "\uffac\060\uffac\061\uffac\062\uffac\063\uffac\066\uffac\001\002" +
    "\000\006\060\uffa8\061\134\001\002\000\004\060\uffa9\001" +
    "\002\000\020\005\106\013\120\014\113\026\114\027\115" +
    "\040\116\057\121\001\002\000\004\054\uffd3\001\002\000" +
    "\004\054\144\001\002\000\012\050\uffd6\061\uffd6\062\uffd6" +
    "\066\uffd6\001\002\000\006\061\141\066\075\001\002\000" +
    "\004\054\uffd4\001\002\000\014\060\uffc7\061\uffc7\062\uffc7" +
    "\063\uffc7\066\uffc7\001\002\000\014\060\uffc3\061\uffc3\062" +
    "\uffc3\063\uffc3\066\uffc3\001\002\000\010\005\106\040\123" +
    "\057\121\001\002\000\010\005\106\040\123\057\121\001" +
    "\002\000\020\045\152\046\151\060\uffc0\061\uffc0\062\uffc0" +
    "\063\uffc0\066\uffc0\001\002\000\014\060\uffc2\061\uffc2\062" +
    "\uffc2\063\uffc2\066\uffc2\001\002\000\014\060\uffc1\061\uffc1" +
    "\062\uffc1\063\uffc1\066\uffc1\001\002\000\020\045\152\046" +
    "\151\060\uffc4\061\uffc4\062\uffc4\063\uffc4\066\uffc4\001\002" +
    "\000\014\060\uffc6\061\uffc6\062\uffc6\063\uffc6\066\uffc6\001" +
    "\002\000\014\060\uffc5\061\uffc5\062\uffc5\063\uffc5\066\uffc5" +
    "\001\002\000\004\064\162\001\002\000\004\057\163\001" +
    "\002\000\004\005\164\001\002\000\004\060\165\001\002" +
    "\000\012\050\uffdd\061\uffdd\062\uffdd\066\uffdd\001\002\000" +
    "\010\005\170\013\171\040\167\001\002\000\004\060\174" +
    "\001\002\000\004\060\173\001\002\000\004\060\172\001" +
    "\002\000\004\062\ufff3\001\002\000\004\062\ufff2\001\002" +
    "\000\004\062\ufff1\001\002\000\006\011\177\040\176\001" +
    "\002\000\004\061\233\001\002\000\004\040\200\001\002" +
    "\000\004\063\201\001\002\000\004\015\202\001\002\000" +
    "\004\061\203\001\002\000\004\005\204\001\002\000\006" +
    "\006\205\007\206\001\002\000\004\005\221\001\002\000" +
    "\004\005\207\001\002\000\004\061\210\001\002\000\004" +
    "\010\211\001\002\000\004\057\212\001\002\000\004\005" +
    "\213\001\002\000\004\060\214\001\002\000\004\060\215" +
    "\001\002\000\004\055\216\001\002\000\036\003\067\011" +
    "\051\020\053\022\046\023\072\024\047\030\066\032\042" +
    "\033\073\034\052\040\055\050\074\061\062\066\075\001" +
    "\002\000\004\056\220\001\002\000\036\003\uffb7\011\uffb7" +
    "\020\uffb7\022\uffb7\023\uffb7\024\uffb7\030\uffb7\032\uffb7\033" +
    "\uffb7\034\uffb7\040\uffb7\050\uffb7\061\uffb7\066\uffb7\001\002" +
    "\000\004\061\222\001\002\000\004\010\223\001\002\000" +
    "\004\057\224\001\002\000\004\005\225\001\002\000\004" +
    "\060\226\001\002\000\004\060\227\001\002\000\004\053" +
    "\230\001\002\000\036\003\067\011\051\020\053\022\046" +
    "\023\072\024\047\030\066\032\042\033\073\034\052\040" +
    "\055\050\074\061\062\066\075\001\002\000\004\054\232" +
    "\001\002\000\036\003\uffb8\011\uffb8\020\uffb8\022\uffb8\023" +
    "\uffb8\024\uffb8\030\uffb8\032\uffb8\033\uffb8\034\uffb8\040\uffb8" +
    "\050\uffb8\061\uffb8\066\uffb8\001\002\000\004\005\234\001" +
    "\002\000\006\006\235\007\236\001\002\000\004\061\251" +
    "\001\002\000\004\005\237\001\002\000\004\061\240\001" +
    "\002\000\004\010\241\001\002\000\004\057\242\001\002" +
    "\000\004\005\243\001\002\000\004\060\244\001\002\000" +
    "\004\060\245\001\002\000\004\053\246\001\002\000\036" +
    "\003\067\011\051\020\053\022\046\023\072\024\047\030" +
    "\066\032\042\033\073\034\052\040\055\050\074\061\062" +
    "\066\075\001\002\000\004\054\250\001\002\000\036\003" +
    "\uffb9\011\uffb9\020\uffb9\022\uffb9\023\uffb9\024\uffb9\030\uffb9" +
    "\032\uffb9\033\uffb9\034\uffb9\040\uffb9\050\uffb9\061\uffb9\066" +
    "\uffb9\001\002\000\004\010\252\001\002\000\004\057\253" +
    "\001\002\000\004\005\254\001\002\000\004\060\255\001" +
    "\002\000\004\060\256\001\002\000\004\053\257\001\002" +
    "\000\036\003\067\011\051\020\053\022\046\023\072\024" +
    "\047\030\066\032\042\033\073\034\052\040\055\050\074" +
    "\061\062\066\075\001\002\000\004\054\261\001\002\000" +
    "\036\003\uffba\011\uffba\020\uffba\022\uffba\023\uffba\024\uffba" +
    "\030\uffba\032\uffba\033\uffba\034\uffba\040\uffba\050\uffba\061" +
    "\uffba\066\uffba\001\002\000\010\030\uffe9\054\uffe9\056\uffe9" +
    "\001\002\000\036\003\uffe1\011\uffe1\020\uffe1\022\uffe1\023" +
    "\uffe1\024\uffe1\030\uffe1\032\uffe1\033\uffe1\034\uffe1\040\uffe1" +
    "\050\uffe1\061\uffe1\066\uffe1\001\002\000\010\030\uffe5\054" +
    "\uffe5\056\uffe5\001\002\000\010\030\uffe4\054\uffe4\056\uffe4" +
    "\001\002\000\036\003\067\011\051\020\053\022\046\023" +
    "\072\024\047\030\066\032\042\033\073\034\052\040\055" +
    "\050\074\061\062\066\075\001\002\000\010\030\uffe6\054" +
    "\uffe6\056\uffe6\001\002\000\010\030\uffec\054\uffec\056\uffec" +
    "\001\002\000\006\004\ufffc\066\ufffc\001\002\000\006\055" +
    "\273\063\274\001\002\000\004\005\300\001\002\000\014" +
    "\012\020\015\017\016\022\017\023\025\024\001\002\000" +
    "\006\050\074\066\075\001\002\000\010\050\074\061\062" +
    "\066\075\001\002\000\036\003\uffe0\011\uffe0\020\uffe0\022" +
    "\uffe0\023\uffe0\024\uffe0\030\uffe0\032\uffe0\033\uffe0\034\uffe0" +
    "\040\uffe0\050\uffe0\061\uffe0\066\uffe0\001\002\000\004\056" +
    "\301\001\002\000\004\063\302\001\002\000\014\012\020" +
    "\015\017\016\022\017\023\025\024\001\002\000\006\050" +
    "\074\066\075\001\002\000\010\050\074\061\062\066\075" +
    "\001\002\000\036\003\uffdf\011\uffdf\020\uffdf\022\uffdf\023" +
    "\uffdf\024\uffdf\030\uffdf\032\uffdf\033\uffdf\034\uffdf\040\uffdf" +
    "\050\uffdf\061\uffdf\066\uffdf\001\002\000\010\030\uffef\054" +
    "\uffef\056\uffef\001\002\000\036\003\067\011\051\020\053" +
    "\022\046\023\072\024\047\030\066\032\042\033\073\034" +
    "\052\040\055\050\074\061\062\066\075\001\002\000\010" +
    "\030\uffe8\054\uffe8\056\uffe8\001\002\000\010\030\uffed\054" +
    "\uffed\056\uffed\001\002\000\020\005\106\013\120\014\113" +
    "\026\114\027\115\040\116\057\121\001\002\000\004\064" +
    "\314\001\002\000\004\057\315\001\002\000\004\005\316" +
    "\001\002\000\004\060\317\001\002\000\004\050\320\001" +
    "\002\000\020\005\106\013\120\014\113\026\114\027\115" +
    "\040\116\057\121\001\002\000\004\062\322\001\002\000" +
    "\036\003\uffd1\011\uffd1\020\uffd1\022\uffd1\023\uffd1\024\uffd1" +
    "\030\uffd1\032\uffd1\033\uffd1\034\uffd1\040\uffd1\050\uffd1\061" +
    "\uffd1\066\uffd1\001\002\000\004\062\324\001\002\000\036" +
    "\003\uffd2\011\uffd2\020\uffd2\022\uffd2\023\uffd2\024\uffd2\030" +
    "\uffd2\032\uffd2\033\uffd2\034\uffd2\040\uffd2\050\uffd2\061\uffd2" +
    "\066\uffd2\001\002\000\010\030\uffeb\054\uffeb\056\uffeb\001" +
    "\002\000\014\005\327\026\331\027\332\031\334\040\330" +
    "\001\002\000\010\041\uffa2\043\uffa2\060\uffa2\001\002\000" +
    "\010\041\uffa1\043\uffa1\060\uffa1\001\002\000\010\041\uffa0" +
    "\043\uffa0\060\uffa0\001\002\000\010\041\uff9f\043\uff9f\060" +
    "\uff9f\001\002\000\004\060\344\001\002\000\004\060\uffa4" +
    "\001\002\000\010\041\336\043\337\060\uffa5\001\002\000" +
    "\012\005\327\026\331\027\332\040\330\001\002\000\014" +
    "\005\327\026\331\027\332\031\334\040\330\001\002\000" +
    "\004\060\uffa3\001\002\000\006\043\342\060\uffa7\001\002" +
    "\000\014\005\327\026\331\027\332\031\334\040\330\001" +
    "\002\000\004\060\uffa6\001\002\000\004\053\345\001\002" +
    "\000\036\003\067\011\051\020\053\022\046\023\072\024" +
    "\047\030\066\032\042\033\073\034\052\040\055\050\074" +
    "\061\062\066\075\001\002\000\004\054\350\001\002\000" +
    "\036\003\uffb1\011\uffb1\020\uffb1\022\uffb1\023\uffb1\024\uffb1" +
    "\030\uffb1\032\uffb1\033\uffb1\034\uffb1\040\uffb1\050\uffb1\061" +
    "\uffb1\066\uffb1\001\002\000\040\003\uffae\011\uffae\020\uffae" +
    "\021\351\022\uffae\023\uffae\024\uffae\030\uffae\032\uffae\033" +
    "\uffae\034\uffae\040\uffae\050\uffae\061\uffae\066\uffae\001\002" +
    "\000\006\020\053\053\353\001\002\000\036\003\uffb0\011" +
    "\uffb0\020\uffb0\022\uffb0\023\uffb0\024\uffb0\030\uffb0\032\uffb0" +
    "\033\uffb0\034\uffb0\040\uffb0\050\uffb0\061\uffb0\066\uffb0\001" +
    "\002\000\036\003\067\011\051\020\053\022\046\023\072" +
    "\024\047\030\066\032\042\033\073\034\052\040\055\050" +
    "\074\061\062\066\075\001\002\000\004\054\355\001\002" +
    "\000\036\003\uffaf\011\uffaf\020\uffaf\022\uffaf\023\uffaf\024" +
    "\uffaf\030\uffaf\032\uffaf\033\uffaf\034\uffaf\040\uffaf\050\uffaf" +
    "\061\uffaf\066\uffaf\001\002\000\004\040\357\001\002\000" +
    "\004\060\360\001\002\000\004\055\361\001\002\000\004" +
    "\036\362\001\002\000\020\005\106\013\120\014\113\026" +
    "\114\027\115\040\116\057\121\001\002\000\004\056\364" +
    "\001\002\000\036\003\uffb6\011\uffb6\020\uffb6\022\uffb6\023" +
    "\uffb6\024\uffb6\030\uffb6\032\uffb6\033\uffb6\034\uffb6\040\uffb6" +
    "\050\uffb6\061\uffb6\066\uffb6\001\002\000\004\063\366\001" +
    "\002\000\036\003\067\011\051\020\053\022\046\023\072" +
    "\024\047\030\066\032\042\033\073\034\052\040\055\050" +
    "\074\061\062\066\075\001\002\000\004\030\371\001\002" +
    "\000\004\056\uffb5\001\002\000\004\062\372\001\002\000" +
    "\010\036\362\037\373\056\uffb2\001\002\000\004\063\375" +
    "\001\002\000\004\056\uffb4\001\002\000\036\003\067\011" +
    "\051\020\053\022\046\023\072\024\047\030\066\032\042" +
    "\033\073\034\052\040\055\050\074\061\062\066\075\001" +
    "\002\000\004\056\uffb3\001\002\000\006\055\u0100\063\u0101" +
    "\001\002\000\004\005\u0104\001\002\000\014\012\020\015" +
    "\017\016\022\017\023\025\024\001\002\000\010\050\074" +
    "\061\062\066\075\001\002\000\036\003\uffe3\011\uffe3\020" +
    "\uffe3\022\uffe3\023\uffe3\024\uffe3\030\uffe3\032\uffe3\033\uffe3" +
    "\034\uffe3\040\uffe3\050\uffe3\061\uffe3\066\uffe3\001\002\000" +
    "\004\056\u0105\001\002\000\004\063\u0106\001\002\000\014" +
    "\012\020\015\017\016\022\017\023\025\024\001\002\000" +
    "\006\050\074\066\075\001\002\000\010\050\074\061\062" +
    "\066\075\001\002\000\036\003\uffe2\011\uffe2\020\uffe2\022" +
    "\uffe2\023\uffe2\024\uffe2\030\uffe2\032\uffe2\033\uffe2\034\uffe2" +
    "\040\uffe2\050\uffe2\061\uffe2\066\uffe2\001\002\000\010\030" +
    "\uffee\054\uffee\056\uffee\001\002\000\016\030\uff9e\045\uffbd" +
    "\046\uffbd\054\uff9e\056\uff9e\062\uffcb\001\002\000\004\062" +
    "\u010e\001\002\000\010\030\uff9d\054\uff9d\056\uff9d\001\002" +
    "\000\010\030\uff9c\054\uff9c\056\uff9c\001\002\000\014\005" +
    "\327\026\331\027\332\031\334\040\330\001\002\000\004" +
    "\060\u0111\001\002\000\004\053\u0112\001\002\000\036\003" +
    "\067\011\051\020\053\022\046\023\072\024\047\030\066" +
    "\032\042\033\073\034\052\040\055\050\074\061\062\066" +
    "\075\001\002\000\004\054\u0114\001\002\000\036\003\uffbb" +
    "\011\uffbb\020\uffbb\022\uffbb\023\uffbb\024\uffbb\030\uffbb\032" +
    "\uffbb\033\uffbb\034\uffbb\040\uffbb\050\uffbb\061\uffbb\066\uffbb" +
    "\001\002\000\010\030\ufff0\054\ufff0\056\ufff0\001\002\000" +
    "\004\040\u0117\001\002\000\004\061\u0118\001\002\000\014" +
    "\012\020\015\017\016\022\017\023\025\024\001\002\000" +
    "\004\060\u011a\001\002\000\004\062\ufff4\001\002\000\036" +
    "\003\067\011\051\020\053\022\046\023\072\024\047\030" +
    "\066\032\042\033\073\034\052\040\055\050\074\061\062" +
    "\066\075\001\002\000\010\030\uffea\054\uffea\056\uffea\001" +
    "\002\000\006\004\005\066\075\001\002\000\004\002\ufffd" +
    "\001\002\000\004\002\000\001\002\000\004\002\ufffe\001" +
    "\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u011e\000\006\002\005\004\003\001\001\000\010\003" +
    "\u011e\004\u011c\046\u011d\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\005" +
    "\012\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\045\020\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\006\026\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\045" +
    "\033\001\001\000\004\006\034\001\001\000\002\001\001" +
    "\000\004\045\036\001\001\000\002\001\001\000\040\007" +
    "\057\010\044\011\043\012\063\013\042\014\060\015\067" +
    "\017\070\027\047\030\056\031\064\034\053\036\040\044" +
    "\062\046\055\001\001\000\002\001\001\000\002\001\001" +
    "\000\040\007\057\010\044\011\043\012\u0114\013\042\014" +
    "\060\015\067\017\070\027\047\030\056\031\064\034\053" +
    "\036\040\044\062\046\055\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\016\020\u010b\021\121" +
    "\022\107\024\116\026\110\036\u010a\001\001\000\040\007" +
    "\057\010\044\011\043\012\u0109\013\042\014\060\015\067" +
    "\017\070\027\047\030\056\031\064\034\053\036\040\044" +
    "\062\046\055\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\040\007\057\010\044\011\043\012" +
    "\324\013\042\014\060\015\067\017\070\027\047\030\056" +
    "\031\064\034\053\036\040\044\062\046\055\001\001\000" +
    "\002\001\001\000\002\001\001\000\040\007\057\010\044" +
    "\011\043\012\310\013\042\014\060\015\067\017\070\027" +
    "\047\030\056\031\064\034\053\036\040\044\062\046\055" +
    "\001\001\000\002\001\001\000\040\007\057\010\044\011" +
    "\043\012\305\013\042\014\060\015\067\017\070\027\047" +
    "\030\056\031\064\034\053\036\040\044\062\046\055\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\040\007\057\010\044\011\043\012\267\013\042\014" +
    "\060\015\067\017\070\027\047\030\056\031\064\034\053" +
    "\036\040\044\062\046\055\001\001\000\002\001\001\000" +
    "\004\046\263\001\001\000\002\001\001\000\040\007\057" +
    "\010\044\011\043\012\261\013\042\014\060\015\067\017" +
    "\070\027\047\030\056\031\064\034\053\036\040\044\062" +
    "\046\055\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\036\104\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\016\020\111\021\121" +
    "\022\107\024\116\026\110\036\106\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\023\146\025\147\001\001\000\006\016\142\046" +
    "\141\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\014\021\123\022\107\024\116\026\110\036\124" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\020\020\130" +
    "\021\121\022\107\024\116\026\110\036\106\037\131\001" +
    "\001\000\002\001\001\000\004\040\134\001\001\000\002" +
    "\001\001\000\002\001\001\000\016\020\136\021\121\022" +
    "\107\024\116\026\110\036\106\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\040\137\001\001\000\002\001" +
    "\001\000\016\020\144\021\121\022\107\024\116\026\110" +
    "\036\106\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\016\145\046\141\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\026" +
    "\155\036\124\001\001\000\006\026\152\036\124\001\001" +
    "\000\006\023\154\025\153\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\023\156\025\157\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\040\007\057\010\044\011\043" +
    "\012\216\013\042\014\060\015\067\017\070\027\047\030" +
    "\056\031\064\034\053\036\040\044\062\046\055\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\040\007" +
    "\057\010\044\011\043\012\230\013\042\014\060\015\067" +
    "\017\070\027\047\030\056\031\064\034\053\036\040\044" +
    "\062\046\055\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\040\007\057\010\044\011\043" +
    "\012\246\013\042\014\060\015\067\017\070\027\047\030" +
    "\056\031\064\034\053\036\040\044\062\046\055\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\040\007\057\010\044\011" +
    "\043\012\257\013\042\014\060\015\067\017\070\027\047" +
    "\030\056\031\064\034\053\036\040\044\062\046\055\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\040\007\057\010\044\011\043\012\266\013\042\014\060" +
    "\015\067\017\070\027\047\030\056\031\064\034\053\036" +
    "\040\044\062\046\055\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\045\274\001\001\000\006\015\275\046\055" +
    "\001\001\000\010\014\276\015\067\046\055\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\045\302\001\001\000\006\015\303\046\055\001\001\000" +
    "\010\014\304\015\067\046\055\001\001\000\002\001\001" +
    "\000\002\001\001\000\040\007\057\010\044\011\043\012" +
    "\307\013\042\014\060\015\067\017\070\027\047\030\056" +
    "\031\064\034\053\036\040\044\062\046\055\001\001\000" +
    "\002\001\001\000\002\001\001\000\016\020\322\021\121" +
    "\022\107\024\116\026\110\036\106\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\016\020\320\021\121\022\107\024" +
    "\116\026\110\036\106\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\042\332\043\334\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\043\340\001\001\000\006\042\337\043\334\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\042\342\043\334" +
    "\001\001\000\002\001\001\000\002\001\001\000\040\007" +
    "\057\010\044\011\043\012\345\013\042\014\060\015\067" +
    "\017\070\027\047\030\056\031\064\034\053\036\040\044" +
    "\062\046\055\001\001\000\004\035\346\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\034\351\001\001\000" +
    "\002\001\001\000\040\007\057\010\044\011\043\012\353" +
    "\013\042\014\060\015\067\017\070\027\047\030\056\031" +
    "\064\034\053\036\040\044\062\046\055\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\032\362\001\001\000\016" +
    "\020\364\021\121\022\107\024\116\026\110\036\106\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\040\007\057\010\044\011\043\012\366\013\042\014" +
    "\060\015\067\017\070\027\047\030\056\031\064\034\053" +
    "\036\040\044\062\046\055\001\001\000\004\033\367\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\032\373" +
    "\001\001\000\002\001\001\000\002\001\001\000\040\007" +
    "\057\010\044\011\043\012\375\013\042\014\060\015\067" +
    "\017\070\027\047\030\056\031\064\034\053\036\040\044" +
    "\062\046\055\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\045\u0101\001\001\000\010\014" +
    "\u0102\015\067\046\055\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\045\u0106\001\001\000" +
    "\006\015\u0107\046\055\001\001\000\010\014\u0108\015\067" +
    "\046\055\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\042\u010f\043\334\001\001\000\002\001" +
    "\001\000\002\001\001\000\040\007\057\010\044\011\043" +
    "\012\u0112\013\042\014\060\015\067\017\070\027\047\030" +
    "\056\031\064\034\053\036\040\044\062\046\055\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\045\u0118\001\001" +
    "\000\002\001\001\000\002\001\001\000\040\007\057\010" +
    "\044\011\043\012\u011b\013\042\014\060\015\067\017\070" +
    "\027\047\030\056\031\064\034\053\036\040\044\062\046" +
    "\055\001\001\000\002\001\001\000\010\003\u011f\004\u011c" +
    "\046\u011d\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



   ArrayList<String> errores = new ArrayList();
   public static Node root;
   public int cont = 1;

     public String getToken(int id){
        String value = Sym.terminalNames[id];
        switch(id){
            case Sym.L_KEY:
                return "{";
            case Sym.R_KEY:
                return "}";
            case Sym.L_PAR:
                return "(";
            case Sym.R_PAR:
                return ")";
            case Sym.L_BRACKET:
                return "[";
            case Sym.R_BRACKET:
                return "]";
            default:
                return value;
        }
    }   
    
    @Override
    public void syntax_error(Symbol s){
        String lex = s.value != null ? s.value.toString() : getToken(s.sym);
        int fila = s.right;
        int columna = s.left;
        String err = "";
        if(lex.equals("EOF")){
            err = "Error sintáctico: Se esperaba el token }";
        } else {
            err = "Error sintáctico: " +  " fila: " + fila + " columna: " + columna + ", No se esperaba el token: " + lex;
        }

        System.err.println(err);
        errores.add(err);
    }

    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception {
        String lex = s.value != null ? s.value.toString() : getToken(s.sym);
        int fila = s.right;
        int columna = s.left;
        String err = "";
        if(lex.equals("EOF")){
            err = "";
        }else{
            err = "Error sintáctico, pánico: " + " fila: " + fila + " columna: " + columna + ", No se esperaba el token: " + lex;
        }
        System.err.println(err);
        errores.add(err);
    }
    



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= inicio EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Node start_val = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // inicio ::= dec_funcion dec_gen_fun 
            {
              Node RESULT =null;
		int dgleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dgright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Node dg = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int dgfleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dgfright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Node dgf = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    System.out.println("Entra a inicio");

    Node node = new Node();
    node.setEtiqueta("INICIO");
    node.setID(parser.cont);
    node.addHijos((Node) dg);
    node.addHijos((Node) dgf);
    
    parser.root = node;
    RESULT = node; 
    
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // empty ::= EMPTY 
            {
              Node RESULT =null;
		
                Node node = new Node();
                RESULT = node;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("empty",36, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // dec_gen_fun ::= dec_funcion dec_gen_fun 
            {
              Node RESULT =null;
		int dfleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dfright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Node df = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int dgfleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dgfright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Node dgf = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                System.err.println("Entra a dec_gen_fun");

                Node node = new Node();
                RESULT = node;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("dec_gen_fun",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // dec_gen_fun ::= empty 
            {
              Node RESULT =null;
		
                Node node = new Node();
                RESULT = node;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("dec_gen_fun",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // dec_funcion ::= FUNCTION ID L_PAR parametros COLON tipo L_KEY dec_general R_KEY 
            {
              Node RESULT =null;
		
               System.err.println("Entra a dec_funcion");

                Node node = new Node();
                RESULT = node;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("dec_funcion",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // parametros ::= VARIABLE ID COLON tipo nuevo_parametro R_PAR 
            {
              Node RESULT =null;
		
                Node node = new Node();
                RESULT = node;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // parametros ::= VARIABLE ID COLON tipo R_PAR 
            {
              Node RESULT =null;
		
                Node node = new Node();
                RESULT = node;
               
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // parametros ::= R_PAR 
            {
              Node RESULT =null;
		
                Node node = new Node();
                RESULT = node;
               
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // nuevo_parametro ::= COMMA VARIABLE ID COLON tipo nuevo_parametro 
            {
              Node RESULT =null;
		
                Node node = new Node();
                RESULT = node;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("nuevo_parametro",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // nuevo_parametro ::= COMMA VARIABLE ID COLON tipo 
            {
              Node RESULT =null;
		
                Node node = new Node();
                RESULT = node;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("nuevo_parametro",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // func_lenguaje ::= func_input 
            {
              Node RESULT =null;
		
                    Node node = new Node();
                    RESULT = node;
                  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("func_lenguaje",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // func_lenguaje ::= func_output 
            {
              Node RESULT =null;
		
                    Node node = new Node();
                    RESULT = node;
                  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("func_lenguaje",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // func_input ::= INPUT L_PAR ID COMMA tipo R_PAR 
            {
              Node RESULT =null;
		
                Node node = new Node();
                RESULT = node;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("func_input",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // func_output ::= OUTPUT L_PAR CONSTSTRING R_PAR 
            {
              Node RESULT =null;
		
                Node node = new Node();
                RESULT = node;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("func_output",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // func_output ::= OUTPUT L_PAR NUM R_PAR 
            {
              Node RESULT =null;
		
                Node node = new Node();
                RESULT = node;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("func_output",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // func_output ::= OUTPUT L_PAR ID R_PAR 
            {
              Node RESULT =null;
		
                Node node = new Node();
                RESULT = node;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("func_output",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // dec_general ::= dec_variable dec_general 
            {
              Node RESULT =null;
		int dgleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dgright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Node dg = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                Node node = new Node();
                RESULT = node;
               
              CUP$parser$result = parser.getSymbolFactory().newSymbol("dec_general",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // dec_general ::= dec_var dec_general 
            {
              Node RESULT =null;
		
                Node node = new Node();
                RESULT = node;
               
              CUP$parser$result = parser.getSymbolFactory().newSymbol("dec_general",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // dec_general ::= dec_while dec_general 
            {
              Node RESULT =null;
		
                Node node = new Node();
                RESULT = node;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("dec_general",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // dec_general ::= dec_for dec_general 
            {
              Node RESULT =null;
		
                Node node = new Node();
                RESULT = node;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("dec_general",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // dec_general ::= dec_switch dec_general 
            {
              Node RESULT =null;
		
                Node node = new Node();
                RESULT = node;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("dec_general",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // dec_general ::= dec_if dec_general 
            {
              Node RESULT =null;
		
                Node node = new Node();
                RESULT = node;
               
              CUP$parser$result = parser.getSymbolFactory().newSymbol("dec_general",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // dec_general ::= dec_llamada_funcion SEMICOLON dec_general 
            {
              Node RESULT =null;
		
                Node node = new Node();
                RESULT = node;
               
              CUP$parser$result = parser.getSymbolFactory().newSymbol("dec_general",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // dec_general ::= dec_var_inst dec_general 
            {
              Node RESULT =null;
		
                Node node = new Node();
                RESULT = node;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("dec_general",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // dec_general ::= func_lenguaje SEMICOLON dec_general 
            {
              Node RESULT =null;
		
                Node node = new Node();
                RESULT = node;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("dec_general",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // dec_general ::= dec_return 
            {
              Node RESULT =null;
		
                Node node = new Node();
                RESULT = node;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("dec_general",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // dec_general ::= BREAK SEMICOLON dec_general 
            {
              Node RESULT =null;
		
                Node node = new Node();
                RESULT = node;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("dec_general",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // dec_general ::= error empty 
            {
              Node RESULT =null;
		
                Node node = new Node();
                RESULT = node;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("dec_general",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // dec_general ::= error R_KEY 
            {
              Node RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("dec_general",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // dec_variable ::= VARIABLE ID COLON tipo dec_var 
            {
              Node RESULT =null;
		
                Node node = new Node();
                RESULT = node;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("dec_variable",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // dec_variable ::= VARIABLE ID L_BRACKET NUM R_BRACKET COLON tipo dec_inst dec_var 
            {
              Node RESULT =null;
		
                Node node = new Node();
                RESULT = node;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("dec_variable",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // dec_var ::= dec_inst SEMICOLON 
            {
              Node RESULT =null;
		
                Node node = new Node();
                RESULT = node;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("dec_var",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // dec_var ::= COMMA ID COLON tipo dec_inst dec_var 
            {
              Node RESULT =null;
		
                Node node = new Node();
                RESULT = node;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("dec_var",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // dec_var ::= COMMA ID L_BRACKET NUM R_BRACKET COLON tipo dec_inst dec_var 
            {
              Node RESULT =null;
		
                Node node = new Node();
                RESULT = node;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("dec_var",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // dec_inst ::= OPASIGN ID 
            {
              Node RESULT =null;
		
                Node node = new Node();
                RESULT = node;
             
              CUP$parser$result = parser.getSymbolFactory().newSymbol("dec_inst",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // dec_inst ::= OPASIGN ID DOT AT L_PAR NUM R_PAR 
            {
              Node RESULT =null;
		
                Node node = new Node();
                RESULT = node;
             
              CUP$parser$result = parser.getSymbolFactory().newSymbol("dec_inst",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // dec_inst ::= OPASIGN NUM 
            {
              Node RESULT =null;
		
                Node node = new Node();
                RESULT = node;
             
              CUP$parser$result = parser.getSymbolFactory().newSymbol("dec_inst",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // dec_inst ::= OPASIGN CONSTSTRING 
            {
              Node RESULT =null;
		
                Node node = new Node();
                RESULT = node;
             
              CUP$parser$result = parser.getSymbolFactory().newSymbol("dec_inst",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // dec_inst ::= OPASIGN CONSTCHAR 
            {
              Node RESULT =null;
		
                Node node = new Node();
                RESULT = node;
             
              CUP$parser$result = parser.getSymbolFactory().newSymbol("dec_inst",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // dec_inst ::= OPASIGN TRUE 
            {
              Node RESULT =null;
		
                Node node = new Node();
                RESULT = node;
             
              CUP$parser$result = parser.getSymbolFactory().newSymbol("dec_inst",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // dec_inst ::= OPASIGN FALSE 
            {
              Node RESULT =null;
		
                Node node = new Node();
                RESULT = node;
             
              CUP$parser$result = parser.getSymbolFactory().newSymbol("dec_inst",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // dec_inst ::= OPASIGN dec_llamada_funcion 
            {
              Node RESULT =null;
		
                Node node = new Node();
                RESULT = node;
             
              CUP$parser$result = parser.getSymbolFactory().newSymbol("dec_inst",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // dec_inst ::= OPASIGN L_KEY valor arr_cont R_KEY 
            {
              Node RESULT =null;
		
                Node node = new Node();
                RESULT = node;
             
              CUP$parser$result = parser.getSymbolFactory().newSymbol("dec_inst",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // dec_inst ::= empty 
            {
              Node RESULT =null;
		
                Node node = new Node();
                RESULT = node;
             
              CUP$parser$result = parser.getSymbolFactory().newSymbol("dec_inst",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // arr_cont ::= COMMA valor arr_cont 
            {
              Node RESULT =null;
		
                Node node = new Node();
                RESULT = node;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("arr_cont",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // arr_cont ::= empty 
            {
              Node RESULT =null;
		
                Node node = new Node();
                RESULT = node;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("arr_cont",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // dec_var_inst ::= ID OPASIGN valor SEMICOLON 
            {
              Node RESULT =null;
		
                Node node = new Node();
                RESULT = node;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("dec_var_inst",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // dec_var_inst ::= ID DOT AT L_PAR NUM R_PAR OPASIGN valor SEMICOLON 
            {
              Node RESULT =null;
		
                Node node = new Node();
                RESULT = node;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("dec_var_inst",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // valor ::= CONSTSTRING 
            {
              Node RESULT =null;
		
                Node node = new Node();
                RESULT = node;
           
              CUP$parser$result = parser.getSymbolFactory().newSymbol("valor",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // valor ::= CONSTCHAR 
            {
              Node RESULT =null;
		
                Node node = new Node();
                RESULT = node;
           
              CUP$parser$result = parser.getSymbolFactory().newSymbol("valor",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // valor ::= TRUE 
            {
              Node RESULT =null;
		
                Node node = new Node();
                RESULT = node;
           
              CUP$parser$result = parser.getSymbolFactory().newSymbol("valor",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // valor ::= FALSE 
            {
              Node RESULT =null;
		
                Node node = new Node();
                RESULT = node;
           
              CUP$parser$result = parser.getSymbolFactory().newSymbol("valor",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // valor ::= math_op 
            {
              Node RESULT =null;
		
                Node node = new Node();
                RESULT = node;
           
              CUP$parser$result = parser.getSymbolFactory().newSymbol("valor",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // valor ::= dec_llamada_funcion 
            {
              Node RESULT =null;
		
                Node node = new Node();
                RESULT = node;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("valor",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // valor ::= ID 
            {
              Node RESULT =null;
		
                Node node = new Node();
                RESULT = node;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("valor",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // math_op ::= s_op 
            {
              Node RESULT =null;
		
                Node node = new Node();
                RESULT = node;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("math_op",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // math_op ::= m_op 
            {
              Node RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("math_op",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // s_op ::= val sum_op 
            {
              Node RESULT =null;
		
                Node node = new Node();
                RESULT = node;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("s_op",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // sum_op ::= OPSUM val sum_op 
            {
              Node RESULT =null;
		
                Node node = new Node();
                RESULT = node;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sum_op",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // sum_op ::= OPSUM val mult_op 
            {
              Node RESULT =null;
		
                Node node = new Node();
                RESULT = node;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sum_op",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // sum_op ::= OPSUM val 
            {
              Node RESULT =null;
		
                Node node = new Node();
                RESULT = node;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sum_op",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // m_op ::= val mult_op 
            {
              Node RESULT =null;
		
                Node node = new Node();
                RESULT = node;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("m_op",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // mult_op ::= OPMULT val mult_op 
            {
              Node RESULT =null;
		
                Node node = new Node();
                RESULT = node;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("mult_op",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // mult_op ::= OPMULT val sum_op 
            {
              Node RESULT =null;
		
                Node node = new Node();
                RESULT = node;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("mult_op",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // mult_op ::= OPMULT val 
            {
              Node RESULT =null;
		
                Node node = new Node();
                RESULT = node;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("mult_op",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // val ::= ID 
            {
              Node RESULT =null;
		
                Node node = new Node();
                RESULT = node;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("val",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // val ::= NUM 
            {
              Node RESULT =null;
		
                Node node = new Node();
                RESULT = node;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("val",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // val ::= dec_llamada_funcion 
            {
              Node RESULT =null;
		
                Node node = new Node();
                RESULT = node;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("val",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // val ::= L_PAR math_op R_PAR 
            {
              Node RESULT =null;
		
                Node node = new Node();
                RESULT = node;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("val",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // dec_while ::= WHILE L_PAR condicion R_PAR L_KEY dec_general R_KEY 
            {
              Node RESULT =null;
		
                Node node = new Node();
                RESULT = node;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("dec_while",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // dec_for ::= FOR L_PAR ID COMMA NUM UPTO COMMA STEP L_PAR NUM R_PAR R_PAR L_KEY dec_general R_KEY 
            {
              Node RESULT =null;
		
                Node node = new Node();
                RESULT = node;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("dec_for",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-14)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // dec_for ::= FOR L_PAR ID COMMA NUM DOWNTO NUM COMMA STEP L_PAR NUM R_PAR R_PAR L_KEY dec_general R_KEY 
            {
              Node RESULT =null;
		
                Node node = new Node();
                RESULT = node;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("dec_for",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-15)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // dec_for ::= FOR L_PAR VARIABLE ID COLON INTEGER COMMA NUM UPTO NUM COMMA STEP L_PAR NUM R_PAR R_PAR L_KEY dec_general R_KEY 
            {
              Node RESULT =null;
		
                Node node = new Node();
                RESULT = node;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("dec_for",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-18)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // dec_for ::= FOR L_PAR VARIABLE ID COLON INTEGER COMMA NUM DOWNTO NUM COMMA STEP L_PAR NUM R_PAR R_PAR L_BRACKET dec_general R_BRACKET 
            {
              Node RESULT =null;
		
                Node node = new Node();
                RESULT = node;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("dec_for",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-18)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // dec_switch ::= SWITCH L_PAR ID R_PAR L_BRACKET list_op R_BRACKET 
            {
              Node RESULT =null;
		
                Node node = new Node();
                RESULT = node;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("dec_switch",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // list_op ::= OPTION valor COLON dec_general new_op 
            {
              Node RESULT =null;
		
                Node node = new Node();
                RESULT = node;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("list_op",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // new_op ::= BREAK SEMICOLON list_op 
            {
              Node RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("new_op",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // new_op ::= BREAK SEMICOLON DEFAULT COLON dec_general 
            {
              Node RESULT =null;
		
                Node node = new Node();
                RESULT = node;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("new_op",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // new_op ::= BREAK SEMICOLON 
            {
              Node RESULT =null;
		
                Node node = new Node();
                RESULT = node;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("new_op",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // dec_if ::= IF L_PAR condicion R_PAR L_KEY dec_general dec_else 
            {
              Node RESULT =null;
		
                Node node = new Node();
                RESULT = node;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("dec_if",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // dec_else ::= R_KEY ELSE dec_if 
            {
              Node RESULT =null;
		
                Node node = new Node();
                RESULT = node;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("dec_else",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // dec_else ::= R_KEY ELSE L_KEY dec_general R_KEY 
            {
              Node RESULT =null;
		
                Node node = new Node();
                RESULT = node;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("dec_else",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // dec_else ::= R_KEY 
            {
              Node RESULT =null;
		
                Node node = new Node();
                RESULT = node;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("dec_else",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // dec_llamada_funcion ::= ID L_PAR llamada_parametros 
            {
              Node RESULT =null;
		
                Node node = new Node();
                RESULT = node;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("dec_llamada_funcion",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // llamada_parametros ::= valor lista_valores R_PAR 
            {
              Node RESULT =null;
		
                Node node = new Node();
                RESULT = node;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("llamada_parametros",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // llamada_parametros ::= valor R_PAR 
            {
              Node RESULT =null;
		
                Node node = new Node();
                RESULT = node;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("llamada_parametros",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // llamada_parametros ::= R_PAR 
            {
              Node RESULT =null;
		
                Node node = new Node();
                RESULT = node;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("llamada_parametros",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // lista_valores ::= COMMA valor lista_valores 
            {
              Node RESULT =null;
		
                Node node = new Node();
                RESULT = node;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_valores",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // lista_valores ::= COMMA valor 
            {
              Node RESULT =null;
		
                Node node = new Node();
                RESULT = node;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_valores",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // condicion ::= valor_cond OPREL valor_cond 
            {
              Node RESULT =null;
		
                Node node = new Node();
                RESULT = node;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("condicion",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // condicion ::= valor_cond OPREL valor_cond OPLOG condicion 
            {
              Node RESULT =null;
		
                Node node = new Node();
                RESULT = node;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("condicion",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // condicion ::= valor_cond 
            {
              Node RESULT =null;
		
                Node node = new Node();
                RESULT = node;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("condicion",32, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // condicion ::= NULL 
            {
              Node RESULT =null;
		
                Node node = new Node();
                RESULT = node;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("condicion",32, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // condicion ::= valor_cond OPLOG condicion 
            {
              Node RESULT =null;
		
                Node node = new Node();
                RESULT = node;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("condicion",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // valor_cond ::= NUM 
            {
              Node RESULT =null;
		
                Node node = new Node();
                RESULT = node;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("valor_cond",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // valor_cond ::= ID 
            {
              Node RESULT =null;
		
                Node node = new Node();
                RESULT = node;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("valor_cond",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // valor_cond ::= TRUE 
            {
              Node RESULT =null;
		
                Node node = new Node();
                RESULT = node;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("valor_cond",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // valor_cond ::= FALSE 
            {
              Node RESULT =null;
		
                Node node = new Node();
                RESULT = node;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("valor_cond",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // dec_return ::= RETURN dec_llamada_funcion 
            {
              Node RESULT =null;
		
                Node node = new Node();
                RESULT = node;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("dec_return",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // dec_return ::= RETURN SEMICOLON 
            {
              Node RESULT =null;
		
                Node node = new Node();
                RESULT = node;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("dec_return",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // dec_return ::= RETURN valor SEMICOLON 
            {
              Node RESULT =null;
		
                Node node = new Node();
                RESULT = node;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("dec_return",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // tipo ::= BOOLEAN 
            {
              Node RESULT =null;
		
                Node node = new Node();
                RESULT = node;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo",35, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // tipo ::= CHARACTER 
            {
              Node RESULT =null;
		
                Node node = new Node();
                RESULT = node;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo",35, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // tipo ::= INTEGER 
            {
              Node RESULT =null;
		
                Node node = new Node();
                RESULT = node;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo",35, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // tipo ::= VOID 
            {
              Node RESULT =null;
		
                Node node = new Node();
                RESULT = node;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo",35, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // tipo ::= STRING 
            {
              Node RESULT =null;
		
                Node node = new Node();
                RESULT = node;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo",35, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
