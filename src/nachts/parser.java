
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package nachts;

import java_cup.runtime.*;
import java.util.ArrayList;
import java.util.LinkedList;
import java.util.List;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return Sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\207\000\002\002\004\000\002\002\004\000\002\003" +
    "\004\000\002\003\002\000\002\004\014\000\002\004\014" +
    "\000\002\005\007\000\002\005\006\000\002\005\011\000" +
    "\002\005\010\000\002\005\013\000\002\005\012\000\002" +
    "\005\002\000\002\006\010\000\002\006\007\000\002\006" +
    "\012\000\002\006\011\000\002\006\014\000\002\006\013" +
    "\000\002\007\003\000\002\007\003\000\002\010\010\000" +
    "\002\011\006\000\002\011\006\000\002\011\006\000\002" +
    "\011\006\000\002\012\004\000\002\012\004\000\002\012" +
    "\004\000\002\012\004\000\002\012\004\000\002\012\005" +
    "\000\002\012\004\000\002\012\005\000\002\012\005\000" +
    "\002\012\004\000\002\012\002\000\002\013\007\000\002" +
    "\013\013\000\002\013\016\000\002\014\004\000\002\014" +
    "\010\000\002\014\013\000\002\014\016\000\002\015\004" +
    "\000\002\015\011\000\002\015\004\000\002\015\004\000" +
    "\002\015\004\000\002\015\004\000\002\015\004\000\002" +
    "\015\004\000\002\015\004\000\002\015\004\000\002\015" +
    "\004\000\002\015\004\000\002\015\002\000\002\047\006" +
    "\000\002\050\005\000\002\050\002\000\002\046\006\000" +
    "\002\016\005\000\002\016\002\000\002\017\006\000\002" +
    "\017\013\000\002\017\006\000\002\017\006\000\002\017" +
    "\005\000\002\017\015\000\002\020\003\000\002\020\003" +
    "\000\002\020\003\000\002\020\003\000\002\020\003\000" +
    "\002\020\003\000\002\020\003\000\002\020\003\000\002" +
    "\020\003\000\002\020\010\000\002\020\012\000\002\021" +
    "\003\000\002\021\003\000\002\022\004\000\002\023\005" +
    "\000\002\023\005\000\002\023\004\000\002\024\004\000" +
    "\002\025\005\000\002\025\005\000\002\025\004\000\002" +
    "\026\003\000\002\026\003\000\002\026\003\000\002\026" +
    "\005\000\002\027\011\000\002\030\022\000\002\030\022" +
    "\000\002\030\025\000\002\030\025\000\002\031\011\000" +
    "\002\032\007\000\002\033\005\000\002\033\007\000\002" +
    "\033\004\000\002\034\012\000\002\035\012\000\002\035" +
    "\006\000\002\035\002\000\002\036\006\000\002\037\004" +
    "\000\002\037\003\000\002\037\002\000\002\040\005\000" +
    "\002\040\004\000\002\042\005\000\002\042\007\000\002" +
    "\042\003\000\002\042\003\000\002\042\005\000\002\043" +
    "\003\000\002\043\003\000\002\043\003\000\002\043\003" +
    "\000\002\044\004\000\002\044\003\000\002\045\003\000" +
    "\002\045\003\000\002\045\003\000\002\045\003\000\002" +
    "\045\003\000\002\045\003\000\002\051\003\000\002\051" +
    "\003\000\002\051\003\000\002\051\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0167\000\004\004\005\001\002\000\006\002\ufffe\004" +
    "\005\001\002\000\004\043\010\001\002\000\004\002\007" +
    "\001\002\000\004\002\001\001\002\000\004\062\011\001" +
    "\002\000\006\011\013\063\ufff5\001\002\000\004\063\060" +
    "\001\002\000\004\043\014\001\002\000\006\060\015\066" +
    "\016\001\002\000\004\061\047\001\002\000\016\012\020" +
    "\014\023\020\017\021\022\022\024\030\025\001\002\000" +
    "\014\053\uff82\056\uff82\063\uff82\064\uff82\065\uff82\001\002" +
    "\000\014\053\uff80\056\uff80\063\uff80\064\uff80\065\uff80\001" +
    "\002\000\006\063\ufffa\064\026\001\002\000\014\053\uff83" +
    "\056\uff83\063\uff83\064\uff83\065\uff83\001\002\000\014\053" +
    "\uff7f\056\uff7f\063\uff7f\064\uff7f\065\uff7f\001\002\000\014" +
    "\053\uff84\056\uff84\063\uff84\064\uff84\065\uff84\001\002\000" +
    "\014\053\uff81\056\uff81\063\uff81\064\uff81\065\uff81\001\002" +
    "\000\004\011\030\001\002\000\004\063\ufffb\001\002\000" +
    "\004\043\031\001\002\000\006\060\032\066\033\001\002" +
    "\000\004\061\036\001\002\000\016\012\020\014\023\020" +
    "\017\021\022\022\024\030\025\001\002\000\006\063\ufff3" +
    "\064\026\001\002\000\004\063\ufff4\001\002\000\006\060" +
    "\037\066\040\001\002\000\004\061\043\001\002\000\016" +
    "\012\020\014\023\020\017\021\022\022\024\030\025\001" +
    "\002\000\006\063\ufff1\064\026\001\002\000\004\063\ufff2" +
    "\001\002\000\004\066\044\001\002\000\016\012\020\014" +
    "\023\020\017\021\022\022\024\030\025\001\002\000\006" +
    "\063\uffef\064\026\001\002\000\004\063\ufff0\001\002\000" +
    "\006\060\050\066\051\001\002\000\004\061\054\001\002" +
    "\000\016\012\020\014\023\020\017\021\022\022\024\030" +
    "\025\001\002\000\006\063\ufff8\064\026\001\002\000\004" +
    "\063\ufff9\001\002\000\004\066\055\001\002\000\016\012" +
    "\020\014\023\020\017\021\022\022\024\030\025\001\002" +
    "\000\006\063\ufff6\064\026\001\002\000\004\063\ufff7\001" +
    "\002\000\004\066\061\001\002\000\020\012\020\014\023" +
    "\020\017\021\022\022\024\030\025\071\063\001\002\000" +
    "\004\056\u0164\001\002\000\004\056\064\001\002\000\030" +
    "\003\107\011\076\023\077\025\072\026\111\027\073\035" +
    "\066\036\112\037\075\043\101\057\uffdd\001\002\000\004" +
    "\065\u0162\001\002\000\004\062\u015d\001\002\000\032\003" +
    "\107\011\076\023\077\025\072\026\111\027\073\033\uffdd" +
    "\035\066\036\112\037\075\043\101\057\uffdd\001\002\000" +
    "\004\065\uffed\001\002\000\004\065\uffee\001\002\000\004" +
    "\062\u0156\001\002\000\024\005\152\015\154\016\163\017" +
    "\156\031\155\032\161\043\162\062\142\065\uff85\001\002" +
    "\000\032\003\107\011\076\023\077\025\072\026\111\027" +
    "\073\033\uffdd\035\066\036\112\037\075\043\101\057\uffdd" +
    "\001\002\000\004\062\u0143\001\002\000\004\043\374\001" +
    "\002\000\004\062\335\001\002\000\032\003\107\011\076" +
    "\023\077\025\072\026\111\027\073\033\uffdd\035\066\036" +
    "\112\037\075\043\101\057\uffdd\001\002\000\016\052\306" +
    "\053\303\054\305\055\304\062\151\070\307\001\002\000" +
    "\032\003\107\011\076\023\077\025\072\026\111\027\073" +
    "\033\uffdd\035\066\036\112\037\075\043\101\057\uffdd\001" +
    "\002\000\004\065\300\001\002\000\004\065\276\001\002" +
    "\000\004\057\275\001\002\000\032\003\107\011\076\023" +
    "\077\025\072\026\111\027\073\033\uffdd\035\066\036\112" +
    "\037\075\043\101\057\uffdd\001\002\000\004\057\273\001" +
    "\002\000\032\003\107\011\076\023\077\025\072\026\111" +
    "\027\073\033\uffdd\035\066\036\112\037\075\043\101\057" +
    "\uffdd\001\002\000\004\062\124\001\002\000\004\062\113" +
    "\001\002\000\012\005\115\016\116\017\117\043\114\001" +
    "\002\000\004\063\123\001\002\000\004\063\122\001\002" +
    "\000\004\063\121\001\002\000\004\063\120\001\002\000" +
    "\004\065\uffea\001\002\000\004\065\uffeb\001\002\000\004" +
    "\065\uffe9\001\002\000\004\065\uffe8\001\002\000\006\011" +
    "\126\043\125\001\002\000\004\064\242\001\002\000\004" +
    "\043\127\001\002\000\004\066\130\001\002\000\004\020" +
    "\131\001\002\000\004\064\132\001\002\000\010\005\133" +
    "\043\140\062\142\001\002\000\020\006\uff7d\007\uff7d\050" +
    "\uffa6\051\uffa6\061\uff7d\063\uff7d\064\uff7d\001\002\000\020" +
    "\006\uff7c\007\uff7c\050\uffa5\051\uffa5\061\uff7c\063\uff7c\064" +
    "\uff7c\001\002\000\024\006\uffb1\007\uffb1\053\uffb1\057\uffb1" +
    "\061\uffb1\063\uffb1\064\uffb1\065\uffb1\066\uffb1\001\002\000" +
    "\006\050\233\051\232\001\002\000\006\006\202\007\203" +
    "\001\002\000\022\006\uff7e\007\uff7e\050\uffa7\051\uffa7\061" +
    "\uff7e\062\151\063\uff7e\064\uff7e\001\002\000\024\006\uffb0" +
    "\007\uffb0\053\uffb0\057\uffb0\061\uffb0\063\uffb0\064\uffb0\065" +
    "\uffb0\066\uffb0\001\002\000\010\005\145\043\144\062\142" +
    "\001\002\000\014\006\uff7b\007\uff7b\061\uff7b\063\uff7b\064" +
    "\uff7b\001\002\000\032\006\uffa7\007\uffa7\050\uffa7\051\uffa7" +
    "\053\uffa7\057\uffa7\061\uffa7\062\151\063\uffa7\064\uffa7\065" +
    "\uffa7\066\uffa7\001\002\000\030\006\uffa6\007\uffa6\050\uffa6" +
    "\051\uffa6\053\uffa6\057\uffa6\061\uffa6\063\uffa6\064\uffa6\065" +
    "\uffa6\066\uffa6\001\002\000\004\063\150\001\002\000\030" +
    "\006\uffa5\007\uffa5\050\uffa5\051\uffa5\053\uffa5\057\uffa5\061" +
    "\uffa5\063\uffa5\064\uffa5\065\uffa5\066\uffa5\001\002\000\030" +
    "\006\uffa4\007\uffa4\050\uffa4\051\uffa4\053\uffa4\057\uffa4\061" +
    "\uffa4\063\uffa4\064\uffa4\065\uffa4\066\uffa4\001\002\000\024" +
    "\005\152\015\154\016\163\017\156\031\155\032\161\043" +
    "\162\062\142\063\uff92\001\002\000\020\050\uffa6\051\uffa6" +
    "\057\uffb8\063\uffb8\064\uffb8\065\uffb8\066\uffb8\001\002\000" +
    "\020\050\uffa5\051\uffa5\057\uffb5\063\uffb5\064\uffb5\065\uffb5" +
    "\066\uffb5\001\002\000\014\057\uffb7\063\uffb7\064\uffb7\065" +
    "\uffb7\066\uffb7\001\002\000\014\057\uffba\063\uffba\064\uffba" +
    "\065\uffba\066\uffba\001\002\000\014\057\uffbb\063\uffbb\064" +
    "\uffbb\065\uffbb\066\uffbb\001\002\000\006\063\uff93\064\176" +
    "\001\002\000\004\063\175\001\002\000\014\057\uffb9\063" +
    "\uffb9\064\uffb9\065\uffb9\066\uffb9\001\002\000\024\050\uffa7" +
    "\051\uffa7\057\uffb4\062\151\063\uffb4\064\uffb4\065\uffb4\066" +
    "\uffb4\070\165\001\002\000\014\057\uffbc\063\uffbc\064\uffbc" +
    "\065\uffbc\066\uffbc\001\002\000\014\057\uffb6\063\uffb6\064" +
    "\uffb6\065\uffb6\066\uffb6\001\002\000\004\067\166\001\002" +
    "\000\004\062\167\001\002\000\010\005\133\043\140\062" +
    "\142\001\002\000\006\063\172\064\171\001\002\000\010" +
    "\005\133\043\140\062\142\001\002\000\014\057\uffb3\063" +
    "\uffb3\064\uffb3\065\uffb3\066\uffb3\001\002\000\004\063\174" +
    "\001\002\000\014\057\uffb2\063\uffb2\064\uffb2\065\uffb2\066" +
    "\uffb2\001\002\000\030\006\uff95\007\uff95\050\uff95\051\uff95" +
    "\053\uff95\057\uff95\061\uff95\063\uff95\064\uff95\065\uff95\066" +
    "\uff95\001\002\000\022\005\152\015\154\016\163\017\156" +
    "\031\155\032\161\043\162\062\142\001\002\000\004\063" +
    "\uff94\001\002\000\006\063\uff90\064\176\001\002\000\004" +
    "\063\uff91\001\002\000\010\005\133\043\140\062\142\001" +
    "\002\000\010\005\133\043\140\062\142\001\002\000\004" +
    "\064\205\001\002\000\004\010\206\001\002\000\004\062" +
    "\207\001\002\000\010\005\133\043\140\062\142\001\002" +
    "\000\004\063\211\001\002\000\004\063\212\001\002\000" +
    "\004\056\213\001\002\000\030\003\107\011\076\023\077" +
    "\025\072\026\111\027\073\035\066\036\112\037\075\043" +
    "\101\057\uffdd\001\002\000\004\057\215\001\002\000\032" +
    "\003\uff9f\011\uff9f\023\uff9f\025\uff9f\026\uff9f\027\uff9f\033" +
    "\uff9f\035\uff9f\036\uff9f\037\uff9f\043\uff9f\057\uff9f\001\002" +
    "\000\004\064\217\001\002\000\004\010\220\001\002\000" +
    "\004\062\221\001\002\000\010\005\133\043\140\062\142" +
    "\001\002\000\004\063\223\001\002\000\004\063\224\001" +
    "\002\000\004\056\225\001\002\000\030\003\107\011\076" +
    "\023\077\025\072\026\111\027\073\035\066\036\112\037" +
    "\075\043\101\057\uffdd\001\002\000\004\057\227\001\002" +
    "\000\032\003\uffa0\011\uffa0\023\uffa0\025\uffa0\026\uffa0\027" +
    "\uffa0\033\uffa0\035\uffa0\036\uffa0\037\uffa0\043\uffa0\057\uffa0" +
    "\001\002\000\024\006\uffab\007\uffab\053\uffab\057\uffab\061" +
    "\uffab\063\uffab\064\uffab\065\uffab\066\uffab\001\002\000\024" +
    "\006\uffaf\007\uffaf\053\uffaf\057\uffaf\061\uffaf\063\uffaf\064" +
    "\uffaf\065\uffaf\066\uffaf\001\002\000\010\005\145\043\144" +
    "\062\142\001\002\000\010\005\145\043\144\062\142\001" +
    "\002\000\030\006\uffa8\007\uffa8\050\233\051\232\053\uffa8" +
    "\057\uffa8\061\uffa8\063\uffa8\064\uffa8\065\uffa8\066\uffa8\001" +
    "\002\000\024\006\uffaa\007\uffaa\053\uffaa\057\uffaa\061\uffaa" +
    "\063\uffaa\064\uffaa\065\uffaa\066\uffaa\001\002\000\024\006" +
    "\uffa9\007\uffa9\053\uffa9\057\uffa9\061\uffa9\063\uffa9\064\uffa9" +
    "\065\uffa9\066\uffa9\001\002\000\030\006\uffac\007\uffac\050" +
    "\233\051\232\053\uffac\057\uffac\061\uffac\063\uffac\064\uffac" +
    "\065\uffac\066\uffac\001\002\000\024\006\uffad\007\uffad\053" +
    "\uffad\057\uffad\061\uffad\063\uffad\064\uffad\065\uffad\066\uffad" +
    "\001\002\000\024\006\uffae\007\uffae\053\uffae\057\uffae\061" +
    "\uffae\063\uffae\064\uffae\065\uffae\066\uffae\001\002\000\010" +
    "\005\133\043\140\062\142\001\002\000\006\006\244\007" +
    "\245\001\002\000\010\005\133\043\140\062\142\001\002" +
    "\000\010\005\133\043\140\062\142\001\002\000\004\064" +
    "\247\001\002\000\004\010\250\001\002\000\004\062\251" +
    "\001\002\000\010\005\133\043\140\062\142\001\002\000" +
    "\004\063\253\001\002\000\004\063\254\001\002\000\004" +
    "\056\255\001\002\000\030\003\107\011\076\023\077\025" +
    "\072\026\111\027\073\035\066\036\112\037\075\043\101" +
    "\057\uffdd\001\002\000\004\057\257\001\002\000\032\003" +
    "\uffa1\011\uffa1\023\uffa1\025\uffa1\026\uffa1\027\uffa1\033\uffa1" +
    "\035\uffa1\036\uffa1\037\uffa1\043\uffa1\057\uffa1\001\002\000" +
    "\004\064\261\001\002\000\004\010\262\001\002\000\004" +
    "\062\263\001\002\000\010\005\133\043\140\062\142\001" +
    "\002\000\004\063\265\001\002\000\004\063\266\001\002" +
    "\000\004\056\267\001\002\000\030\003\107\011\076\023" +
    "\077\025\072\026\111\027\073\035\066\036\112\037\075" +
    "\043\101\057\uffdd\001\002\000\004\057\271\001\002\000" +
    "\032\003\uffa2\011\uffa2\023\uffa2\025\uffa2\026\uffa2\027\uffa2" +
    "\033\uffa2\035\uffa2\036\uffa2\037\uffa2\043\uffa2\057\uffa2\001" +
    "\002\000\006\033\uffe1\057\uffe1\001\002\000\006\033\uffde" +
    "\057\uffde\001\002\000\006\033\uffe4\057\uffe4\001\002\000" +
    "\006\002\ufffc\004\ufffc\001\002\000\032\003\107\011\076" +
    "\023\077\025\072\026\111\027\073\033\uffdd\035\066\036" +
    "\112\037\075\043\101\057\uffdd\001\002\000\006\033\uffdf" +
    "\057\uffdf\001\002\000\032\003\107\011\076\023\077\025" +
    "\072\026\111\027\073\033\uffdd\035\066\036\112\037\075" +
    "\043\101\057\uffdd\001\002\000\006\033\uffe0\057\uffe0\001" +
    "\002\000\006\033\uffe5\057\uffe5\001\002\000\022\005\152" +
    "\015\154\016\163\017\156\031\155\032\161\043\162\062" +
    "\142\001\002\000\004\005\330\001\002\000\022\005\152" +
    "\015\154\016\163\017\156\031\155\032\161\043\162\062" +
    "\142\001\002\000\004\065\325\001\002\000\004\067\310" +
    "\001\002\000\004\062\311\001\002\000\010\005\133\043" +
    "\140\062\142\001\002\000\006\063\314\064\313\001\002" +
    "\000\010\005\133\043\140\062\142\001\002\000\004\053" +
    "\315\001\002\000\022\005\152\015\154\016\163\017\156" +
    "\031\155\032\161\043\162\062\142\001\002\000\004\065" +
    "\317\001\002\000\032\003\uffc1\011\uffc1\023\uffc1\025\uffc1" +
    "\026\uffc1\027\uffc1\033\uffc1\035\uffc1\036\uffc1\037\uffc1\043" +
    "\uffc1\057\uffc1\001\002\000\004\063\321\001\002\000\004" +
    "\053\322\001\002\000\022\005\152\015\154\016\163\017" +
    "\156\031\155\032\161\043\162\062\142\001\002\000\004" +
    "\065\324\001\002\000\032\003\uffbd\011\uffbd\023\uffbd\025" +
    "\uffbd\026\uffbd\027\uffbd\033\uffbd\035\uffbd\036\uffbd\037\uffbd" +
    "\043\uffbd\057\uffbd\001\002\000\032\003\uffbe\011\uffbe\023" +
    "\uffbe\025\uffbe\026\uffbe\027\uffbe\033\uffbe\035\uffbe\036\uffbe" +
    "\037\uffbe\043\uffbe\057\uffbe\001\002\000\004\065\327\001" +
    "\002\000\032\003\uffc0\011\uffc0\023\uffc0\025\uffc0\026\uffc0" +
    "\027\uffc0\033\uffc0\035\uffc0\036\uffc0\037\uffc0\043\uffc0\057" +
    "\uffc0\001\002\000\004\065\331\001\002\000\032\003\uffbf" +
    "\011\uffbf\023\uffbf\025\uffbf\026\uffbf\027\uffbf\033\uffbf\035" +
    "\uffbf\036\uffbf\037\uffbf\043\uffbf\057\uffbf\001\002\000\004" +
    "\065\333\001\002\000\032\003\uffc2\011\uffc2\023\uffc2\025" +
    "\uffc2\026\uffc2\027\uffc2\033\uffc2\035\uffc2\036\uffc2\037\uffc2" +
    "\043\uffc2\057\uffc2\001\002\000\006\033\uffe3\057\uffe3\001" +
    "\002\000\014\005\336\031\340\032\342\034\344\043\337" +
    "\001\002\000\010\044\uff8a\046\uff8a\063\uff8a\001\002\000" +
    "\010\044\uff89\046\uff89\063\uff89\001\002\000\010\044\uff88" +
    "\046\uff88\063\uff88\001\002\000\004\063\353\001\002\000" +
    "\010\044\uff87\046\uff87\063\uff87\001\002\000\010\044\345" +
    "\046\346\063\uff8d\001\002\000\004\063\uff8c\001\002\000" +
    "\012\005\336\031\340\032\342\043\337\001\002\000\014" +
    "\005\336\031\340\032\342\034\344\043\337\001\002\000" +
    "\004\063\uff8b\001\002\000\006\046\351\063\uff8f\001\002" +
    "\000\014\005\336\031\340\032\342\034\344\043\337\001" +
    "\002\000\004\063\uff8e\001\002\000\004\056\354\001\002" +
    "\000\030\003\107\011\076\023\077\025\072\026\111\027" +
    "\073\035\066\036\112\037\075\043\101\057\uffdd\001\002" +
    "\000\004\057\356\001\002\000\036\003\uff96\011\uff96\013" +
    "\360\023\uff96\024\357\025\uff96\026\uff96\027\uff96\033\uff96" +
    "\035\uff96\036\uff96\037\uff96\043\uff96\057\uff96\001\002\000" +
    "\004\056\371\001\002\000\004\062\362\001\002\000\032" +
    "\003\uff99\011\uff99\023\uff99\025\uff99\026\uff99\027\uff99\033" +
    "\uff99\035\uff99\036\uff99\037\uff99\043\uff99\057\uff99\001\002" +
    "\000\014\005\336\031\340\032\342\034\344\043\337\001" +
    "\002\000\004\063\364\001\002\000\004\056\365\001\002" +
    "\000\030\003\107\011\076\023\077\025\072\026\111\027" +
    "\073\035\066\036\112\037\075\043\101\057\uffdd\001\002" +
    "\000\004\057\367\001\002\000\036\003\uff96\011\uff96\013" +
    "\360\023\uff96\024\357\025\uff96\026\uff96\027\uff96\033\uff96" +
    "\035\uff96\036\uff96\037\uff96\043\uff96\057\uff96\001\002\000" +
    "\032\003\uff98\011\uff98\023\uff98\025\uff98\026\uff98\027\uff98" +
    "\033\uff98\035\uff98\036\uff98\037\uff98\043\uff98\057\uff98\001" +
    "\002\000\030\003\107\011\076\023\077\025\072\026\111" +
    "\027\073\035\066\036\112\037\075\043\101\057\uffdd\001" +
    "\002\000\004\057\373\001\002\000\032\003\uff97\011\uff97" +
    "\023\uff97\025\uff97\026\uff97\027\uff97\033\uff97\035\uff97\036" +
    "\uff97\037\uff97\043\uff97\057\uff97\001\002\000\006\060\375" +
    "\066\376\001\002\000\010\005\133\043\140\062\142\001" +
    "\002\000\016\012\020\014\023\020\017\021\022\022\024" +
    "\030\025\001\002\000\010\053\u0102\064\u0101\065\uffc9\001" +
    "\002\000\032\003\uffdc\011\uffdc\023\uffdc\025\uffdc\026\uffdc" +
    "\027\uffdc\033\uffdc\035\uffdc\036\uffdc\037\uffdc\043\uffdc\057" +
    "\uffdc\001\002\000\004\043\u0123\001\002\000\024\005\u0105" +
    "\015\u0108\016\u010f\017\u010a\031\u010b\032\u010d\043\u010e\056" +
    "\u0106\062\142\001\002\000\004\065\u0104\001\002\000\032" +
    "\003\uffd9\011\uffd9\023\uffd9\025\uffd9\026\uffd9\027\uffd9\033" +
    "\uffd9\035\uffd9\036\uffd9\037\uffd9\043\uffd9\057\uffd9\001\002" +
    "\000\014\050\uffa6\051\uffa6\053\uffd3\064\uffd3\065\uffd3\001" +
    "\002\000\024\005\152\015\154\016\163\017\156\031\155" +
    "\032\161\043\162\056\u0116\062\142\001\002\000\014\050" +
    "\uffa5\051\uffa5\053\uffcd\064\uffcd\065\uffcd\001\002\000\010" +
    "\053\uffd2\064\uffd2\065\uffd2\001\002\000\010\053\uffcc\064" +
    "\uffcc\065\uffcc\001\002\000\010\053\uffd0\064\uffd0\065\uffd0" +
    "\001\002\000\010\053\uffcf\064\uffcf\065\uffcf\001\002\000" +
    "\010\053\uffcb\064\uffcb\065\uffcb\001\002\000\010\053\uffce" +
    "\064\uffce\065\uffce\001\002\000\020\050\uffa7\051\uffa7\053" +
    "\uffd5\062\151\064\uffd5\065\uffd5\070\u0111\001\002\000\010" +
    "\053\uffd1\064\uffd1\065\uffd1\001\002\000\010\053\uffca\064" +
    "\uffca\065\uffca\001\002\000\004\067\u0112\001\002\000\004" +
    "\062\u0113\001\002\000\010\005\133\043\140\062\142\001" +
    "\002\000\004\063\u0115\001\002\000\010\053\uffd4\064\uffd4" +
    "\065\uffd4\001\002\000\022\005\152\015\154\016\163\017" +
    "\156\031\155\032\161\043\162\062\142\001\002\000\006" +
    "\057\uffc6\064\u011e\001\002\000\006\057\uffc3\064\u0119\001" +
    "\002\000\022\005\152\015\154\016\163\017\156\031\155" +
    "\032\161\043\162\062\142\001\002\000\004\057\u011b\001" +
    "\002\000\012\053\uffc5\057\uffc5\064\uffc5\065\uffc5\001\002" +
    "\000\006\057\uffc3\064\u0119\001\002\000\004\057\uffc4\001" +
    "\002\000\004\056\u0116\001\002\000\004\057\u0120\001\002" +
    "\000\010\053\uffc8\064\uffc8\065\uffc8\001\002\000\006\057" +
    "\uffc6\064\u011e\001\002\000\004\057\uffc7\001\002\000\006" +
    "\060\u0124\066\u0125\001\002\000\010\005\133\043\140\062" +
    "\142\001\002\000\016\012\020\014\023\020\017\021\022" +
    "\022\024\030\025\001\002\000\010\053\u0102\064\uffc9\065" +
    "\uffc9\001\002\000\010\053\u0102\064\u0101\065\uffc9\001\002" +
    "\000\032\003\uffd8\011\uffd8\023\uffd8\025\uffd8\026\uffd8\027" +
    "\uffd8\033\uffd8\035\uffd8\036\uffd8\037\uffd8\043\uffd8\057\uffd8" +
    "\001\002\000\004\061\u012a\001\002\000\006\060\u012b\066" +
    "\u012c\001\002\000\010\005\133\043\140\062\142\001\002" +
    "\000\016\012\020\014\023\020\017\021\022\022\024\030" +
    "\025\001\002\000\010\053\u0102\064\uffc9\065\uffc9\001\002" +
    "\000\010\053\u0102\064\u0101\065\uffc9\001\002\000\032\003" +
    "\uffd7\011\uffd7\023\uffd7\025\uffd7\026\uffd7\027\uffd7\033\uffd7" +
    "\035\uffd7\036\uffd7\037\uffd7\043\uffd7\057\uffd7\001\002\000" +
    "\004\061\u0131\001\002\000\004\066\u0132\001\002\000\016" +
    "\012\020\014\023\020\017\021\022\022\024\030\025\001" +
    "\002\000\010\053\u0102\064\uffc9\065\uffc9\001\002\000\010" +
    "\053\u0102\064\u0101\065\uffc9\001\002\000\032\003\uffd6\011" +
    "\uffd6\023\uffd6\025\uffd6\026\uffd6\027\uffd6\033\uffd6\035\uffd6" +
    "\036\uffd6\037\uffd6\043\uffd6\057\uffd6\001\002\000\004\061" +
    "\u0137\001\002\000\006\060\u0138\066\u0139\001\002\000\010" +
    "\005\133\043\140\062\142\001\002\000\016\012\020\014" +
    "\023\020\017\021\022\022\024\030\025\001\002\000\010" +
    "\053\u0102\064\uffc9\065\uffc9\001\002\000\010\053\u0102\064" +
    "\u0101\065\uffc9\001\002\000\032\003\uffdb\011\uffdb\023\uffdb" +
    "\025\uffdb\026\uffdb\027\uffdb\033\uffdb\035\uffdb\036\uffdb\037" +
    "\uffdb\043\uffdb\057\uffdb\001\002\000\004\061\u013e\001\002" +
    "\000\004\066\u013f\001\002\000\016\012\020\014\023\020" +
    "\017\021\022\022\024\030\025\001\002\000\010\053\u0102" +
    "\064\uffc9\065\uffc9\001\002\000\010\053\u0102\064\u0101\065" +
    "\uffc9\001\002\000\032\003\uffda\011\uffda\023\uffda\025\uffda" +
    "\026\uffda\027\uffda\033\uffda\035\uffda\036\uffda\037\uffda\043" +
    "\uffda\057\uffda\001\002\000\004\043\u0144\001\002\000\004" +
    "\063\u0145\001\002\000\004\056\u0146\001\002\000\004\041" +
    "\u0147\001\002\000\022\005\152\015\154\016\163\017\156" +
    "\031\155\032\161\043\162\062\142\001\002\000\004\057" +
    "\u0149\001\002\000\032\003\uff9e\011\uff9e\023\uff9e\025\uff9e" +
    "\026\uff9e\027\uff9e\033\uff9e\035\uff9e\036\uff9e\037\uff9e\043" +
    "\uff9e\057\uff9e\001\002\000\004\066\u014b\001\002\000\030" +
    "\003\107\011\076\023\077\025\072\026\111\027\073\033" +
    "\uffdd\035\066\036\112\037\075\043\101\001\002\000\004" +
    "\033\u014e\001\002\000\004\057\uff9d\001\002\000\004\065" +
    "\u014f\001\002\000\010\041\u0147\042\u0150\057\uff9a\001\002" +
    "\000\004\066\u0152\001\002\000\004\057\uff9c\001\002\000" +
    "\030\003\107\011\076\023\077\025\072\026\111\027\073" +
    "\035\066\036\112\037\075\043\101\057\uffdd\001\002\000" +
    "\004\057\uff9b\001\002\000\006\033\uffe6\057\uffe6\001\002" +
    "\000\004\065\uff86\001\002\000\014\005\336\031\340\032" +
    "\342\034\344\043\337\001\002\000\004\063\u0158\001\002" +
    "\000\004\056\u0159\001\002\000\030\003\107\011\076\023" +
    "\077\025\072\026\111\027\073\035\066\036\112\037\075" +
    "\043\101\057\uffdd\001\002\000\004\057\u015b\001\002\000" +
    "\032\003\uffa3\011\uffa3\023\uffa3\025\uffa3\026\uffa3\027\uffa3" +
    "\033\uffa3\035\uffa3\036\uffa3\037\uffa3\043\uffa3\057\uffa3\001" +
    "\002\000\006\033\uffe7\057\uffe7\001\002\000\004\043\u015e" +
    "\001\002\000\004\064\u015f\001\002\000\016\012\020\014" +
    "\023\020\017\021\022\022\024\030\025\001\002\000\004" +
    "\063\u0161\001\002\000\004\065\uffec\001\002\000\032\003" +
    "\107\011\076\023\077\025\072\026\111\027\073\033\uffdd" +
    "\035\066\036\112\037\075\043\101\057\uffdd\001\002\000" +
    "\006\033\uffe2\057\uffe2\001\002\000\030\003\107\011\076" +
    "\023\077\025\072\026\111\027\073\035\066\036\112\037" +
    "\075\043\101\057\uffdd\001\002\000\004\057\u0166\001\002" +
    "\000\006\002\ufffd\004\ufffd\001\002\000\006\002\ufffe\004" +
    "\005\001\002\000\004\002\000\001\002\000\004\002\uffff" +
    "\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0167\000\006\002\005\004\003\001\001\000\006\003" +
    "\u0167\004\u0166\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\005\011\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\045\020\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\006\026\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\045\033\001" +
    "\001\000\004\006\034\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\045\040\001\001\000" +
    "\004\006\041\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\045\044\001\001\000\004\006\045\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\045\051\001\001\000\004\006\052\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\045\055\001\001\000\004" +
    "\006\056\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\045\061\001\001\000\002\001\001\000\002\001\001" +
    "\000\032\007\102\010\070\011\067\012\104\013\066\017" +
    "\107\027\073\030\101\031\105\034\077\036\064\044\103" +
    "\001\001\000\002\001\001\000\002\001\001\000\032\007" +
    "\102\010\070\011\067\012\u015b\013\066\017\107\027\073" +
    "\030\101\031\105\034\077\036\064\044\103\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\016" +
    "\020\u0154\021\163\022\134\024\140\026\135\036\152\001" +
    "\001\000\032\007\102\010\070\011\067\012\u0153\013\066" +
    "\017\107\027\073\030\101\031\105\034\077\036\064\044" +
    "\103\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\032\007\102\010\070\011\067\012\333\013" +
    "\066\017\107\027\073\030\101\031\105\034\077\036\064" +
    "\044\103\001\001\000\002\001\001\000\032\007\102\010" +
    "\070\011\067\012\301\013\066\017\107\027\073\030\101" +
    "\031\105\034\077\036\064\044\103\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\032\007\102" +
    "\010\070\011\067\012\273\013\066\017\107\027\073\030" +
    "\101\031\105\034\077\036\064\044\103\001\001\000\002" +
    "\001\001\000\032\007\102\010\070\011\067\012\271\013" +
    "\066\017\107\027\073\030\101\031\105\034\077\036\064" +
    "\044\103\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\016\021\142\022\134" +
    "\024\140\026\135\036\133\051\136\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\023\230" +
    "\025\227\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\014\021\145\022\134\024\140\026\135" +
    "\036\146\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\020\020\156\021\163\022\134\024\140\026" +
    "\135\036\152\037\157\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\040\176\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\016\021\142" +
    "\022\134\024\140\026\135\036\133\051\167\001\001\000" +
    "\002\001\001\000\016\021\142\022\134\024\140\026\135" +
    "\036\133\051\172\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\016\020\177" +
    "\021\163\022\134\024\140\026\135\036\152\001\001\000" +
    "\002\001\001\000\004\040\200\001\001\000\002\001\001" +
    "\000\016\021\142\022\134\024\140\026\135\036\133\051" +
    "\215\001\001\000\016\021\142\022\134\024\140\026\135" +
    "\036\133\051\203\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\016\021\142\022\134\024\140" +
    "\026\135\036\133\051\207\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\032\007\102\010\070" +
    "\011\067\012\213\013\066\017\107\027\073\030\101\031" +
    "\105\034\077\036\064\044\103\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\016\021\142\022\134\024\140\026\135" +
    "\036\133\051\221\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\032\007\102\010\070\011\067" +
    "\012\225\013\066\017\107\027\073\030\101\031\105\034" +
    "\077\036\064\044\103\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\026" +
    "\236\036\146\001\001\000\006\026\233\036\146\001\001" +
    "\000\006\023\235\025\234\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\023\240\025\237\001\001\000\002" +
    "\001\001\000\002\001\001\000\016\021\142\022\134\024" +
    "\140\026\135\036\133\051\242\001\001\000\002\001\001" +
    "\000\016\021\142\022\134\024\140\026\135\036\133\051" +
    "\257\001\001\000\016\021\142\022\134\024\140\026\135" +
    "\036\133\051\245\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\016\021\142\022\134\024\140" +
    "\026\135\036\133\051\251\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\032\007\102\010\070" +
    "\011\067\012\255\013\066\017\107\027\073\030\101\031" +
    "\105\034\077\036\064\044\103\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\016\021\142\022\134\024\140\026\135" +
    "\036\133\051\263\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\032\007\102\010\070\011\067" +
    "\012\267\013\066\017\107\027\073\030\101\031\105\034" +
    "\077\036\064\044\103\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\032\007\102\010\070\011\067" +
    "\012\276\013\066\017\107\027\073\030\101\031\105\034" +
    "\077\036\064\044\103\001\001\000\002\001\001\000\032" +
    "\007\102\010\070\011\067\012\300\013\066\017\107\027" +
    "\073\030\101\031\105\034\077\036\064\044\103\001\001" +
    "\000\002\001\001\000\002\001\001\000\016\020\331\021" +
    "\163\022\134\024\140\026\135\036\152\001\001\000\002" +
    "\001\001\000\016\020\325\021\163\022\134\024\140\026" +
    "\135\036\152\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\016\021\142\022\134\024\140\026" +
    "\135\036\133\051\311\001\001\000\002\001\001\000\016" +
    "\021\142\022\134\024\140\026\135\036\133\051\317\001" +
    "\001\000\002\001\001\000\016\020\315\021\163\022\134" +
    "\024\140\026\135\036\152\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\016" +
    "\020\322\021\163\022\134\024\140\026\135\036\152\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\042\340\043\342\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\043\347\001\001\000\006\042\346\043\342\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\042\351\043" +
    "\342\001\001\000\002\001\001\000\002\001\001\000\032" +
    "\007\102\010\070\011\067\012\354\013\066\017\107\027" +
    "\073\030\101\031\105\034\077\036\064\044\103\001\001" +
    "\000\002\001\001\000\004\035\360\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\042\362" +
    "\043\342\001\001\000\002\001\001\000\002\001\001\000" +
    "\032\007\102\010\070\011\067\012\365\013\066\017\107" +
    "\027\073\030\101\031\105\034\077\036\064\044\103\001" +
    "\001\000\002\001\001\000\004\035\367\001\001\000\002" +
    "\001\001\000\032\007\102\010\070\011\067\012\371\013" +
    "\066\017\107\027\073\030\101\031\105\034\077\036\064" +
    "\044\103\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\016\021\142\022\134\024\140\026\135" +
    "\036\133\051\u0135\001\001\000\004\045\376\001\001\000" +
    "\006\014\377\015\u0102\001\001\000\002\001\001\000\002" +
    "\001\001\000\020\021\u010f\022\134\024\140\026\135\036" +
    "\u0106\046\u0108\047\u010b\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\020\020\u0117\021\163\022" +
    "\134\024\140\026\135\036\152\046\u0116\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\016\021\142\022\134" +
    "\024\140\026\135\036\133\051\u0113\001\001\000\002\001" +
    "\001\000\002\001\001\000\016\020\u0117\021\163\022\134" +
    "\024\140\026\135\036\152\001\001\000\004\050\u011e\001" +
    "\001\000\004\016\u0119\001\001\000\016\020\u011b\021\163" +
    "\022\134\024\140\026\135\036\152\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\016\u011c\001\001\000\002" +
    "\001\001\000\004\046\u0120\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\050\u0121\001\001\000\002\001\001" +
    "\000\002\001\001\000\016\021\142\022\134\024\140\026" +
    "\135\036\133\051\u0128\001\001\000\004\045\u0125\001\001" +
    "\000\004\015\u0126\001\001\000\006\014\u0127\015\u0102\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\016\021\142\022\134\024\140\026\135\036\133\051" +
    "\u012f\001\001\000\004\045\u012c\001\001\000\004\015\u012d" +
    "\001\001\000\006\014\u012e\015\u0102\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\045\u0132" +
    "\001\001\000\004\015\u0133\001\001\000\006\014\u0134\015" +
    "\u0102\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\016\021\142\022\134\024\140\026\135\036" +
    "\133\051\u013c\001\001\000\004\045\u0139\001\001\000\004" +
    "\015\u013a\001\001\000\006\014\u013b\015\u0102\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\045\u013f\001\001\000\004\015\u0140\001\001\000\006\014" +
    "\u0141\015\u0102\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\032\u0147\001" +
    "\001\000\016\020\u0149\021\163\022\134\024\140\026\135" +
    "\036\152\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\032\007\102\010\070\011\067\012\u014b" +
    "\013\066\017\107\027\073\030\101\031\105\034\077\036" +
    "\064\044\103\001\001\000\004\033\u014c\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\032\u0150\001\001\000" +
    "\002\001\001\000\002\001\001\000\032\007\102\010\070" +
    "\011\067\012\u0152\013\066\017\107\027\073\030\101\031" +
    "\105\034\077\036\064\044\103\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\042\u0156\043" +
    "\342\001\001\000\002\001\001\000\002\001\001\000\032" +
    "\007\102\010\070\011\067\012\u0159\013\066\017\107\027" +
    "\073\030\101\031\105\034\077\036\064\044\103\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\045\u015f\001\001" +
    "\000\002\001\001\000\002\001\001\000\032\007\102\010" +
    "\070\011\067\012\u0162\013\066\017\107\027\073\030\101" +
    "\031\105\034\077\036\064\044\103\001\001\000\002\001" +
    "\001\000\032\007\102\010\070\011\067\012\u0164\013\066" +
    "\017\107\027\073\030\101\031\105\034\077\036\064\044" +
    "\103\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\003\u0168\004\u0166\001\001\000\002\001\001\000\002\001" +
    "\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



   ArrayList<String> errores = new ArrayList();
   Node Tree  = new Node();
   int cont=0;
   int contMain=0;


    public void report_error(String message,Object info){
                StringBuffer m=new StringBuffer("Error ");
                if(info instanceof Symbol){
                        Symbol s=((Symbol)info);
                      
                        if(s.left>=0){
                                m.append("en linea "+(s.right+1));
                        if(s.right>=0)
                                m.append(", columna "+(s.left+1));
                        }
                }
                m.append(": "+message);
                System.err.println(m);
                errores.add(m+"");

                

        }

        public void report_fatal_error(String message, Object info){
                report_error("fatal"+ message, info);
                //System.exit(1);
        }

        public void unrecovered_syntax_error(Symbol cur_token){
               // System.out.println(cur_token.toString());
                System.err.println("CRITICO: At line "+(cur_token.right)+", column "+cur_token.left);
                errores.add("CRITICO: At line "+(cur_token.right)+", column "+cur_token.left);
                //System.exit(1);
        }

        protected void report_expected_token_ids() {
	        List<Integer> ids = expected_token_ids();
	        LinkedList<String> list = new LinkedList<String>();
	        for (Integer expected : ids)
		        list.add(symbl_name_from_id(expected));
                System.err.println("Se esperaba cualquiera de estas: "+list);
                errores.add("Se esperaba cualquiera de estas: "+list);
	}
    



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {


    
    

  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= inicio EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Node start_val = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // inicio ::= dec_funcion dec_gen_fun 
            {
              Node RESULT =null;
		int dgleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dgright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Node dg = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int dgfleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dgfright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Node dgf = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    System.err.println("Entra a inicio");
    parser.cont++;
    Node node = new Node();
    node.setEtiqueta("INICIO");
    node.setID(parser.cont);
    node.addHijos((Node) dg);
    node.addHijos((Node) dgf);
    
    parser.Tree = node;
    RESULT = node; 
    
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // dec_gen_fun ::= dec_funcion dec_gen_fun 
            {
              Node RESULT =null;
		int dfleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dfright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Node df = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int dgfleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dgfright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Node dgf = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                System.err.println("Entra a dec_gen_fun");
                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("dec_gen_fun");
                node.setID(parser.cont);
                node.addHijos((Node) df);
                node.addHijos((Node) dgf);  
                
                RESULT = node;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("dec_gen_fun",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // dec_gen_fun ::= 
            {
              Node RESULT =null;
		
                parser.cont++;
                Node nodo = new Node();
				nodo.setEtiqueta("vacio");
				nodo.setID(parser.cont);
				
                RESULT = nodo;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("dec_gen_fun",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // dec_funcion ::= FUNCTION ID L_PAR parametros R_PAR COLON tipo L_KEY dec_general R_KEY 
            {
              Node RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int partsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int partsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Node parts = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int tipleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int tipright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Node tip = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int deGleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int deGright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Node deG = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
               System.err.println("Entra a dec_funcion");
                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("dec_funcion");
                node.setID(parser.cont);

                parser.cont++;
                Node identificador =new Node();
                identificador.setEtiqueta("ID");
                identificador.setID(parser.cont);
                identificador.setValor(id);
                node.addHijos(identificador);
                node.addHijos((Node) parts);
                node.addHijos((Node) tip);
                node.addHijos((Node) deG);

                
                RESULT = node;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("dec_funcion",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // dec_funcion ::= FUNCTION ID L_PAR parametros R_PAR COLON MAIN L_KEY dec_general R_KEY 
            {
              Node RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int partsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int partsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Node parts = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int deGleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int deGright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Node deG = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
               
                System.err.println("Entra a dec_funcion");
            
                parser.contMain++;
                if(parser.contMain>1){
                    parser.errores.add("Error! Se ha encontrado otra declaracion de main.");
                }
               
                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("dec_Funcion");
                node.setID(parser.cont);

                parser.cont++;
                Node identificador =new Node();
                identificador.setEtiqueta("ID");
                identificador.setID(parser.cont);
                identificador.setValor(id);
                parser.cont++;
                Node main =new Node();
                main.setEtiqueta("Main");
                main.setID(parser.cont);
                main.setValor("Main");

                
                node.addHijos(identificador);
                node.addHijos((Node) parts);
                node.addHijos(main);
                node.addHijos((Node) deG);
                RESULT = node;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("dec_funcion",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // parametros ::= VARIABLE ID COLON tipo nuevo_parametro 
            {
              Node RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int tipleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tipright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Node tip = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int nuPleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nuPright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Node nuP = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                System.err.println("Entra a parametros 1");

                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("parametros");
                node.setID(parser.cont);

                parser.cont++;
                Node identificador =new Node();
                identificador.setEtiqueta("ID");
                identificador.setID(parser.cont);
                identificador.setValor(id);
                node.addHijos(identificador);
                node.addHijos((Node) tip);
                node.addHijos((Node) nuP);
                
                RESULT = node;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // parametros ::= VARIABLE ID COLON tipo 
            {
              Node RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int tipleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tipright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Node tip = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                System.err.println("Entra a parametros 1");

                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("parametros");
                node.setID(parser.cont);

                parser.cont++;
                Node identificador =new Node();
                identificador.setEtiqueta("ID");
                identificador.setID(parser.cont);
                identificador.setValor(id);
                node.addHijos(identificador);
                node.addHijos((Node) tip);

                RESULT = node;
               
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // parametros ::= VARIABLE ID L_BRACKET R_BRACKET COLON tipo nuevo_parametro 
            {
              Node RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int tipleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tipright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Node tip = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int nuPleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nuPright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Node nuP = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                System.err.println("Entra a parametros 1");

                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("parametros");
                node.setID(parser.cont);

                parser.cont++;
                Node identificador =new Node();
                identificador.setEtiqueta("ID");
                identificador.setID(parser.cont);
                identificador.setValor(id);
                node.addHijos(identificador);
                node.addHijos((Node) tip);
                node.addHijos((Node) nuP);
                
                RESULT = node;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // parametros ::= VARIABLE ID L_BRACKET R_BRACKET COLON tipo 
            {
              Node RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int tipleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tipright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Node tip = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                System.err.println("Entra a parametros 1");

                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("parametros");
                node.setID(parser.cont);

                parser.cont++;
                Node identificador =new Node();
                identificador.setEtiqueta("ID");
                identificador.setID(parser.cont);
                identificador.setValor(id);
                node.addHijos(identificador);
                node.addHijos((Node) tip);

                RESULT = node;
               
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // parametros ::= VARIABLE ID L_BRACKET R_BRACKET L_BRACKET R_BRACKET COLON tipo nuevo_parametro 
            {
              Node RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int tipleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tipright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Node tip = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int nuPleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nuPright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Node nuP = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                System.err.println("Entra a parametros 1");

                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("parametros");
                node.setID(parser.cont);

                parser.cont++;
                Node identificador =new Node();
                identificador.setEtiqueta("ID");
                identificador.setID(parser.cont);
                identificador.setValor(id);
                node.addHijos(identificador);
                node.addHijos((Node) tip);
                node.addHijos((Node) nuP);
                
                RESULT = node;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // parametros ::= VARIABLE ID L_BRACKET R_BRACKET L_BRACKET R_BRACKET COLON tipo 
            {
              Node RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int tipleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tipright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Node tip = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                System.err.println("Entra a parametros 1");

                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("parametros");
                node.setID(parser.cont);

                parser.cont++;
                Node identificador =new Node();
                identificador.setEtiqueta("ID");
                identificador.setID(parser.cont);
                identificador.setValor(id);
                node.addHijos(identificador);
                node.addHijos((Node) tip);

                RESULT = node;
               
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // parametros ::= 
            {
              Node RESULT =null;
		
                System.err.println("Entra a vacio");

                parser.cont++;
                Node nodo = new Node();
				nodo.setEtiqueta("vacio");
				nodo.setID(parser.cont);
                RESULT = nodo;
               
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // nuevo_parametro ::= COMMA VARIABLE ID COLON tipo nuevo_parametro 
            {
              Node RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int tipleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tipright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Node tip = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int nuPleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nuPright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Node nuP = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                System.err.println("Entra a nuevo_parametro 1");

                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("nuevo_parametro");
                node.setID(parser.cont);

                parser.cont++;
                Node identificador =new Node();
                identificador.setEtiqueta("ID");
                identificador.setID(parser.cont);
                identificador.setValor(id);
                node.addHijos(identificador);
                node.addHijos((Node) tip);
                node.addHijos((Node) nuP);

                RESULT = node;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("nuevo_parametro",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // nuevo_parametro ::= COMMA VARIABLE ID COLON tipo 
            {
              Node RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int tipleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tipright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Node tip = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                System.err.println("Entra a nuevo_parametro 2");
                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("nuevo_parametro");
                node.setID(parser.cont);

                parser.cont++;
                Node identificador =new Node();
                identificador.setEtiqueta("ID");
                identificador.setID(parser.cont);
                identificador.setValor(id);
                node.addHijos(identificador);
                node.addHijos((Node) tip);
                RESULT = node;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("nuevo_parametro",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // nuevo_parametro ::= COMMA VARIABLE ID L_BRACKET R_BRACKET COLON tipo nuevo_parametro 
            {
              Node RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int tipleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tipright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Node tip = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int nuPleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nuPright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Node nuP = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                System.err.println("Entra a nuevo_parametro 1");

                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("nuevo_parametro");
                node.setID(parser.cont);

                parser.cont++;
                Node identificador =new Node();
                identificador.setEtiqueta("ID");
                identificador.setID(parser.cont);
                identificador.setValor(id);
                node.addHijos(identificador);
                node.addHijos((Node) tip);
                node.addHijos((Node) nuP);

                RESULT = node;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("nuevo_parametro",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // nuevo_parametro ::= COMMA VARIABLE ID L_BRACKET R_BRACKET COLON tipo 
            {
              Node RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int tipleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tipright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Node tip = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                System.err.println("Entra a nuevo_parametro 2");
                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("nuevo_parametro");
                node.setID(parser.cont);

                parser.cont++;
                Node identificador =new Node();
                identificador.setEtiqueta("ID");
                identificador.setID(parser.cont);
                identificador.setValor(id);
                node.addHijos(identificador);
                node.addHijos((Node) tip);
                RESULT = node;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("nuevo_parametro",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // nuevo_parametro ::= COMMA VARIABLE ID L_BRACKET R_BRACKET L_BRACKET R_BRACKET COLON tipo nuevo_parametro 
            {
              Node RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int tipleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tipright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Node tip = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int nuPleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nuPright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Node nuP = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                System.err.println("Entra a nuevo_parametro 1");

                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("nuevo_parametro");
                node.setID(parser.cont);

                parser.cont++;
                Node identificador =new Node();
                identificador.setEtiqueta("ID");
                identificador.setID(parser.cont);
                identificador.setValor(id);
                node.addHijos(identificador);
                node.addHijos((Node) tip);
                node.addHijos((Node) nuP);

                RESULT = node;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("nuevo_parametro",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // nuevo_parametro ::= COMMA VARIABLE ID L_BRACKET R_BRACKET L_BRACKET R_BRACKET COLON tipo 
            {
              Node RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int tipleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tipright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Node tip = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                System.err.println("Entra a nuevo_parametro 2");
                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("nuevo_parametro");
                node.setID(parser.cont);

                parser.cont++;
                Node identificador =new Node();
                identificador.setEtiqueta("ID");
                identificador.setID(parser.cont);
                identificador.setValor(id);
                node.addHijos(identificador);
                node.addHijos((Node) tip);
                RESULT = node;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("nuevo_parametro",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // func_lenguaje ::= func_input 
            {
              Node RESULT =null;
		int fuIleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fuIright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Node fuI = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    System.err.println("Entra a func_lenguaje 1");
                    parser.cont++;
                    Node node = new Node();
                    node.setEtiqueta("func_lenguaje");
                    node.setID(parser.cont);
                    node.addHijos((Node) fuI);
                    RESULT = node;
                  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("func_lenguaje",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // func_lenguaje ::= func_output 
            {
              Node RESULT =null;
		int fuOleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fuOright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Node fuO = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    System.err.println("Entra a func_lenguaje 2");
                    parser.cont++;
                    Node node = new Node();
                    node.setEtiqueta("func_lenguaje");
                    node.setID(parser.cont);
                    node.addHijos((Node) fuO);
                    RESULT = node;
                  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("func_lenguaje",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // func_input ::= INPUT L_PAR ID COMMA tipo R_PAR 
            {
              Node RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int tipleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tipright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Node tip = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                System.err.println("Entra a func_input");
                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("func_input");
                node.setID(parser.cont);
                parser.cont++;
                Node identificador =new Node();
                identificador.setEtiqueta("ID");
                identificador.setID(parser.cont);
                identificador.setValor(id);
                node.addHijos(identificador);
                node.addHijos((Node) tip);
                RESULT = node;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("func_input",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // func_output ::= OUTPUT L_PAR CONSTSTRING R_PAR 
            {
              Node RESULT =null;
		int csleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int csright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String cs = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                System.err.println("Entra a func_output 1");
                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("func_output");
                node.setID(parser.cont);
                parser.cont++;
                Node const_string =new Node();
                const_string.setEtiqueta("const_string");
                const_string.setID(parser.cont);
                String temp = cs.replaceAll("\"", "");

                const_string.setValor(temp);
                node.addHijos(const_string);
                RESULT = node;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("func_output",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // func_output ::= OUTPUT L_PAR CONSTCHAR R_PAR 
            {
              Node RESULT =null;
		int csleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int csright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String cs = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                System.err.println("Entra a func_output 1");
                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("func_output");
                node.setID(parser.cont);
                parser.cont++;
                Node const_string =new Node();
                const_string.setEtiqueta("const_char");
                const_string.setID(parser.cont);
                String temp = cs.replaceAll("\'", "");

                const_string.setValor(temp);
                node.addHijos(const_string);
                RESULT = node;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("func_output",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // func_output ::= OUTPUT L_PAR NUM R_PAR 
            {
              Node RESULT =null;
		int nmleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int nmright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String nm = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                System.err.println("Entra a func_output 2");
                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("func_output");
                node.setID(parser.cont);

                parser.cont++;
                Node num =new Node();
                num.setEtiqueta("Num");
                num.setID(parser.cont);
                num.setValor(nm);
                node.addHijos(num);
                RESULT = node;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("func_output",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // func_output ::= OUTPUT L_PAR ID R_PAR 
            {
              Node RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                System.err.println("Entra a func_output 3");
                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("func_output");
                node.setID(parser.cont);

                parser.cont++;
                Node identificador =new Node();
                identificador.setEtiqueta("ID");
                identificador.setID(parser.cont);
                identificador.setValor(id);
                node.addHijos(identificador);
                RESULT = node;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("func_output",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // dec_general ::= dec_variable dec_general 
            {
              Node RESULT =null;
		int dvaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dvaright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Node dva = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int dgleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dgright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Node dg = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                System.err.println("Entra a dec_general de vairable");
                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("dec_general");
                node.setID(parser.cont);
                node.addHijos((Node) dva);
                node.addHijos((Node) dg);
                RESULT = node;
               
              CUP$parser$result = parser.getSymbolFactory().newSymbol("dec_general",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // dec_general ::= dec_while dec_general 
            {
              Node RESULT =null;
		int dwleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dwright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Node dw = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int dgleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dgright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Node dg = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                System.err.println("Entra a dec_general de while");
                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("dec_general");
                node.setID(parser.cont);
                node.addHijos((Node) dw);
                node.addHijos((Node) dg);
                RESULT = node;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("dec_general",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // dec_general ::= dec_for dec_general 
            {
              Node RESULT =null;
		int dfleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dfright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Node df = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int dgleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dgright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Node dg = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                System.err.println("Entra a dec_general de for");
                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("dec_general");
                node.setID(parser.cont);
                node.addHijos((Node) df);
                node.addHijos((Node) dg);
                RESULT = node;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("dec_general",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // dec_general ::= dec_switch dec_general 
            {
              Node RESULT =null;
		int dsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Node ds = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int dgleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dgright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Node dg = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                System.err.println("Entra a dec_general de switch");
                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("dec_general");
                node.setID(parser.cont);
                node.addHijos((Node) ds);
                node.addHijos((Node) dg);
                RESULT = node;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("dec_general",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // dec_general ::= dec_if dec_general 
            {
              Node RESULT =null;
		int dileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int diright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Node di = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int dgleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dgright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Node dg = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
               System.err.println("Entra a dec_general de if");
                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("dec_general");
                node.setID(parser.cont);
                node.addHijos((Node) di);
                node.addHijos((Node) dg);
                RESULT = node;
               
              CUP$parser$result = parser.getSymbolFactory().newSymbol("dec_general",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // dec_general ::= dec_llamada_funcion SEMICOLON dec_general 
            {
              Node RESULT =null;
		int dlfleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int dlfright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Node dlf = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int dgleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dgright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Node dg = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                System.err.println("Entra a dec_general de llamada_funcion");
                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("dec_general");
                node.setID(parser.cont);
                node.addHijos((Node) dlf);
                node.addHijos((Node) dg);
                RESULT = node;
               
              CUP$parser$result = parser.getSymbolFactory().newSymbol("dec_general",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // dec_general ::= dec_var_inst dec_general 
            {
              Node RESULT =null;
		int dvileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dviright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Node dvi = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int dgleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dgright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Node dg = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                System.err.println("Entra a dec_general de dec_var_inst");
                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("dec_general");
                node.setID(parser.cont);
                node.addHijos((Node) dvi);
                node.addHijos((Node) dg);
                RESULT = node;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("dec_general",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // dec_general ::= func_lenguaje SEMICOLON dec_general 
            {
              Node RESULT =null;
		int flleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int flright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Node fl = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int dgleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dgright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Node dg = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                System.err.println("Entra a dec_general de func_lenguaje");
                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("dec_general");
                node.setID(parser.cont);
                node.addHijos((Node) fl);
                node.addHijos((Node) dg);
                RESULT = node;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("dec_general",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // dec_general ::= dec_return SEMICOLON dec_general 
            {
              Node RESULT =null;
		int drleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int drright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Node dr = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int dgleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dgright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Node dg = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                System.err.println("Entra a dec_general de dec_return");
                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("dec_general");
                node.setID(parser.cont);
                node.addHijos((Node) dr);
                node.addHijos((Node) dg);
                RESULT = node;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("dec_general",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // dec_general ::= error R_KEY 
            {
              Node RESULT =null;
		
                System.err.println("Entra a dec_general nos vamos para el error ");
                Node node = new Node();
                RESULT = node;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("dec_general",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // dec_general ::= 
            {
              Node RESULT =null;
		
                System.err.println("Entra a dec_general a vacio");
                parser.cont++;
                Node nodo = new Node();
				nodo.setEtiqueta("vacio");
				nodo.setID(parser.cont);
                RESULT = nodo;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("dec_general",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // dec_variable ::= VARIABLE ID COLON tipo dec_var 
            {
              Node RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int tipleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tipright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Node tip = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int dvleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dvright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Node dv = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("dec_variable");
                node.setID(parser.cont);

                parser.cont++;
                Node identificador =new Node();
                identificador.setEtiqueta("ID");
                identificador.setID(parser.cont);
                identificador.setValor(id);
                node.addHijos(identificador);
                node.addHijos((Node) tip);
                node.addHijos((Node) dv);
                RESULT = node;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("dec_variable",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // dec_variable ::= VARIABLE ID L_BRACKET val_posicion R_BRACKET COLON tipo dec_inst dec_var 
            {
              Node RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int vpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int vpright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Node vp = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int tipleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tipright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Node tip = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int dileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int diright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Node di = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int dvleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dvright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Node dv = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("dec_variable");
                node.setID(parser.cont);

                parser.cont++;
                Node identificador =new Node();
                identificador.setEtiqueta("ID");
                identificador.setID(parser.cont);
                identificador.setValor(id);
                node.addHijos(identificador);
                node.addHijos((Node) vp);
                node.addHijos((Node) tip);
                node.addHijos((Node) di);
                node.addHijos((Node) dv);
                RESULT = node;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("dec_variable",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // dec_variable ::= VARIABLE ID L_BRACKET val_posicion R_BRACKET L_BRACKET val_posicion R_BRACKET COLON tipo dec_inst dec_var 
            {
              Node RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-10)).value;
		int vp1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int vp1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		Node vp1 = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int vp2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int vp2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Node vp2 = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int tipleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tipright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Node tip = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int dileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int diright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Node di = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int dvleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dvright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Node dv = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("dec_variable");
                node.setID(parser.cont);

                parser.cont++;
                Node identificador =new Node();
                identificador.setEtiqueta("ID");
                identificador.setID(parser.cont);
                identificador.setValor(id);
                node.addHijos(identificador);
                node.addHijos((Node) vp1);
                node.addHijos((Node) vp2);
                node.addHijos((Node) tip);
                node.addHijos((Node) di);
                node.addHijos((Node) dv);
                RESULT = node;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("dec_variable",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // dec_var ::= dec_inst SEMICOLON 
            {
              Node RESULT =null;
		int dileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int diright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Node di = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("dec_var");
                node.setID(parser.cont);
                node.addHijos((Node) di);
                RESULT = node;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("dec_var",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // dec_var ::= COMMA ID COLON tipo dec_inst dec_var 
            {
              Node RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int tipleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tipright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Node tip = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int dileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int diright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Node di = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int dvleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dvright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Node dv = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("dec_var");
                node.setID(parser.cont);

                parser.cont++;
                Node identificador =new Node();
                identificador.setEtiqueta("ID");
                identificador.setID(parser.cont);
                identificador.setValor(id);
                node.addHijos(identificador);
                node.addHijos((Node) tip);
                node.addHijos((Node) di);
                node.addHijos((Node) dv);
                RESULT = node;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("dec_var",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // dec_var ::= COMMA ID L_BRACKET val_posicion R_BRACKET COLON tipo dec_inst dec_var 
            {
              Node RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int vpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int vpright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Node vp = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int tipleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tipright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Node tip = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int dileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int diright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Node di = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int dvleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dvright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Node dv = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("dec_var");
                node.setID(parser.cont);

                parser.cont++;
                Node identificador =new Node();
                identificador.setEtiqueta("ID");
                identificador.setID(parser.cont);
                identificador.setValor(id);
                node.addHijos(identificador);
                node.addHijos((Node) vp);
                node.addHijos((Node) tip);
                node.addHijos((Node) di);
                node.addHijos((Node) dv);
                RESULT = node;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("dec_var",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // dec_var ::= COMMA ID L_BRACKET val_posicion R_BRACKET L_BRACKET val_posicion R_BRACKET COLON tipo dec_inst dec_var 
            {
              Node RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-10)).value;
		int vp1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int vp1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		Node vp1 = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int vp2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int vp2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Node vp2 = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int tipleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tipright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Node tip = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int dileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int diright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Node di = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int dvleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dvright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Node dv = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("dec_var");
                node.setID(parser.cont);

                parser.cont++;
                Node identificador =new Node();
                identificador.setEtiqueta("ID");
                identificador.setID(parser.cont);
                identificador.setValor(id);
                node.addHijos(identificador);
                node.addHijos((Node) vp1);
                node.addHijos((Node) vp2);
                node.addHijos((Node) tip);
                node.addHijos((Node) di);
                node.addHijos((Node) dv);
                RESULT = node;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("dec_var",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // dec_inst ::= OPASIGN ID 
            {
              Node RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("dec_inst");
                node.setID(parser.cont);

                parser.cont++;
                Node identificador =new Node();
                identificador.setEtiqueta("ID");
                identificador.setID(parser.cont);
                identificador.setValor(id);
                node.addHijos(identificador);
                RESULT = node;
             
              CUP$parser$result = parser.getSymbolFactory().newSymbol("dec_inst",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // dec_inst ::= OPASIGN ID DOT AT L_PAR val_posicion R_PAR 
            {
              Node RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int vpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int vpright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Node vp = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("dec_inst");
                node.setID(parser.cont);

                parser.cont++;
                Node identificador =new Node();
                identificador.setEtiqueta("ID");
                identificador.setID(parser.cont);
                identificador.setValor(id);
                node.addHijos(identificador);
                node.addHijos((Node) vp);
                RESULT = node;
             
              CUP$parser$result = parser.getSymbolFactory().newSymbol("dec_inst",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // dec_inst ::= OPASIGN NUM 
            {
              Node RESULT =null;
		int nmleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nmright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String nm = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("dec_inst");
                node.setID(parser.cont);

                parser.cont++;
                Node num =new Node();
                num.setEtiqueta("num");
                num.setID(parser.cont);
                num.setValor(nm);
                node.addHijos(num);
                RESULT = node;
             
              CUP$parser$result = parser.getSymbolFactory().newSymbol("dec_inst",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // dec_inst ::= OPASIGN FLOAT_VAL 
            {
              Node RESULT =null;
		int nmleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nmright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String nm = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("dec_inst");
                node.setID(parser.cont);

                parser.cont++;
                Node num =new Node();
                num.setEtiqueta("float");
                num.setID(parser.cont);
                num.setValor(nm);
                node.addHijos(num);
                RESULT = node;
             
              CUP$parser$result = parser.getSymbolFactory().newSymbol("dec_inst",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // dec_inst ::= OPASIGN CONSTSTRING 
            {
              Node RESULT =null;
		int csleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int csright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String cs = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("dec_inst");
                node.setID(parser.cont);

                parser.cont++;
                Node const_string =new Node();
                const_string.setEtiqueta("const string");
                const_string.setID(parser.cont);
                const_string.setValor(cs.replaceAll("\"",""));
                node.addHijos(const_string);
                RESULT = node;
             
              CUP$parser$result = parser.getSymbolFactory().newSymbol("dec_inst",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // dec_inst ::= OPASIGN CONSTCHAR 
            {
              Node RESULT =null;
		int ccleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int ccright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String cc = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("dec_inst");
                node.setID(parser.cont);

                parser.cont++;
                Node const_char =new Node();
                const_char.setEtiqueta("const char");
                const_char.setID(parser.cont);
                const_char.setValor(cc.replaceAll("\'",""));
                node.addHijos(const_char);
                RESULT = node;
             
              CUP$parser$result = parser.getSymbolFactory().newSymbol("dec_inst",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // dec_inst ::= OPASIGN TRUE 
            {
              Node RESULT =null;
		int truleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int truright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String tru = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("dec_inst");
                node.setID(parser.cont);

                parser.cont++;
                Node bool_true =new Node();
                bool_true.setEtiqueta("true");
                bool_true.setID(parser.cont);
                bool_true.setValor(tru);
                node.addHijos(bool_true);
                RESULT = node;
             
              CUP$parser$result = parser.getSymbolFactory().newSymbol("dec_inst",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // dec_inst ::= OPASIGN FALSE 
            {
              Node RESULT =null;
		int falsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int falsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String fals = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("dec_inst");
                node.setID(parser.cont);

                parser.cont++;
                Node bool_false =new Node();
                bool_false.setEtiqueta("false");
                bool_false.setID(parser.cont);
                bool_false.setValor(fals);
                node.addHijos(bool_false);
                RESULT = node;
             
              CUP$parser$result = parser.getSymbolFactory().newSymbol("dec_inst",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // dec_inst ::= OPASIGN dec_llamada_funcion 
            {
              Node RESULT =null;
		int dlfleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dlfright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Node dlf = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("dec_inst");
                node.setID(parser.cont);
                node.addHijos((Node) dlf);
                RESULT = node;
             
              CUP$parser$result = parser.getSymbolFactory().newSymbol("dec_inst",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // dec_inst ::= OPASIGN arreglo 
            {
              Node RESULT =null;
		int arrleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int arrright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Node arr = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("dec_inst");
                node.setID(parser.cont);
                node.addHijos((Node) arr);
                RESULT = node;
             
              CUP$parser$result = parser.getSymbolFactory().newSymbol("dec_inst",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // dec_inst ::= OPASIGN arreglo2d 
            {
              Node RESULT =null;
		int arrleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int arrright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Node arr = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("dec_inst");
                node.setID(parser.cont);
                node.addHijos((Node) arr);
                RESULT = node;
             
              CUP$parser$result = parser.getSymbolFactory().newSymbol("dec_inst",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // dec_inst ::= OPASIGN math_op 
            {
              Node RESULT =null;
		int moleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int moright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Node mo = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("dec_inst");
                node.setID(parser.cont);
                node.addHijos((Node) mo);
                RESULT = node;
             
              CUP$parser$result = parser.getSymbolFactory().newSymbol("dec_inst",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // dec_inst ::= 
            {
              Node RESULT =null;
		
                parser.cont++;
                Node node = new Node();
				node.setEtiqueta("vacio");
				node.setID(parser.cont);
                RESULT = node;
             
              CUP$parser$result = parser.getSymbolFactory().newSymbol("dec_inst",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // arreglo2d ::= L_KEY arreglo arr2_cont R_KEY 
            {
              Node RESULT =null;
		int arrleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int arrright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Node arr = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int arcleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int arcright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Node arc = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                parser.cont++;
                Node node=new Node();
                node.setEtiqueta("arreglo2d");
                node.setID(parser.cont);
                node.addHijos((Node) arr);
                node.addHijos((Node) arc);
                RESULT=node;
             
              CUP$parser$result = parser.getSymbolFactory().newSymbol("arreglo2d",37, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // arr2_cont ::= COMMA arreglo arr2_cont 
            {
              Node RESULT =null;
		int arrleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int arrright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Node arr = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int arcleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int arcright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Node arc = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                parser.cont++;
                Node node=new Node();
                node.setEtiqueta("arr2_cont");
                node.setID(parser.cont);
                node.addHijos((Node) arr);
                node.addHijos((Node) arc);
                RESULT=node;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("arr2_cont",38, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // arr2_cont ::= 
            {
              Node RESULT =null;
		
                parser.cont++;
                Node nodo = new Node();
				nodo.setEtiqueta("vacio");
				nodo.setID(parser.cont);
                RESULT = nodo;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("arr2_cont",38, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // arreglo ::= L_KEY valor arr_cont R_KEY 
            {
              Node RESULT =null;
		int valeft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int varight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Node va = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int arcleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int arcright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Node arc = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                parser.cont++;
                Node node=new Node();
                node.setEtiqueta("arreglo");
                node.setID(parser.cont);
                node.addHijos((Node) va);
                node.addHijos((Node) arc);
                RESULT=node;
             
              CUP$parser$result = parser.getSymbolFactory().newSymbol("arreglo",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // arr_cont ::= COMMA valor arr_cont 
            {
              Node RESULT =null;
		int valeft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int varight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Node va = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int arcleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int arcright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Node arc = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("arr_cont");
                node.setID(parser.cont);
                node.addHijos((Node) va);
                node.addHijos((Node) arc);
                RESULT = node;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("arr_cont",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // arr_cont ::= 
            {
              Node RESULT =null;
		
                parser.cont++;
                Node nodo = new Node();
				nodo.setEtiqueta("vacio");
				nodo.setID(parser.cont);
                RESULT = nodo;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("arr_cont",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // dec_var_inst ::= ID OPASIGN valor SEMICOLON 
            {
              Node RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int valeft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int varight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Node va = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("dec_var_inst");
                node.setID(parser.cont);

                parser.cont++;
                Node identificador =new Node();
                identificador.setEtiqueta("ID");
                identificador.setID(parser.cont);
                identificador.setValor(id);
                node.addHijos(identificador);
                node.addHijos((Node) va);
                RESULT = node;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("dec_var_inst",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // dec_var_inst ::= ID DOT AT L_PAR val_posicion R_PAR OPASIGN valor SEMICOLON 
            {
              Node RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int vpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int vpright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Node vp = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int valeft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int varight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Node va = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("dec_var_inst");
                node.setID(parser.cont);

                parser.cont++;
                Node identificador =new Node();
                identificador.setEtiqueta("ID");
                identificador.setID(parser.cont);
                identificador.setValor(id);
                node.addHijos(identificador);
                node.addHijos((Node) vp);
                node.addHijos((Node) va);
                RESULT = node;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("dec_var_inst",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // dec_var_inst ::= ID OPASIGNADD valor SEMICOLON 
            {
              Node RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int valeft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int varight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Node va = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("dec_var_inst");
                node.setID(parser.cont);

                parser.cont++;
                Node identificador =new Node();
                identificador.setEtiqueta("ID");
                identificador.setID(parser.cont);
                identificador.setValor(id);
                node.addHijos(identificador);
                node.addHijos((Node) va);
                RESULT = node;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("dec_var_inst",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // dec_var_inst ::= ID OPASIGNMULT NUM SEMICOLON 
            {
              Node RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int nmleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int nmright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String nm = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("dec_var_inst");
                node.setID(parser.cont);

                parser.cont++;
                Node identificador =new Node();
                identificador.setEtiqueta("ID");
                identificador.setID(parser.cont);
                identificador.setValor(id);
                parser.cont++;
                Node num =new Node();
                num.setEtiqueta("num");
                num.setID(parser.cont);
                num.setValor(nm);
                node.addHijos(identificador);
                node.addHijos(num);
                RESULT = node;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("dec_var_inst",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // dec_var_inst ::= ID OPINC SEMICOLON 
            {
              Node RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("dec_var_inst");
                node.setID(parser.cont);

                parser.cont++;
                Node identificador =new Node();
                identificador.setEtiqueta("ID");
                identificador.setID(parser.cont);
                identificador.setValor(id);
                node.addHijos(identificador);
                RESULT = node;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("dec_var_inst",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // dec_var_inst ::= ID DOT AT L_PAR val_posicion COMMA val_posicion R_PAR OPASIGN valor SEMICOLON 
            {
              Node RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-10)).value;
		int vp1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int vp1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Node vp1 = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int vp2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int vp2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Node vp2 = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int valeft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int varight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Node va = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("dec_var_inst");
                node.setID(parser.cont);

                parser.cont++;
                Node identificador =new Node();
                identificador.setEtiqueta("ID");
                identificador.setID(parser.cont);
                identificador.setValor(id);
                node.addHijos(identificador);
                node.addHijos((Node) vp1);
                node.addHijos((Node) vp2);
                node.addHijos((Node) va);
                RESULT = node;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("dec_var_inst",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // valor ::= CONSTSTRING 
            {
              Node RESULT =null;
		int csleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int csright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String cs = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("valor");
                node.setID(parser.cont);
                
                parser.cont++;
                Node const_string = new Node();
                const_string.setEtiqueta("const string");
                const_string.setID(parser.cont);
                if(cs.equals("")){
                    const_string.setValor("empty");
                }else{
                    const_string.setValor(cs);
                }    
                node.setValor(const_string.getValor().replaceAll("\"",""));

                RESULT = node;
           
              CUP$parser$result = parser.getSymbolFactory().newSymbol("valor",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // valor ::= CONSTCHAR 
            {
              Node RESULT =null;
		int ccleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int ccright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String cc = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("valor");
                node.setID(parser.cont);
                
                parser.cont++;
                Node const_char = new Node();
                const_char.setEtiqueta("const char");
                const_char.setID(parser.cont);
                const_char.setValor(cc);

                node.setValor(const_char.getValor());
                RESULT = node;
           
              CUP$parser$result = parser.getSymbolFactory().newSymbol("valor",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // valor ::= TRUE 
            {
              Node RESULT =null;
		int truleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int truright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String tru = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("valor");
                node.setID(parser.cont);
                
                parser.cont++;
                Node bool_true = new Node();
                bool_true.setEtiqueta("true");
                bool_true.setID(parser.cont);
                bool_true.setValor(tru);

                node.setValor(bool_true.getValor());
                RESULT = node;
           
              CUP$parser$result = parser.getSymbolFactory().newSymbol("valor",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // valor ::= FALSE 
            {
              Node RESULT =null;
		int falsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int falsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String fals = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("valor");
                node.setID(parser.cont);
                
                parser.cont++;
                Node bool_false = new Node();
                bool_false.setEtiqueta("false");
                bool_false.setID(parser.cont);
                bool_false.setValor(fals);

                node.setValor(bool_false.getValor());
                RESULT = node;
           
              CUP$parser$result = parser.getSymbolFactory().newSymbol("valor",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // valor ::= NUM 
            {
              Node RESULT =null;
		int numleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int numright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String num = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("valor");
                node.setID(parser.cont);
                
                parser.cont++;
                Node num_int = new Node();
                num_int.setEtiqueta("INT");
                num_int.setID(parser.cont);
                num_int.setValor(num);

                node.setValor(num_int.getValor());
                RESULT = node;
           
              CUP$parser$result = parser.getSymbolFactory().newSymbol("valor",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // valor ::= FLOAT_VAL 
            {
              Node RESULT =null;
		int fltleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fltright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String flt = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("valor");
                node.setID(parser.cont);
                
                parser.cont++;
                Node num_flt = new Node();
                num_flt.setEtiqueta("FLOAT");
                num_flt.setID(parser.cont);
                num_flt.setValor(flt);

                node.setValor(num_flt.getValor());
                RESULT = node;
           
              CUP$parser$result = parser.getSymbolFactory().newSymbol("valor",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // valor ::= math_op 
            {
              Node RESULT =null;
		int mopleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int mopright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Node mop = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("valor");
                node.setID(parser.cont);
                node.addHijos((Node) mop);
                RESULT = node;
           
              CUP$parser$result = parser.getSymbolFactory().newSymbol("valor",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // valor ::= dec_llamada_funcion 
            {
              Node RESULT =null;
		int dlfleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dlfright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Node dlf = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("valor");
                node.setID(parser.cont);
                node.addHijos((Node) dlf);
                RESULT = node;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("valor",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // valor ::= ID 
            {
              Node RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("valor");
                node.setID(parser.cont);
                
                parser.cont++;
                Node identificador = new Node();
                identificador.setEtiqueta("ID");
                identificador.setID(parser.cont);
                identificador.setValor(id);

                node.setValor(identificador.getValor());
                RESULT = node;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("valor",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // valor ::= ID DOT AT L_PAR val_posicion R_PAR 
            {
              Node RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int vpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int vpright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Node vp = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("valor");
                node.setID(parser.cont);
                
                parser.cont++;
                Node identificador = new Node();
                identificador.setEtiqueta("ID");
                identificador.setID(parser.cont);
                identificador.setValor(id);
                node.addHijos(identificador);
                node.addHijos((Node) vp);
                node.setValor("");

                RESULT = node;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("valor",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // valor ::= ID DOT AT L_PAR val_posicion COMMA val_posicion R_PAR 
            {
              Node RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int vp1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int vp1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Node vp1 = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int vp2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int vp2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Node vp2 = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("valor");
                node.setID(parser.cont);
                
                parser.cont++;
                Node identificador = new Node();
                identificador.setEtiqueta("ID");
                identificador.setID(parser.cont);
                identificador.setValor(id);
                node.addHijos(identificador);
                node.addHijos((Node) vp1);
                node.addHijos((Node) vp2);
                node.setValor("");

                RESULT = node;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("valor",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // math_op ::= s_op 
            {
              Node RESULT =null;
		int soleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int soright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Node so = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("math_op");
                node.setID(parser.cont);
                node.addHijos((Node) so);
                RESULT = node;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("math_op",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // math_op ::= m_op 
            {
              Node RESULT =null;
		int moleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int moright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Node mo = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("math_op");
                node.setID(parser.cont);
                node.addHijos((Node) mo);
                RESULT = node;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("math_op",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // s_op ::= val sum_op 
            {
              Node RESULT =null;
		int vlleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int vlright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Node vl = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int sumleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sumright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Node sum = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("s_op");
                node.setID(parser.cont);
                node.addHijos((Node) vl);
                node.addHijos((Node) sum);
                RESULT = node;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("s_op",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // sum_op ::= OPSUM val sum_op 
            {
              Node RESULT =null;
		int vlleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int vlright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Node vl = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int sumleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sumright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Node sum = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("sum_op");
                node.setID(parser.cont);
                node.addHijos((Node) vl);
                node.addHijos((Node) sum);
                RESULT = node;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sum_op",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // sum_op ::= OPSUM val mult_op 
            {
              Node RESULT =null;
		int vlleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int vlright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Node vl = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int multleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int multright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Node mult = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("sum_op");
                node.setID(parser.cont);
                node.addHijos((Node) vl);
                node.addHijos((Node) mult);
                RESULT = node;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sum_op",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // sum_op ::= OPSUM val 
            {
              Node RESULT =null;
		int vlleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vlright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Node vl = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("sum_op");
                node.setID(parser.cont);
                node.addHijos((Node) vl);
                RESULT = node;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sum_op",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // m_op ::= val mult_op 
            {
              Node RESULT =null;
		int vlleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int vlright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Node vl = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int multleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int multright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Node mult = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("m_op");
                node.setID(parser.cont);
                node.addHijos((Node) vl);
                node.addHijos((Node) mult);
                RESULT = node;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("m_op",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // mult_op ::= OPMULT val mult_op 
            {
              Node RESULT =null;
		int vlleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int vlright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Node vl = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int multleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int multright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Node mult = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("mult_op");
                node.setID(parser.cont);
                node.addHijos((Node) vl);
                node.addHijos((Node) mult);
                RESULT = node;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("mult_op",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // mult_op ::= OPMULT val sum_op 
            {
              Node RESULT =null;
		int vlleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int vlright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Node vl = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int sumleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sumright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Node sum = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("mult_op");
                node.setID(parser.cont);
                node.addHijos((Node) vl);
                node.addHijos((Node) sum);
                RESULT = node;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("mult_op",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // mult_op ::= OPMULT val 
            {
              Node RESULT =null;
		int vlleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vlright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Node vl = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("mult_op");
                node.setID(parser.cont);
                node.addHijos((Node) vl);
                RESULT = node;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("mult_op",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // val ::= ID 
            {
              Node RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("val");
                node.setID(parser.cont);
                
                parser.cont++;
                Node identificador = new Node();
                identificador.setEtiqueta("ID");
                identificador.setID(parser.cont);
                identificador.setValor(id);

                node.setValor(identificador.getValor());
                RESULT = node;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("val",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // val ::= NUM 
            {
              Node RESULT =null;
		int nmleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nmright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String nm = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("val");
                node.setID(parser.cont);
                
                parser.cont++;
                Node num = new Node();
                num.setEtiqueta("num");
                num.setID(parser.cont);
                num.setValor(nm);

                node.setValor(num.getValor());
                RESULT = node;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("val",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // val ::= dec_llamada_funcion 
            {
              Node RESULT =null;
		int dlfleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dlfright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Node dlf = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("val");
                node.setID(parser.cont);
                node.addHijos((Node) dlf);
                RESULT = node;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("val",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // val ::= L_PAR math_op R_PAR 
            {
              Node RESULT =null;
		int moleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int moright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Node mo = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("val");
                node.setID(parser.cont);
                node.addHijos((Node) mo);
                RESULT = node;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("val",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // dec_while ::= WHILE L_PAR condicion R_PAR L_KEY dec_general R_KEY 
            {
              Node RESULT =null;
		int condleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int condright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Node cond = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int dgleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dgright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Node dg = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("dec_while");
                node.setID(parser.cont);
                node.addHijos((Node) cond);
                node.addHijos((Node) dg);
                RESULT = node;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("dec_while",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // dec_for ::= FOR L_PAR ID COMMA val_posicion UPTO val_posicion COMMA STEP L_PAR val_posicion R_PAR R_PAR L_KEY dec_general R_KEY 
            {
              Node RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-13)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-13)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-13)).value;
		int nm1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).left;
		int nm1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).right;
		Node nm1 = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-11)).value;
		int nm2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int nm2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		Node nm2 = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int nm3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int nm3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Node nm3 = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int dgleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dgright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Node dg = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                System.err.println("Entra a dec_for 1");
                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("dec_for");
                node.setID(parser.cont);

                parser.cont++;
                Node identificador = new Node();
                identificador.setEtiqueta("ID");
                identificador.setID(parser.cont);
                identificador.setValor(id);
                /*parser.cont++;
                Node num1 =new Node();
                num1.setEtiqueta("num");
                num1.setID(parser.cont);
                num1.setValor(nm1);
                parser.cont++;
                Node num2 =new Node();
                num2.setEtiqueta("num");
                num2.setID(parser.cont);
                num2.setValor(nm2);
                parser.cont++;
                Node num3 =new Node();
                num3.setEtiqueta("num");
                num3.setID(parser.cont);
                num3.setValor(nm3);*/     
                node.addHijos(identificador);
                node.addHijos((Node) nm1);
                node.addHijos((Node) nm2);
                node.addHijos((Node) nm3);
                node.addHijos((Node) dg);
                RESULT = node;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("dec_for",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-15)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // dec_for ::= FOR L_PAR ID COMMA val_posicion DOWNTO val_posicion COMMA STEP L_PAR val_posicion R_PAR R_PAR L_KEY dec_general R_KEY 
            {
              Node RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-13)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-13)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-13)).value;
		int nm1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).left;
		int nm1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).right;
		Node nm1 = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-11)).value;
		int nm2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int nm2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		Node nm2 = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int nm3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int nm3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Node nm3 = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int dgleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dgright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Node dg = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                System.err.println("Entra a dec_for 2");
                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("dec_for");
                node.setID(parser.cont);

                parser.cont++;
                Node identificador = new Node();
                identificador.setEtiqueta("ID");
                identificador.setID(parser.cont);
                identificador.setValor(id);
                /*parser.cont++;
                Node num1 =new Node();
                num1.setEtiqueta("num");
                num1.setID(parser.cont);
                num1.setValor(nm1);
                parser.cont++;
                Node num2 =new Node();
                num2.setEtiqueta("num");
                num2.setID(parser.cont);
                num2.setValor(nm2);
                parser.cont++;
                Node num3 =new Node();
                num3.setEtiqueta("num");
                num3.setID(parser.cont);
                num3.setValor(nm3);*/     
                node.addHijos(identificador);
                node.addHijos((Node) nm1);
                node.addHijos((Node) nm2);
                node.addHijos((Node) nm3);
                node.addHijos((Node) dg);
                RESULT = node;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("dec_for",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-15)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // dec_for ::= FOR L_PAR VARIABLE ID COLON INTEGER COMMA val_posicion UPTO val_posicion COMMA STEP L_PAR val_posicion R_PAR R_PAR L_KEY dec_general R_KEY 
            {
              Node RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-15)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-15)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-15)).value;
		int nm1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).left;
		int nm1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).right;
		Node nm1 = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-11)).value;
		int nm2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int nm2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		Node nm2 = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int nm3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int nm3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Node nm3 = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int dgleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dgright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Node dg = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                System.err.println("Entra a dec_for 3");
                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("dec_for");
                node.setID(parser.cont);

                parser.cont++;
                Node identificador = new Node();
                identificador.setEtiqueta("ID");
                identificador.setID(parser.cont);
                identificador.setValor(id);
                /*parser.cont++;
                Node num1 =new Node();
                num1.setEtiqueta("num");
                num1.setID(parser.cont);
                num1.setValor(nm1);
                parser.cont++;
                Node num2 =new Node();
                num2.setEtiqueta("num");
                num2.setID(parser.cont);
                num2.setValor(nm2);
                parser.cont++;
                Node num3 =new Node();
                num3.setEtiqueta("num");
                num3.setID(parser.cont);
                num3.setValor(nm3); */    
                node.addHijos(identificador);
                node.addHijos((Node) nm1);
                node.addHijos((Node) nm2);
                node.addHijos((Node) nm3);
                node.addHijos((Node) dg);
                RESULT = node;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("dec_for",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-18)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // dec_for ::= FOR L_PAR VARIABLE ID COLON INTEGER COMMA val_posicion DOWNTO val_posicion COMMA STEP L_PAR val_posicion R_PAR R_PAR L_KEY dec_general R_KEY 
            {
              Node RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-15)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-15)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-15)).value;
		int nm1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).left;
		int nm1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).right;
		Node nm1 = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-11)).value;
		int nm2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int nm2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		Node nm2 = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int nm3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int nm3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Node nm3 = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int dgleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dgright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Node dg = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                System.err.println("Entra a dec_for 4");
                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("dec_for");
                node.setID(parser.cont);

                parser.cont++;
                Node identificador = new Node();
                identificador.setEtiqueta("ID");
                identificador.setID(parser.cont);
                identificador.setValor(id);
               /* parser.cont++;
                Node num1 =new Node();
                num1.setEtiqueta("num");
                num1.setID(parser.cont);
                num1.setValor(nm1);
                parser.cont++;
                Node num2 =new Node();
                num2.setEtiqueta("num");
                num2.setID(parser.cont);
                num2.setValor(nm2);
                parser.cont++;
                Node num3 =new Node();
                num3.setEtiqueta("num");
                num3.setID(parser.cont);
                num3.setValor(nm3);*/     
                node.addHijos(identificador);
                node.addHijos((Node) nm1);
                node.addHijos((Node) nm2);
                node.addHijos((Node) nm3);
                node.addHijos((Node) dg);
                RESULT = node;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("dec_for",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-18)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // dec_switch ::= SWITCH L_PAR ID R_PAR L_KEY list_op R_KEY 
            {
              Node RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int loleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int loright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Node lo = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                System.err.println("Entra a dec_switch");
                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("dec_switch");
                node.setID(parser.cont);

                parser.cont++;
                Node identificador = new Node();
                identificador.setEtiqueta("ID");
                identificador.setID(parser.cont);
                identificador.setValor(id);
                node.addHijos(identificador);
                node.addHijos((Node) lo);
                RESULT = node;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("dec_switch",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // list_op ::= OPTION valor COLON dec_general new_op 
            {
              Node RESULT =null;
		int vlleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int vlright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Node vl = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int dgleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dgright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Node dg = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int nwoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nworight = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Node nwo = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                System.err.println("Entra a list_op");
                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("list_op");
                node.setID(parser.cont);
                node.addHijos((Node) vl);
                node.addHijos((Node) dg);
                node.addHijos((Node) nwo);
                RESULT = node;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("list_op",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // new_op ::= BREAK SEMICOLON list_op 
            {
              Node RESULT =null;
		int loleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int loright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Node lo = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                System.err.println("Entra a new_op 1");
                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("option");
                node.setID(parser.cont);
                node.addHijos((Node) lo);
                RESULT = node;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("new_op",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // new_op ::= BREAK SEMICOLON DEFAULT COLON dec_general 
            {
              Node RESULT =null;
		int dgleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dgright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Node dg = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                System.err.println("Entra a new_op 2");
                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("default");
                node.setID(parser.cont);
                node.addHijos((Node) dg);
                RESULT = node;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("new_op",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // new_op ::= BREAK SEMICOLON 
            {
              Node RESULT =null;
		
                System.err.println("Entra a new_op 3");
                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("new_op");
                node.setID(parser.cont);
                RESULT = node;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("new_op",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // dec_if ::= IF L_PAR condicion R_PAR L_KEY dec_general R_KEY dec_else 
            {
              Node RESULT =null;
		int condleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int condright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Node cond = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int dgleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int dgright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Node dg = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int delleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int delright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Node del = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                System.err.println("Entra a dec_if");
                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("dec_if");
                node.setID(parser.cont);
                node.addHijos((Node) cond);
                node.addHijos((Node) dg);
                node.addHijos((Node) del);
                RESULT = node;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("dec_if",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // dec_else ::= ELIF L_PAR condicion R_PAR L_KEY dec_general R_KEY dec_else 
            {
              Node RESULT =null;
		int condleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int condright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Node cond = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int dgleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int dgright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Node dg = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int delleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int delright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Node del = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                System.err.println("Entra a dec_else elif");
                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("dec_elif");
                node.setID(parser.cont);
                node.addHijos((Node) cond);
                node.addHijos((Node) dg);
                node.addHijos((Node) del);
                RESULT = node;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("dec_else",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // dec_else ::= ELSE L_KEY dec_general R_KEY 
            {
              Node RESULT =null;
		int dgleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dgright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Node dg = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                System.err.println("Entra a dec_else else");
                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("dec_else");
                node.setID(parser.cont);
                node.addHijos((Node) dg);
                RESULT = node;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("dec_else",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // dec_else ::= 
            {
              Node RESULT =null;
		
                parser.cont++;
                Node nodo = new Node();
				nodo.setEtiqueta("vacio");
				nodo.setID(parser.cont);
                RESULT = nodo;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("dec_else",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // dec_llamada_funcion ::= ID L_PAR llamada_parametros R_PAR 
            {
              Node RESULT =null;
		int llpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int llpright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Node llp = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                System.err.println("Entra a dec_llamada_funcion");
                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("dec_llamada_funcion");
                node.setID(parser.cont);
                node.addHijos((Node) llp);
                RESULT = node;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("dec_llamada_funcion",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // llamada_parametros ::= valor lista_valores 
            {
              Node RESULT =null;
		int vlleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int vlright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Node vl = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int lvleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lvright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Node lv = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                System.err.println("Entra a llamada_parametros 1");
                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("llamada_parametros");
                node.setID(parser.cont);
                node.addHijos((Node) vl);
                node.addHijos((Node) lv);
                RESULT = node;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("llamada_parametros",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // llamada_parametros ::= valor 
            {
              Node RESULT =null;
		int vlleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vlright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Node vl = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                System.err.println("Entra a llamada_parametros 2");
                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("llamada_parametros");
                node.setID(parser.cont);
                node.addHijos((Node) vl);
                RESULT = node;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("llamada_parametros",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // llamada_parametros ::= 
            {
              Node RESULT =null;
		
                System.err.println("Entra a vacio");
                parser.cont++;
                Node nodo = new Node();
				nodo.setEtiqueta("vacio");
				nodo.setID(parser.cont);
                RESULT = nodo;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("llamada_parametros",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // lista_valores ::= COMMA valor lista_valores 
            {
              Node RESULT =null;
		int vlleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int vlright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Node vl = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int lvleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lvright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Node lv = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                System.err.println("Entra a lista_valores 1");
                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("lista_valores");
                node.setID(parser.cont);
                node.addHijos((Node) vl);
                node.addHijos((Node) lv);
                RESULT = node;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_valores",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // lista_valores ::= COMMA valor 
            {
              Node RESULT =null;
		int vlleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vlright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Node vl = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                System.err.println("Entra a lista_valores 2");
                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("lista_valores");
                node.setID(parser.cont);
                node.addHijos((Node) vl);
                RESULT = node;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_valores",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // condicion ::= valor_cond OPREL valor_cond 
            {
              Node RESULT =null;
		int vc1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int vc1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Node vc1 = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int oprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int oprright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String opr = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int vc2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vc2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Node vc2 = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("condicion");
                node.setValor(opr);
                node.setID(parser.cont);
                node.addHijos((Node) vc1);
                node.addHijos((Node) vc2);
                RESULT = node;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("condicion",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // condicion ::= valor_cond OPREL valor_cond OPLOG condicion 
            {
              Node RESULT =null;
		int vc1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int vc1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Node vc1 = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int oprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int oprright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String opr = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int vc2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int vc2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Node vc2 = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int oplgleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int oplgright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String oplg = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int condleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int condright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Node cond = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("condicion");
                node.setID(parser.cont);
                node.setValor(opr +"," +oplg);
                node.addHijos((Node) vc1);
                node.addHijos((Node) vc2);
                node.addHijos((Node) cond);
                RESULT = node;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("condicion",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // condicion ::= valor_cond 
            {
              Node RESULT =null;
		int vcleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vcright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Node vc = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("condicion");
                node.setValor("valor condicional");
                node.setID(parser.cont);
                node.addHijos((Node) vc);
                RESULT = node;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("condicion",32, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // condicion ::= NULL 
            {
              Node RESULT =null;
		int nllleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nllright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String nll = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("condicion");
                node.setID(parser.cont);

                parser.cont++;
                Node nulo=new Node();
                nulo.setEtiqueta("Null");
                nulo.setID(parser.cont);
                nulo.setValor(nll);

                node.setValor(nulo.getValor());

                RESULT = node;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("condicion",32, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // condicion ::= valor_cond OPLOG condicion 
            {
              Node RESULT =null;
		int vcleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int vcright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Node vc = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int oplgleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int oplgright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String oplg = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int condleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int condright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Node cond = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("condicion");
                node.setValor(oplg);
                node.setID(parser.cont);
                node.addHijos((Node) vc);
                node.addHijos((Node) cond);
                RESULT = node;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("condicion",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // valor_cond ::= NUM 
            {
              Node RESULT =null;
		int nmleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nmright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String nm = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                System.err.println("Entra a valor_cond 1");
                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("valor_cond");
                node.setID(parser.cont);

                parser.cont++;
                Node num =new Node();
                num.setEtiqueta("num");
                num.setID(parser.cont);
                num.setValor(nm);

                node.setValor(num.getValor());
                RESULT = node;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("valor_cond",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // valor_cond ::= ID 
            {
              Node RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                System.err.println("Entra a valor_cond 2");
                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("valor_cond");
                node.setID(parser.cont);

                parser.cont++;
                Node identificador =new Node();
                identificador.setEtiqueta("ID");
                identificador.setID(parser.cont);
                identificador.setValor(id);

                node.setValor(identificador.getValor());
                RESULT = node;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("valor_cond",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // valor_cond ::= TRUE 
            {
              Node RESULT =null;
		int truleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int truright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String tru = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                System.err.println("Entra a valor_cond 3");
                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("valor_cond");
                node.setID(parser.cont);
                
                parser.cont++;
                Node bool_true = new Node();
                bool_true.setEtiqueta("true");
                bool_true.setID(parser.cont);
                bool_true.setValor(tru);

                node.setValor(bool_true.getValor());
                RESULT = node;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("valor_cond",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // valor_cond ::= FALSE 
            {
              Node RESULT =null;
		int falsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int falsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String fals = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                System.err.println("Entra a valor_cond 4");
                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("valor");
                node.setID(parser.cont);
                
                parser.cont++;
                Node bool_false = new Node();
                bool_false.setEtiqueta("false");
                bool_false.setID(parser.cont);
                bool_false.setValor(fals);

                node.setValor(bool_false.getValor());
                RESULT = node;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("valor_cond",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // dec_return ::= RETURN valor 
            {
              Node RESULT =null;
		int vlleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vlright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Node vl = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                System.err.println("Entra a dec_return 1");
                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("dec_return");
                node.setID(parser.cont);
                node.addHijos(vl);
                RESULT = node;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("dec_return",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // dec_return ::= RETURN 
            {
              Node RESULT =null;
		
                System.err.println("Entra a dec_return 2");  
                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("dec_return");
                node.setID(parser.cont);
                RESULT = node;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("dec_return",34, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // tipo ::= BOOLEAN 
            {
              Node RESULT =null;
		
                System.err.println("Entra a tipo 1");
                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("tipo");
                node.setID(parser.cont);
                node.setValor("boolean");
                RESULT = node;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo",35, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // tipo ::= CHARACTER 
            {
              Node RESULT =null;
		
                System.err.println("Entra a tipo 2");
                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("tipo");
                node.setID(parser.cont);
                node.setValor("char");
                RESULT = node;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo",35, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // tipo ::= INTEGER 
            {
              Node RESULT =null;
		
                System.err.println("Entra a tipo 3");
                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("tipo");
                node.setID(parser.cont);
                node.setValor("Int");
                RESULT = node;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo",35, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // tipo ::= VOID 
            {
              Node RESULT =null;
		
                System.err.println("Entra a tipo 4");
                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("tipo");
                node.setID(parser.cont);
                node.setValor("Void");
                RESULT = node;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo",35, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // tipo ::= STRING 
            {
              Node RESULT =null;
		  
                System.err.println("Entra a tipo 5");
                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("tipo");
                node.setID(parser.cont);
                node.setValor("String");
                RESULT = node;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo",35, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // tipo ::= FLOAT 
            {
              Node RESULT =null;
		  
                System.err.println("Entra a tipo 5");
                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("tipo");
                node.setID(parser.cont);
                node.setValor("FLOAT");
                RESULT = node;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo",35, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // val_posicion ::= ID 
            {
              Node RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("posicion");
                node.setID(parser.cont);
                
                parser.cont++;
                Node identificador = new Node();
                identificador.setEtiqueta("ID");
                identificador.setID(parser.cont);
                identificador.setValor(id);

                node.setValor(identificador.getValor());
                RESULT = node;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("val_posicion",39, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // val_posicion ::= NUM 
            {
              Node RESULT =null;
		int nmleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nmright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String nm = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("posicion");
                node.setID(parser.cont);
                
                parser.cont++;
                Node num = new Node();
                num.setEtiqueta("num");
                num.setID(parser.cont);
                num.setValor(nm);

                node.setValor(num.getValor());
                RESULT = node;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("val_posicion",39, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // val_posicion ::= dec_llamada_funcion 
            {
              Node RESULT =null;
		int dlfleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dlfright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Node dlf = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("posicion");
                node.setID(parser.cont);
                node.addHijos((Node) dlf);
                RESULT = node;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("val_posicion",39, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // val_posicion ::= math_op 
            {
              Node RESULT =null;
		int moleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int moright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Node mo = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("posicion");
                node.setID(parser.cont);
                node.addHijos((Node) mo);
                RESULT = node;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("val_posicion",39, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
