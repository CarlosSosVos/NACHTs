
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package nachts;

import java_cup.runtime.*;
import java.util.ArrayList;
import java.util.LinkedList;
import java.util.List;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return Sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\150\000\002\002\004\000\002\002\004\000\002\046" +
    "\003\000\002\003\004\000\002\003\003\000\002\004\013" +
    "\000\002\005\010\000\002\005\007\000\002\005\003\000" +
    "\002\006\010\000\002\006\007\000\002\007\003\000\002" +
    "\007\003\000\002\010\010\000\002\011\006\000\002\011" +
    "\006\000\002\011\006\000\002\012\004\000\002\012\004" +
    "\000\002\012\004\000\002\012\004\000\002\012\004\000" +
    "\002\012\004\000\002\012\005\000\002\012\004\000\002" +
    "\012\005\000\002\012\004\000\002\012\003\000\002\013" +
    "\007\000\002\013\013\000\002\014\004\000\002\014\010" +
    "\000\002\014\013\000\002\015\004\000\002\015\011\000" +
    "\002\015\004\000\002\015\004\000\002\015\004\000\002" +
    "\015\004\000\002\015\004\000\002\015\004\000\002\015" +
    "\007\000\002\015\003\000\002\016\005\000\002\016\003" +
    "\000\002\017\006\000\002\017\013\000\002\020\003\000" +
    "\002\020\003\000\002\020\003\000\002\020\003\000\002" +
    "\020\003\000\002\020\003\000\002\020\003\000\002\021" +
    "\003\000\002\021\003\000\002\022\004\000\002\023\005" +
    "\000\002\023\005\000\002\023\004\000\002\024\004\000" +
    "\002\025\005\000\002\025\005\000\002\025\004\000\002" +
    "\026\003\000\002\026\003\000\002\026\003\000\002\026" +
    "\005\000\002\027\011\000\002\030\021\000\002\030\022" +
    "\000\002\030\025\000\002\030\025\000\002\031\011\000" +
    "\002\032\007\000\002\033\005\000\002\033\007\000\002" +
    "\033\004\000\002\034\011\000\002\035\005\000\002\035" +
    "\007\000\002\035\003\000\002\036\005\000\002\037\005" +
    "\000\002\037\004\000\002\037\003\000\002\040\005\000" +
    "\002\040\004\000\002\042\005\000\002\042\007\000\002" +
    "\042\003\000\002\042\003\000\002\042\005\000\002\043" +
    "\003\000\002\043\003\000\002\043\003\000\002\043\003" +
    "\000\002\044\004\000\002\044\003\000\002\045\003\000" +
    "\002\045\003\000\002\045\003\000\002\045\003\000\002" +
    "\045\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0117\000\004\004\005\001\002\000\006\004\005\066" +
    "\074\001\002\000\004\040\010\001\002\000\004\002\007" +
    "\001\002\000\004\002\001\001\002\000\004\057\011\001" +
    "\002\000\006\011\014\060\012\001\002\000\004\063\ufff9" +
    "\001\002\000\004\063\036\001\002\000\004\040\015\001" +
    "\002\000\004\063\016\001\002\000\014\012\020\015\017" +
    "\016\022\017\023\025\024\001\002\000\014\050\uff9c\053" +
    "\uff9c\060\uff9c\061\uff9c\066\uff9c\001\002\000\014\050\uff9a" +
    "\053\uff9a\060\uff9a\061\uff9a\066\uff9a\001\002\000\006\060" +
    "\026\061\025\001\002\000\014\050\uff9d\053\uff9d\060\uff9d" +
    "\061\uff9d\066\uff9d\001\002\000\014\050\uff9e\053\uff9e\060" +
    "\uff9e\061\uff9e\066\uff9e\001\002\000\014\050\uff9b\053\uff9b" +
    "\060\uff9b\061\uff9b\066\uff9b\001\002\000\004\011\031\001" +
    "\002\000\004\063\ufffa\001\002\000\004\060\030\001\002" +
    "\000\004\063\ufffb\001\002\000\004\040\032\001\002\000" +
    "\004\063\033\001\002\000\014\012\020\015\017\016\022" +
    "\017\023\025\024\001\002\000\006\060\ufff7\061\025\001" +
    "\002\000\004\060\ufff8\001\002\000\014\012\020\015\017" +
    "\016\022\017\023\025\024\001\002\000\004\053\040\001" +
    "\002\000\034\003\066\011\052\020\053\022\046\023\071" +
    "\024\047\032\042\033\072\034\051\040\055\050\073\061" +
    "\062\066\074\001\002\000\004\062\u0114\001\002\000\004" +
    "\057\u010f\001\002\000\034\003\066\011\052\020\053\022" +
    "\046\023\071\024\047\032\042\033\072\034\051\040\055" +
    "\050\073\061\062\066\074\001\002\000\004\062\ufff5\001" +
    "\002\000\004\062\ufff6\001\002\000\004\057\u0108\001\002" +
    "\000\022\005\105\013\117\014\113\026\111\027\114\040" +
    "\115\057\120\062\uff9f\001\002\000\034\003\066\011\052" +
    "\020\053\022\046\023\071\024\047\032\042\033\072\034" +
    "\051\040\055\050\073\061\062\066\074\001\002\000\004" +
    "\057\365\001\002\000\004\040\352\001\002\000\004\057" +
    "\322\001\002\000\034\003\066\011\052\020\053\022\046" +
    "\023\071\024\047\032\042\033\072\034\051\040\055\050" +
    "\073\061\062\066\074\001\002\000\010\050\306\057\126" +
    "\065\307\001\002\000\012\050\uffd7\061\uffd7\062\uffd7\066" +
    "\uffd7\001\002\000\034\003\066\011\052\020\053\022\046" +
    "\023\071\024\047\032\042\033\072\034\051\040\055\050" +
    "\073\061\062\066\074\001\002\000\004\062\303\001\002" +
    "\000\034\003\066\011\052\020\053\022\046\023\071\024" +
    "\047\032\042\033\072\034\051\040\055\050\073\061\062" +
    "\066\074\001\002\000\004\040\266\001\002\000\004\062" +
    "\265\001\002\000\004\054\264\001\002\000\034\003\066" +
    "\011\052\020\053\022\046\023\071\024\047\032\042\033" +
    "\072\034\051\040\055\050\073\061\062\066\074\001\002" +
    "\000\010\030\uffe6\054\uffe6\056\uffe6\001\002\000\004\062" +
    "\262\001\002\000\034\003\066\011\052\020\053\022\046" +
    "\023\071\024\047\032\042\033\072\034\051\040\055\050" +
    "\073\061\062\066\074\001\002\000\004\057\174\001\002" +
    "\000\004\057\165\001\002\000\020\005\075\013\077\014" +
    "\101\026\100\027\102\040\076\053\103\001\002\000\016" +
    "\002\uffff\050\uffff\054\uffff\061\uffff\062\uffff\066\uffff\001" +
    "\002\000\012\050\uffde\061\uffde\062\uffde\066\uffde\001\002" +
    "\000\016\050\uffe0\057\126\061\uffe0\062\uffe0\065\160\066" +
    "\uffe0\001\002\000\012\050\uffdd\061\uffdd\062\uffdd\066\uffdd" +
    "\001\002\000\012\050\uffdb\061\uffdb\062\uffdb\066\uffdb\001" +
    "\002\000\012\050\uffdc\061\uffdc\062\uffdc\066\uffdc\001\002" +
    "\000\012\050\uffda\061\uffda\062\uffda\066\uffda\001\002\000" +
    "\020\005\105\013\117\014\113\026\111\027\114\040\115" +
    "\057\120\001\002\000\012\050\uffd9\061\uffd9\062\uffd9\066" +
    "\uffd9\001\002\000\020\045\uffc0\046\uffc0\060\uffc0\061\uffc0" +
    "\062\uffc0\063\uffc0\066\uffc0\001\002\000\020\045\uffbf\046" +
    "\uffbf\060\uffcd\061\uffcd\062\uffcd\063\uffcd\066\uffcd\001\002" +
    "\000\014\060\uffcb\061\uffcb\062\uffcb\063\uffcb\066\uffcb\001" +
    "\002\000\006\045\151\046\150\001\002\000\014\060\uffd0" +
    "\061\uffd0\062\uffd0\063\uffd0\066\uffd0\001\002\000\006\061" +
    "\140\066\074\001\002\000\014\060\uffd1\061\uffd1\062\uffd1" +
    "\063\uffd1\066\uffd1\001\002\000\014\060\uffcf\061\uffcf\062" +
    "\uffcf\063\uffcf\066\uffcf\001\002\000\022\045\uffc1\046\uffc1" +
    "\057\126\060\uffcc\061\uffcc\062\uffcc\063\uffcc\066\uffcc\001" +
    "\002\000\014\060\uffca\061\uffca\062\uffca\063\uffca\066\uffca" +
    "\001\002\000\014\060\uffd2\061\uffd2\062\uffd2\063\uffd2\066" +
    "\uffd2\001\002\000\010\005\105\040\122\057\120\001\002" +
    "\000\014\060\uffce\061\uffce\062\uffce\063\uffce\066\uffce\001" +
    "\002\000\022\045\uffc1\046\uffc1\057\126\060\uffc1\061\uffc1" +
    "\062\uffc1\063\uffc1\066\uffc1\001\002\000\004\060\125\001" +
    "\002\000\020\045\uffbf\046\uffbf\060\uffbf\061\uffbf\062\uffbf" +
    "\063\uffbf\066\uffbf\001\002\000\020\045\uffbe\046\uffbe\060" +
    "\uffbe\061\uffbe\062\uffbe\063\uffbe\066\uffbe\001\002\000\022" +
    "\005\105\013\117\014\113\026\111\027\114\040\115\057" +
    "\120\060\127\001\002\000\022\045\uffac\046\uffac\050\uffac" +
    "\060\uffac\061\uffac\062\uffac\063\uffac\066\uffac\001\002\000" +
    "\006\060\132\061\133\001\002\000\022\045\uffaf\046\uffaf" +
    "\050\uffaf\060\uffaf\061\uffaf\062\uffaf\063\uffaf\066\uffaf\001" +
    "\002\000\022\045\uffad\046\uffad\050\uffad\060\uffad\061\uffad" +
    "\062\uffad\063\uffad\066\uffad\001\002\000\020\005\105\013" +
    "\117\014\113\026\111\027\114\040\115\057\120\001\002" +
    "\000\004\060\135\001\002\000\022\045\uffae\046\uffae\050" +
    "\uffae\060\uffae\061\uffae\062\uffae\063\uffae\066\uffae\001\002" +
    "\000\006\060\uffaa\061\133\001\002\000\004\060\uffab\001" +
    "\002\000\020\005\105\013\117\014\113\026\111\027\114" +
    "\040\115\057\120\001\002\000\004\054\uffd5\001\002\000" +
    "\004\054\143\001\002\000\012\050\uffd8\061\uffd8\062\uffd8" +
    "\066\uffd8\001\002\000\006\061\140\066\074\001\002\000" +
    "\004\054\uffd6\001\002\000\014\060\uffc9\061\uffc9\062\uffc9" +
    "\063\uffc9\066\uffc9\001\002\000\014\060\uffc5\061\uffc5\062" +
    "\uffc5\063\uffc5\066\uffc5\001\002\000\010\005\105\040\122" +
    "\057\120\001\002\000\010\005\105\040\122\057\120\001" +
    "\002\000\020\045\151\046\150\060\uffc2\061\uffc2\062\uffc2" +
    "\063\uffc2\066\uffc2\001\002\000\014\060\uffc4\061\uffc4\062" +
    "\uffc4\063\uffc4\066\uffc4\001\002\000\014\060\uffc3\061\uffc3" +
    "\062\uffc3\063\uffc3\066\uffc3\001\002\000\020\045\151\046" +
    "\150\060\uffc6\061\uffc6\062\uffc6\063\uffc6\066\uffc6\001\002" +
    "\000\014\060\uffc7\061\uffc7\062\uffc7\063\uffc7\066\uffc7\001" +
    "\002\000\014\060\uffc8\061\uffc8\062\uffc8\063\uffc8\066\uffc8" +
    "\001\002\000\004\064\161\001\002\000\004\057\162\001" +
    "\002\000\004\005\163\001\002\000\004\060\164\001\002" +
    "\000\012\050\uffdf\061\uffdf\062\uffdf\066\uffdf\001\002\000" +
    "\010\005\167\013\170\040\166\001\002\000\004\060\173" +
    "\001\002\000\004\060\172\001\002\000\004\060\171\001" +
    "\002\000\004\062\ufff3\001\002\000\004\062\ufff2\001\002" +
    "\000\004\062\ufff1\001\002\000\006\011\176\040\175\001" +
    "\002\000\004\061\232\001\002\000\004\040\177\001\002" +
    "\000\004\063\200\001\002\000\004\015\201\001\002\000" +
    "\004\061\202\001\002\000\004\005\203\001\002\000\006" +
    "\006\204\007\205\001\002\000\004\005\220\001\002\000" +
    "\004\005\206\001\002\000\004\061\207\001\002\000\004" +
    "\010\210\001\002\000\004\057\211\001\002\000\004\005" +
    "\212\001\002\000\004\060\213\001\002\000\004\060\214" +
    "\001\002\000\004\055\215\001\002\000\034\003\066\011" +
    "\052\020\053\022\046\023\071\024\047\032\042\033\072" +
    "\034\051\040\055\050\073\061\062\066\074\001\002\000" +
    "\004\056\217\001\002\000\034\003\uffb9\011\uffb9\020\uffb9" +
    "\022\uffb9\023\uffb9\024\uffb9\032\uffb9\033\uffb9\034\uffb9\040" +
    "\uffb9\050\uffb9\061\uffb9\066\uffb9\001\002\000\004\061\221" +
    "\001\002\000\004\010\222\001\002\000\004\057\223\001" +
    "\002\000\004\005\224\001\002\000\004\060\225\001\002" +
    "\000\004\060\226\001\002\000\004\053\227\001\002\000" +
    "\034\003\066\011\052\020\053\022\046\023\071\024\047" +
    "\032\042\033\072\034\051\040\055\050\073\061\062\066" +
    "\074\001\002\000\004\054\231\001\002\000\034\003\uffba" +
    "\011\uffba\020\uffba\022\uffba\023\uffba\024\uffba\032\uffba\033" +
    "\uffba\034\uffba\040\uffba\050\uffba\061\uffba\066\uffba\001\002" +
    "\000\004\005\233\001\002\000\006\006\234\007\235\001" +
    "\002\000\004\061\250\001\002\000\004\005\236\001\002" +
    "\000\004\061\237\001\002\000\004\010\240\001\002\000" +
    "\004\057\241\001\002\000\004\005\242\001\002\000\004" +
    "\060\243\001\002\000\004\060\244\001\002\000\004\053" +
    "\245\001\002\000\034\003\066\011\052\020\053\022\046" +
    "\023\071\024\047\032\042\033\072\034\051\040\055\050" +
    "\073\061\062\066\074\001\002\000\004\054\247\001\002" +
    "\000\034\003\uffbb\011\uffbb\020\uffbb\022\uffbb\023\uffbb\024" +
    "\uffbb\032\uffbb\033\uffbb\034\uffbb\040\uffbb\050\uffbb\061\uffbb" +
    "\066\uffbb\001\002\000\004\010\251\001\002\000\004\057" +
    "\252\001\002\000\004\005\253\001\002\000\004\060\254" +
    "\001\002\000\004\060\255\001\002\000\004\053\256\001" +
    "\002\000\034\003\066\011\052\020\053\022\046\023\071" +
    "\024\047\032\042\033\072\034\051\040\055\050\073\061" +
    "\062\066\074\001\002\000\004\054\260\001\002\000\034" +
    "\003\uffbc\011\uffbc\020\uffbc\022\uffbc\023\uffbc\024\uffbc\032" +
    "\uffbc\033\uffbc\034\uffbc\040\uffbc\050\uffbc\061\uffbc\066\uffbc" +
    "\001\002\000\010\030\uffe9\054\uffe9\056\uffe9\001\002\000" +
    "\034\003\uffe3\011\uffe3\020\uffe3\022\uffe3\023\uffe3\024\uffe3" +
    "\032\uffe3\033\uffe3\034\uffe3\040\uffe3\050\uffe3\061\uffe3\066" +
    "\uffe3\001\002\000\010\030\uffec\054\uffec\056\uffec\001\002" +
    "\000\006\004\ufffc\066\ufffc\001\002\000\010\030\uffe7\054" +
    "\uffe7\056\uffe7\001\002\000\006\055\267\063\270\001\002" +
    "\000\004\005\274\001\002\000\014\012\020\015\017\016" +
    "\022\017\023\025\024\001\002\000\006\050\073\066\074" +
    "\001\002\000\010\050\073\061\062\066\074\001\002\000" +
    "\034\003\uffe2\011\uffe2\020\uffe2\022\uffe2\023\uffe2\024\uffe2" +
    "\032\uffe2\033\uffe2\034\uffe2\040\uffe2\050\uffe2\061\uffe2\066" +
    "\uffe2\001\002\000\004\056\275\001\002\000\004\063\276" +
    "\001\002\000\014\012\020\015\017\016\022\017\023\025" +
    "\024\001\002\000\006\050\073\066\074\001\002\000\010" +
    "\050\073\061\062\066\074\001\002\000\034\003\uffe1\011" +
    "\uffe1\020\uffe1\022\uffe1\023\uffe1\024\uffe1\032\uffe1\033\uffe1" +
    "\034\uffe1\040\uffe1\050\uffe1\061\uffe1\066\uffe1\001\002\000" +
    "\010\030\uffef\054\uffef\056\uffef\001\002\000\034\003\066" +
    "\011\052\020\053\022\046\023\071\024\047\032\042\033" +
    "\072\034\051\040\055\050\073\061\062\066\074\001\002" +
    "\000\010\030\uffe8\054\uffe8\056\uffe8\001\002\000\010\030" +
    "\uffed\054\uffed\056\uffed\001\002\000\020\005\105\013\117" +
    "\014\113\026\111\027\114\040\115\057\120\001\002\000" +
    "\004\064\310\001\002\000\004\057\311\001\002\000\004" +
    "\005\312\001\002\000\004\060\313\001\002\000\004\050" +
    "\314\001\002\000\020\005\105\013\117\014\113\026\111" +
    "\027\114\040\115\057\120\001\002\000\004\062\316\001" +
    "\002\000\034\003\uffd3\011\uffd3\020\uffd3\022\uffd3\023\uffd3" +
    "\024\uffd3\032\uffd3\033\uffd3\034\uffd3\040\uffd3\050\uffd3\061" +
    "\uffd3\066\uffd3\001\002\000\004\062\320\001\002\000\034" +
    "\003\uffd4\011\uffd4\020\uffd4\022\uffd4\023\uffd4\024\uffd4\032" +
    "\uffd4\033\uffd4\034\uffd4\040\uffd4\050\uffd4\061\uffd4\066\uffd4" +
    "\001\002\000\010\030\uffeb\054\uffeb\056\uffeb\001\002\000" +
    "\014\005\323\026\325\027\327\031\330\040\324\001\002" +
    "\000\010\041\uffa4\043\uffa4\060\uffa4\001\002\000\010\041" +
    "\uffa3\043\uffa3\060\uffa3\001\002\000\010\041\uffa2\043\uffa2" +
    "\060\uffa2\001\002\000\004\060\340\001\002\000\010\041" +
    "\uffa1\043\uffa1\060\uffa1\001\002\000\004\060\uffa6\001\002" +
    "\000\010\041\332\043\333\060\uffa7\001\002\000\012\005" +
    "\323\026\325\027\327\040\324\001\002\000\014\005\323" +
    "\026\325\027\327\031\330\040\324\001\002\000\004\060" +
    "\uffa5\001\002\000\006\043\336\060\uffa9\001\002\000\014" +
    "\005\323\026\325\027\327\031\330\040\324\001\002\000" +
    "\004\060\uffa8\001\002\000\004\053\341\001\002\000\034" +
    "\003\066\011\052\020\053\022\046\023\071\024\047\032" +
    "\042\033\072\034\051\040\055\050\073\061\062\066\074" +
    "\001\002\000\004\054\344\001\002\000\034\003\uffb3\011" +
    "\uffb3\020\uffb3\022\uffb3\023\uffb3\024\uffb3\032\uffb3\033\uffb3" +
    "\034\uffb3\040\uffb3\050\uffb3\061\uffb3\066\uffb3\001\002\000" +
    "\036\003\uffb0\011\uffb0\020\uffb0\021\345\022\uffb0\023\uffb0" +
    "\024\uffb0\032\uffb0\033\uffb0\034\uffb0\040\uffb0\050\uffb0\061" +
    "\uffb0\066\uffb0\001\002\000\006\020\053\053\347\001\002" +
    "\000\034\003\uffb2\011\uffb2\020\uffb2\022\uffb2\023\uffb2\024" +
    "\uffb2\032\uffb2\033\uffb2\034\uffb2\040\uffb2\050\uffb2\061\uffb2" +
    "\066\uffb2\001\002\000\034\003\066\011\052\020\053\022" +
    "\046\023\071\024\047\032\042\033\072\034\051\040\055" +
    "\050\073\061\062\066\074\001\002\000\004\054\351\001" +
    "\002\000\034\003\uffb1\011\uffb1\020\uffb1\022\uffb1\023\uffb1" +
    "\024\uffb1\032\uffb1\033\uffb1\034\uffb1\040\uffb1\050\uffb1\061" +
    "\uffb1\066\uffb1\001\002\000\006\055\353\063\354\001\002" +
    "\000\004\005\357\001\002\000\014\012\020\015\017\016" +
    "\022\017\023\025\024\001\002\000\010\050\073\061\062" +
    "\066\074\001\002\000\034\003\uffe5\011\uffe5\020\uffe5\022" +
    "\uffe5\023\uffe5\024\uffe5\032\uffe5\033\uffe5\034\uffe5\040\uffe5" +
    "\050\uffe5\061\uffe5\066\uffe5\001\002\000\004\056\360\001" +
    "\002\000\004\063\361\001\002\000\014\012\020\015\017" +
    "\016\022\017\023\025\024\001\002\000\006\050\073\066" +
    "\074\001\002\000\010\050\073\061\062\066\074\001\002" +
    "\000\034\003\uffe4\011\uffe4\020\uffe4\022\uffe4\023\uffe4\024" +
    "\uffe4\032\uffe4\033\uffe4\034\uffe4\040\uffe4\050\uffe4\061\uffe4" +
    "\066\uffe4\001\002\000\004\040\366\001\002\000\004\060" +
    "\367\001\002\000\004\055\370\001\002\000\004\036\371" +
    "\001\002\000\020\005\105\013\117\014\113\026\111\027" +
    "\114\040\115\057\120\001\002\000\004\056\373\001\002" +
    "\000\034\003\uffb8\011\uffb8\020\uffb8\022\uffb8\023\uffb8\024" +
    "\uffb8\032\uffb8\033\uffb8\034\uffb8\040\uffb8\050\uffb8\061\uffb8" +
    "\066\uffb8\001\002\000\004\063\375\001\002\000\034\003" +
    "\066\011\052\020\053\022\046\023\071\024\047\032\042" +
    "\033\072\034\051\040\055\050\073\061\062\066\074\001" +
    "\002\000\004\030\u0100\001\002\000\004\056\uffb7\001\002" +
    "\000\004\062\u0101\001\002\000\010\036\371\037\u0102\056" +
    "\uffb4\001\002\000\004\063\u0104\001\002\000\004\056\uffb6" +
    "\001\002\000\034\003\066\011\052\020\053\022\046\023" +
    "\071\024\047\032\042\033\072\034\051\040\055\050\073" +
    "\061\062\066\074\001\002\000\004\056\uffb5\001\002\000" +
    "\010\030\uffee\054\uffee\056\uffee\001\002\000\004\062\uffa0" +
    "\001\002\000\014\005\323\026\325\027\327\031\330\040" +
    "\324\001\002\000\004\060\u010a\001\002\000\004\053\u010b" +
    "\001\002\000\034\003\066\011\052\020\053\022\046\023" +
    "\071\024\047\032\042\033\072\034\051\040\055\050\073" +
    "\061\062\066\074\001\002\000\004\054\u010d\001\002\000" +
    "\034\003\uffbd\011\uffbd\020\uffbd\022\uffbd\023\uffbd\024\uffbd" +
    "\032\uffbd\033\uffbd\034\uffbd\040\uffbd\050\uffbd\061\uffbd\066" +
    "\uffbd\001\002\000\010\030\ufff0\054\ufff0\056\ufff0\001\002" +
    "\000\004\040\u0110\001\002\000\004\061\u0111\001\002\000" +
    "\014\012\020\015\017\016\022\017\023\025\024\001\002" +
    "\000\004\060\u0113\001\002\000\004\062\ufff4\001\002\000" +
    "\034\003\066\011\052\020\053\022\046\023\071\024\047" +
    "\032\042\033\072\034\051\040\055\050\073\061\062\066" +
    "\074\001\002\000\010\030\uffea\054\uffea\056\uffea\001\002" +
    "\000\006\004\005\066\074\001\002\000\004\002\ufffd\001" +
    "\002\000\004\002\000\001\002\000\004\002\ufffe\001\002" +
    "" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0117\000\006\002\005\004\003\001\001\000\010\003" +
    "\u0117\004\u0115\046\u0116\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\005" +
    "\012\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\045\020\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\006\026\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\045" +
    "\033\001\001\000\004\006\034\001\001\000\002\001\001" +
    "\000\004\045\036\001\001\000\002\001\001\000\040\007" +
    "\057\010\044\011\043\012\063\013\042\014\060\015\066" +
    "\017\067\027\047\030\056\031\064\034\053\036\040\044" +
    "\062\046\055\001\001\000\002\001\001\000\002\001\001" +
    "\000\040\007\057\010\044\011\043\012\u010d\013\042\014" +
    "\060\015\066\017\067\027\047\030\056\031\064\034\053" +
    "\036\040\044\062\046\055\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\016\020\u0106\021\120" +
    "\022\106\024\115\026\107\036\105\001\001\000\040\007" +
    "\057\010\044\011\043\012\u0105\013\042\014\060\015\066" +
    "\017\067\027\047\030\056\031\064\034\053\036\040\044" +
    "\062\046\055\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\040\007\057\010\044\011\043\012" +
    "\320\013\042\014\060\015\066\017\067\027\047\030\056" +
    "\031\064\034\053\036\040\044\062\046\055\001\001\000" +
    "\002\001\001\000\002\001\001\000\040\007\057\010\044" +
    "\011\043\012\304\013\042\014\060\015\066\017\067\027" +
    "\047\030\056\031\064\034\053\036\040\044\062\046\055" +
    "\001\001\000\002\001\001\000\040\007\057\010\044\011" +
    "\043\012\301\013\042\014\060\015\066\017\067\027\047" +
    "\030\056\031\064\034\053\036\040\044\062\046\055\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\040\007\057\010\044\011\043\012\262\013\042\014" +
    "\060\015\066\017\067\027\047\030\056\031\064\034\053" +
    "\036\040\044\062\046\055\001\001\000\002\001\001\000" +
    "\002\001\001\000\040\007\057\010\044\011\043\012\260" +
    "\013\042\014\060\015\066\017\067\027\047\030\056\031" +
    "\064\034\053\036\040\044\062\046\055\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\036\103\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\016\020\111\021\120\022\106\024\115\026\107" +
    "\036\105\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\023\145\025\146" +
    "\001\001\000\002\001\001\000\006\016\141\046\140\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\014\021\122\022" +
    "\106\024\115\026\107\036\123\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\020\020\127\021\120\022\106\024\115" +
    "\026\107\036\105\037\130\001\001\000\002\001\001\000" +
    "\004\040\133\001\001\000\002\001\001\000\002\001\001" +
    "\000\016\020\135\021\120\022\106\024\115\026\107\036" +
    "\105\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\040\136\001\001\000\002\001\001\000\016\020\143\021" +
    "\120\022\106\024\115\026\107\036\105\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\016" +
    "\144\046\140\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\026\154\036\123\001\001\000" +
    "\006\026\151\036\123\001\001\000\006\023\153\025\152" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\023" +
    "\156\025\155\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\040\007\057\010\044\011\043\012\215\013\042\014\060" +
    "\015\066\017\067\027\047\030\056\031\064\034\053\036" +
    "\040\044\062\046\055\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\040\007\057\010\044\011\043\012" +
    "\227\013\042\014\060\015\066\017\067\027\047\030\056" +
    "\031\064\034\053\036\040\044\062\046\055\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\040\007\057\010\044\011\043\012\245\013\042\014\060" +
    "\015\066\017\067\027\047\030\056\031\064\034\053\036" +
    "\040\044\062\046\055\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\040\007\057\010\044\011\043\012\256\013\042\014" +
    "\060\015\066\017\067\027\047\030\056\031\064\034\053" +
    "\036\040\044\062\046\055\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\045\270\001\001\000\006" +
    "\015\271\046\055\001\001\000\010\014\272\015\066\046" +
    "\055\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\045\276\001\001\000\006\015\277\046" +
    "\055\001\001\000\010\014\300\015\066\046\055\001\001" +
    "\000\002\001\001\000\002\001\001\000\040\007\057\010" +
    "\044\011\043\012\303\013\042\014\060\015\066\017\067" +
    "\027\047\030\056\031\064\034\053\036\040\044\062\046" +
    "\055\001\001\000\002\001\001\000\002\001\001\000\016" +
    "\020\316\021\120\022\106\024\115\026\107\036\105\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\016\020\314\021" +
    "\120\022\106\024\115\026\107\036\105\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\042\325\043\330\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\043\334\001\001\000\006\042\333\043" +
    "\330\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\042\336\043\330\001\001\000\002\001\001\000\002\001" +
    "\001\000\040\007\057\010\044\011\043\012\341\013\042" +
    "\014\060\015\066\017\067\027\047\030\056\031\064\034" +
    "\053\036\040\044\062\046\055\001\001\000\004\035\342" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\034" +
    "\345\001\001\000\002\001\001\000\040\007\057\010\044" +
    "\011\043\012\347\013\042\014\060\015\066\017\067\027" +
    "\047\030\056\031\064\034\053\036\040\044\062\046\055" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\045\354\001\001\000\010" +
    "\014\355\015\066\046\055\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\045\361\001\001" +
    "\000\006\015\362\046\055\001\001\000\010\014\363\015" +
    "\066\046\055\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\032\371\001" +
    "\001\000\016\020\373\021\120\022\106\024\115\026\107" +
    "\036\105\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\040\007\057\010\044\011\043\012\375" +
    "\013\042\014\060\015\066\017\067\027\047\030\056\031" +
    "\064\034\053\036\040\044\062\046\055\001\001\000\004" +
    "\033\376\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\032\u0102\001\001\000\002\001\001\000\002\001\001" +
    "\000\040\007\057\010\044\011\043\012\u0104\013\042\014" +
    "\060\015\066\017\067\027\047\030\056\031\064\034\053" +
    "\036\040\044\062\046\055\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\042\u0108\043\330" +
    "\001\001\000\002\001\001\000\002\001\001\000\040\007" +
    "\057\010\044\011\043\012\u010b\013\042\014\060\015\066" +
    "\017\067\027\047\030\056\031\064\034\053\036\040\044" +
    "\062\046\055\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\045\u0111\001\001\000\002\001\001\000\002\001\001" +
    "\000\040\007\057\010\044\011\043\012\u0114\013\042\014" +
    "\060\015\066\017\067\027\047\030\056\031\064\034\053" +
    "\036\040\044\062\046\055\001\001\000\002\001\001\000" +
    "\010\003\u0118\004\u0115\046\u0116\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



   ArrayList<String> errores = new ArrayList();
   public static Node root;
   public int cont = 1;
    public void report_error(String message,Object info){
                StringBuffer m=new StringBuffer("Error ");
                if(info instanceof Symbol){
                        Symbol s=((Symbol)info);

                        if(s.left>=0){
                                m.append("en linea "+(s.right+1));
                        if(s.right>=0)
                                m.append(", columna "+(s.left+1));
                        }
                }
                m.append(": "+message);
                System.err.println(m);
                errores.add(m+"");
        }

        public void report_fatal_error(String message, Object info){
                report_error("fatal"+ message, info);
                //System.exit(1);
        }

        public void unrecovered_syntax_error(Symbol cur_token){
                System.out.println(cur_token.toString());
                System.err.println("CRITICO: At line "+(cur_token.right)+", column "+cur_token.left);
                errores.add("CRITICO: At line "+(cur_token.right)+", column "+cur_token.left);
                //System.exit(1);
        }

        protected void report_expected_token_ids() {
	        List<Integer> ids = expected_token_ids();
	        LinkedList<String> list = new LinkedList<String>();
	        for (Integer expected : ids)
		        list.add(symbl_name_from_id(expected));
                System.err.println("Se esperaba cualquiera de estas: "+list);
                errores.add("Se esperaba cualquiera de estas: "+list);
	}
	
    /*    public String getToken(int id){
        String value = Sym.terminalNames[id];
        switch(id){
            case Sym.L_KEY:
                return "{";
            case Sym.R_KEY:
                return "}";
            case Sym.L_PAR:
                return "(";
            case Sym.R_PAR:
                return ")";
            case Sym.L_BRACKET:
                return "[";
            case Sym.R_BRACKET:
                return "]";
            default:
                return value;
        }
    }   
    
    @Override
    public void syntax_error(Symbol s){
        String lex = s.value != null ? s.value.toString() : getToken(s.sym);
        int fila = s.right;
        int columna = s.left;
        String err = "";
        if(lex.equals("EOF")){
            err = "Error sintáctico: Se esperaba el token } al final" ;
        } else {
            err = "Error sintáctico: " +  " fila: " + fila + " columna: " + columna + ", No se esperaba el token: " + lex;
        }

        System.err.println(err);
        errores.add(err);
    }
    @Override
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception {
        String lex = s.value != null ? s.value.toString() : getToken(s.sym);
        int fila = s.right;
        int columna = s.left;
        String err = "";
        if(lex.equals("EOF")){
            err = "";
        }else{
            err = "Error sintáctico, pánico: " + " fila: " + fila + " columna: " + columna + ", No se esperaba el token: " + lex;
        }
        System.err.println(err);
        errores.add(err);
    } */
    



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= inicio EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Node start_val = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // inicio ::= dec_funcion dec_gen_fun 
            {
              Node RESULT =null;
		int dgleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dgright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Node dg = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int dgfleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dgfright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Node dgf = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    System.err.println("Entra a inicio");

    Node node = new Node();
    node.setEtiqueta("INICIO");
    node.setID(parser.cont);
    node.addHijos((Node) dg);
    node.addHijos((Node) dgf);
    
    parser.root = node;
    RESULT = node; 
    
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // empty ::= EMPTY 
            {
              Node RESULT =null;
		
                System.err.println("Entra a transicion vacia");

                Node node = new Node();
                RESULT = node;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("empty",36, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // dec_gen_fun ::= dec_funcion dec_gen_fun 
            {
              Node RESULT =null;
		int dfleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dfright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Node df = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int dgfleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dgfright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Node dgf = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                System.err.println("Entra a dec_gen_fun");

                Node node = new Node();
                RESULT = node;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("dec_gen_fun",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // dec_gen_fun ::= empty 
            {
              Node RESULT =null;
		
                Node node = new Node();
                RESULT = node;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("dec_gen_fun",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // dec_funcion ::= FUNCTION ID L_PAR parametros COLON tipo L_KEY dec_general R_KEY 
            {
              Node RESULT =null;
		
               System.err.println("Entra a dec_funcion");

                Node node = new Node();
                RESULT = node;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("dec_funcion",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // parametros ::= VARIABLE ID COLON tipo nuevo_parametro R_PAR 
            {
              Node RESULT =null;
		
                System.err.println("Entra a parametros 1");
                
                Node node = new Node();
                RESULT = node;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // parametros ::= VARIABLE ID COLON tipo R_PAR 
            {
              Node RESULT =null;
		
                System.err.println("Entra a parametros 1");
                Node node = new Node();
                RESULT = node;
               
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // parametros ::= R_PAR 
            {
              Node RESULT =null;
		
                System.err.println("Entra a parametros 1");
                Node node = new Node();
                RESULT = node;
               
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // nuevo_parametro ::= COMMA VARIABLE ID COLON tipo nuevo_parametro 
            {
              Node RESULT =null;
		
                System.err.println("Entra a nuevo_parametro 1");
                Node node = new Node();
                RESULT = node;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("nuevo_parametro",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // nuevo_parametro ::= COMMA VARIABLE ID COLON tipo 
            {
              Node RESULT =null;
		
                System.err.println("Entra a nuevo_parametro 2");
                Node node = new Node();
                RESULT = node;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("nuevo_parametro",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // func_lenguaje ::= func_input 
            {
              Node RESULT =null;
		
                    System.err.println("Entra a func_lenguaje 1");
                    Node node = new Node();
                    RESULT = node;
                  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("func_lenguaje",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // func_lenguaje ::= func_output 
            {
              Node RESULT =null;
		
                    System.err.println("Entra a func_lenguaje 2");
                    Node node = new Node();
                    RESULT = node;
                  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("func_lenguaje",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // func_input ::= INPUT L_PAR ID COMMA tipo R_PAR 
            {
              Node RESULT =null;
		
                System.err.println("Entra a func_input");
                Node node = new Node();
                RESULT = node;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("func_input",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // func_output ::= OUTPUT L_PAR CONSTSTRING R_PAR 
            {
              Node RESULT =null;
		
                System.err.println("Entra a func_output 1");
                Node node = new Node();
                RESULT = node;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("func_output",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // func_output ::= OUTPUT L_PAR NUM R_PAR 
            {
              Node RESULT =null;
		
                System.err.println("Entra a func_output 2");
                Node node = new Node();
                RESULT = node;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("func_output",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // func_output ::= OUTPUT L_PAR ID R_PAR 
            {
              Node RESULT =null;
		
                System.err.println("Entra a func_output 3");
                Node node = new Node();
                RESULT = node;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("func_output",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // dec_general ::= dec_variable dec_general 
            {
              Node RESULT =null;
		int dgleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dgright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Node dg = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                System.err.println("Entra a dec_general de vairable");
                Node node = new Node();
                RESULT = node;
               
              CUP$parser$result = parser.getSymbolFactory().newSymbol("dec_general",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // dec_general ::= dec_var dec_general 
            {
              Node RESULT =null;
		
                System.err.println("Entra a dec_general de vairable2");

                Node node = new Node();
                RESULT = node;
               
              CUP$parser$result = parser.getSymbolFactory().newSymbol("dec_general",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // dec_general ::= dec_while dec_general 
            {
              Node RESULT =null;
		
                System.err.println("Entra a dec_general de while");

                Node node = new Node();
                RESULT = node;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("dec_general",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // dec_general ::= dec_for dec_general 
            {
              Node RESULT =null;
		
                System.err.println("Entra a dec_general de for");
                Node node = new Node();
                RESULT = node;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("dec_general",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // dec_general ::= dec_switch dec_general 
            {
              Node RESULT =null;
		
                System.err.println("Entra a dec_general de switch");
                Node node = new Node();
                RESULT = node;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("dec_general",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // dec_general ::= dec_if dec_general 
            {
              Node RESULT =null;
		
               System.err.println("Entra a dec_general de if");
                Node node = new Node();
                RESULT = node;
               
              CUP$parser$result = parser.getSymbolFactory().newSymbol("dec_general",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // dec_general ::= dec_llamada_funcion SEMICOLON dec_general 
            {
              Node RESULT =null;
		
                System.err.println("Entra a dec_general de llamada_funcion");
                Node node = new Node();
                RESULT = node;
               
              CUP$parser$result = parser.getSymbolFactory().newSymbol("dec_general",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // dec_general ::= dec_var_inst dec_general 
            {
              Node RESULT =null;
		
                System.err.println("Entra a dec_general de dec_var_inst");
                Node node = new Node();
                RESULT = node;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("dec_general",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // dec_general ::= func_lenguaje SEMICOLON dec_general 
            {
              Node RESULT =null;
		
                System.err.println("Entra a dec_general de func_lenguaje");
                Node node = new Node();
                RESULT = node;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("dec_general",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // dec_general ::= dec_return SEMICOLON 
            {
              Node RESULT =null;
		
                System.err.println("Entra a dec_general de dec_return");
                Node node = new Node();
                RESULT = node;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("dec_general",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // dec_general ::= error 
            {
              Node RESULT =null;
		
                System.err.println("Entra a dec_general nos vamos para el error ");
                Node node = new Node();
                RESULT = node;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("dec_general",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // dec_variable ::= VARIABLE ID COLON tipo dec_var 
            {
              Node RESULT =null;
		
                Node node = new Node();
                RESULT = node;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("dec_variable",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // dec_variable ::= VARIABLE ID L_BRACKET NUM R_BRACKET COLON tipo dec_inst dec_var 
            {
              Node RESULT =null;
		
                Node node = new Node();
                RESULT = node;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("dec_variable",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // dec_var ::= dec_inst SEMICOLON 
            {
              Node RESULT =null;
		
                Node node = new Node();
                RESULT = node;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("dec_var",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // dec_var ::= COMMA ID COLON tipo dec_inst dec_var 
            {
              Node RESULT =null;
		
                Node node = new Node();
                RESULT = node;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("dec_var",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // dec_var ::= COMMA ID L_BRACKET NUM R_BRACKET COLON tipo dec_inst dec_var 
            {
              Node RESULT =null;
		
                Node node = new Node();
                RESULT = node;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("dec_var",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // dec_inst ::= OPASIGN ID 
            {
              Node RESULT =null;
		
                Node node = new Node();
                RESULT = node;
             
              CUP$parser$result = parser.getSymbolFactory().newSymbol("dec_inst",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // dec_inst ::= OPASIGN ID DOT AT L_PAR NUM R_PAR 
            {
              Node RESULT =null;
		
                Node node = new Node();
                RESULT = node;
             
              CUP$parser$result = parser.getSymbolFactory().newSymbol("dec_inst",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // dec_inst ::= OPASIGN NUM 
            {
              Node RESULT =null;
		
                Node node = new Node();
                RESULT = node;
             
              CUP$parser$result = parser.getSymbolFactory().newSymbol("dec_inst",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // dec_inst ::= OPASIGN CONSTSTRING 
            {
              Node RESULT =null;
		
                Node node = new Node();
                RESULT = node;
             
              CUP$parser$result = parser.getSymbolFactory().newSymbol("dec_inst",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // dec_inst ::= OPASIGN CONSTCHAR 
            {
              Node RESULT =null;
		
                Node node = new Node();
                RESULT = node;
             
              CUP$parser$result = parser.getSymbolFactory().newSymbol("dec_inst",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // dec_inst ::= OPASIGN TRUE 
            {
              Node RESULT =null;
		
                Node node = new Node();
                RESULT = node;
             
              CUP$parser$result = parser.getSymbolFactory().newSymbol("dec_inst",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // dec_inst ::= OPASIGN FALSE 
            {
              Node RESULT =null;
		
                Node node = new Node();
                RESULT = node;
             
              CUP$parser$result = parser.getSymbolFactory().newSymbol("dec_inst",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // dec_inst ::= OPASIGN dec_llamada_funcion 
            {
              Node RESULT =null;
		
                Node node = new Node();
                RESULT = node;
             
              CUP$parser$result = parser.getSymbolFactory().newSymbol("dec_inst",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // dec_inst ::= OPASIGN L_KEY valor arr_cont R_KEY 
            {
              Node RESULT =null;
		
                Node node = new Node();
                RESULT = node;
             
              CUP$parser$result = parser.getSymbolFactory().newSymbol("dec_inst",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // dec_inst ::= empty 
            {
              Node RESULT =null;
		
                Node node = new Node();
                RESULT = node;
             
              CUP$parser$result = parser.getSymbolFactory().newSymbol("dec_inst",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // arr_cont ::= COMMA valor arr_cont 
            {
              Node RESULT =null;
		
                Node node = new Node();
                RESULT = node;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("arr_cont",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // arr_cont ::= empty 
            {
              Node RESULT =null;
		
                Node node = new Node();
                RESULT = node;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("arr_cont",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // dec_var_inst ::= ID OPASIGN valor SEMICOLON 
            {
              Node RESULT =null;
		
                Node node = new Node();
                RESULT = node;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("dec_var_inst",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // dec_var_inst ::= ID DOT AT L_PAR NUM R_PAR OPASIGN valor SEMICOLON 
            {
              Node RESULT =null;
		
                Node node = new Node();
                RESULT = node;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("dec_var_inst",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // valor ::= CONSTSTRING 
            {
              Node RESULT =null;
		
                Node node = new Node();
                RESULT = node;
           
              CUP$parser$result = parser.getSymbolFactory().newSymbol("valor",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // valor ::= CONSTCHAR 
            {
              Node RESULT =null;
		
                Node node = new Node();
                RESULT = node;
           
              CUP$parser$result = parser.getSymbolFactory().newSymbol("valor",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // valor ::= TRUE 
            {
              Node RESULT =null;
		
                Node node = new Node();
                RESULT = node;
           
              CUP$parser$result = parser.getSymbolFactory().newSymbol("valor",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // valor ::= FALSE 
            {
              Node RESULT =null;
		
                Node node = new Node();
                RESULT = node;
           
              CUP$parser$result = parser.getSymbolFactory().newSymbol("valor",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // valor ::= math_op 
            {
              Node RESULT =null;
		
                Node node = new Node();
                RESULT = node;
           
              CUP$parser$result = parser.getSymbolFactory().newSymbol("valor",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // valor ::= dec_llamada_funcion 
            {
              Node RESULT =null;
		
                Node node = new Node();
                RESULT = node;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("valor",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // valor ::= ID 
            {
              Node RESULT =null;
		
                Node node = new Node();
                RESULT = node;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("valor",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // math_op ::= s_op 
            {
              Node RESULT =null;
		
                Node node = new Node();
                RESULT = node;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("math_op",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // math_op ::= m_op 
            {
              Node RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("math_op",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // s_op ::= val sum_op 
            {
              Node RESULT =null;
		
                Node node = new Node();
                RESULT = node;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("s_op",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // sum_op ::= OPSUM val sum_op 
            {
              Node RESULT =null;
		
                Node node = new Node();
                RESULT = node;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sum_op",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // sum_op ::= OPSUM val mult_op 
            {
              Node RESULT =null;
		
                Node node = new Node();
                RESULT = node;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sum_op",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // sum_op ::= OPSUM val 
            {
              Node RESULT =null;
		
                Node node = new Node();
                RESULT = node;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sum_op",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // m_op ::= val mult_op 
            {
              Node RESULT =null;
		
                Node node = new Node();
                RESULT = node;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("m_op",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // mult_op ::= OPMULT val mult_op 
            {
              Node RESULT =null;
		
                Node node = new Node();
                RESULT = node;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("mult_op",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // mult_op ::= OPMULT val sum_op 
            {
              Node RESULT =null;
		
                Node node = new Node();
                RESULT = node;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("mult_op",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // mult_op ::= OPMULT val 
            {
              Node RESULT =null;
		
                Node node = new Node();
                RESULT = node;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("mult_op",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // val ::= ID 
            {
              Node RESULT =null;
		
                Node node = new Node();
                RESULT = node;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("val",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // val ::= NUM 
            {
              Node RESULT =null;
		
                Node node = new Node();
                RESULT = node;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("val",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // val ::= dec_llamada_funcion 
            {
              Node RESULT =null;
		
                Node node = new Node();
                RESULT = node;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("val",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // val ::= L_PAR math_op R_PAR 
            {
              Node RESULT =null;
		
                Node node = new Node();
                RESULT = node;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("val",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // dec_while ::= WHILE L_PAR condicion R_PAR L_KEY dec_general R_KEY 
            {
              Node RESULT =null;
		
                System.err.println("Entra a dec_while");
                Node node = new Node();
                RESULT = node;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("dec_while",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // dec_for ::= FOR L_PAR ID COMMA NUM UPTO COMMA STEP L_PAR NUM R_PAR R_PAR L_KEY dec_general R_KEY 
            {
              Node RESULT =null;
		
                System.err.println("Entra a dec_for 1");
                Node node = new Node();
                RESULT = node;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("dec_for",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-14)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // dec_for ::= FOR L_PAR ID COMMA NUM DOWNTO NUM COMMA STEP L_PAR NUM R_PAR R_PAR L_KEY dec_general R_KEY 
            {
              Node RESULT =null;
		
                System.err.println("Entra a dec_for 2");
                Node node = new Node();
                RESULT = node;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("dec_for",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-15)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // dec_for ::= FOR L_PAR VARIABLE ID COLON INTEGER COMMA NUM UPTO NUM COMMA STEP L_PAR NUM R_PAR R_PAR L_KEY dec_general R_KEY 
            {
              Node RESULT =null;
		
                System.err.println("Entra a dec_for 3");
                Node node = new Node();
                RESULT = node;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("dec_for",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-18)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // dec_for ::= FOR L_PAR VARIABLE ID COLON INTEGER COMMA NUM DOWNTO NUM COMMA STEP L_PAR NUM R_PAR R_PAR L_BRACKET dec_general R_BRACKET 
            {
              Node RESULT =null;
		
                System.err.println("Entra a dec_for 4");
                Node node = new Node();
                RESULT = node;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("dec_for",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-18)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // dec_switch ::= SWITCH L_PAR ID R_PAR L_BRACKET list_op R_BRACKET 
            {
              Node RESULT =null;
		
                System.err.println("Entra a dec_switch");
                Node node = new Node();
                RESULT = node;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("dec_switch",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // list_op ::= OPTION valor COLON dec_general new_op 
            {
              Node RESULT =null;
		
                System.err.println("Entra a list_op");
                Node node = new Node();
                RESULT = node;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("list_op",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // new_op ::= BREAK SEMICOLON list_op 
            {
              Node RESULT =null;
		
                System.err.println("Entra a new_op 1");
                Node node = new Node();
                RESULT = node;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("new_op",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // new_op ::= BREAK SEMICOLON DEFAULT COLON dec_general 
            {
              Node RESULT =null;
		
                System.err.println("Entra a new_op 2");

                Node node = new Node();
                RESULT = node;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("new_op",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // new_op ::= BREAK SEMICOLON 
            {
              Node RESULT =null;
		
                System.err.println("Entra a new_op 3");

                Node node = new Node();
                RESULT = node;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("new_op",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // dec_if ::= IF L_PAR condicion R_PAR L_KEY dec_general dec_else 
            {
              Node RESULT =null;
		
                System.err.println("Entra a dec_if");

                Node node = new Node();
                RESULT = node;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("dec_if",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // dec_else ::= R_KEY ELSE dec_if 
            {
              Node RESULT =null;
		
                System.err.println("Entra a dec_else 1");

                Node node = new Node();
                RESULT = node;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("dec_else",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // dec_else ::= R_KEY ELSE L_KEY dec_general R_KEY 
            {
              Node RESULT =null;
		
                System.err.println("Entra a dec_else 1");
                Node node = new Node();
                RESULT = node;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("dec_else",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // dec_else ::= R_KEY 
            {
              Node RESULT =null;
		
                System.err.println("Entra a dec_else 1");
                Node node = new Node();
                RESULT = node;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("dec_else",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // dec_llamada_funcion ::= ID L_PAR llamada_parametros 
            {
              Node RESULT =null;
		
                System.err.println("Entra a dec_llamada_funcion");
                Node node = new Node();
                RESULT = node;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("dec_llamada_funcion",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // llamada_parametros ::= valor lista_valores R_PAR 
            {
              Node RESULT =null;
		
                System.err.println("Entra a llamada_parametros 1");
                Node node = new Node();
                RESULT = node;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("llamada_parametros",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // llamada_parametros ::= valor R_PAR 
            {
              Node RESULT =null;
		
                System.err.println("Entra a llamada_parametros 2");
                Node node = new Node();
                RESULT = node;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("llamada_parametros",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // llamada_parametros ::= R_PAR 
            {
              Node RESULT =null;
		
                System.err.println("Entra a llamada_parametros 3");
                Node node = new Node();
                RESULT = node;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("llamada_parametros",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // lista_valores ::= COMMA valor lista_valores 
            {
              Node RESULT =null;
		
                System.err.println("Entra a lista_valores 1");
                Node node = new Node();
                RESULT = node;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_valores",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // lista_valores ::= COMMA valor 
            {
              Node RESULT =null;
		
                System.err.println("Entra a lista_valores 2");

                Node node = new Node();
                RESULT = node;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_valores",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // condicion ::= valor_cond OPREL valor_cond 
            {
              Node RESULT =null;
		
                Node node = new Node();
                RESULT = node;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("condicion",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // condicion ::= valor_cond OPREL valor_cond OPLOG condicion 
            {
              Node RESULT =null;
		
                Node node = new Node();
                RESULT = node;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("condicion",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // condicion ::= valor_cond 
            {
              Node RESULT =null;
		
                Node node = new Node();
                RESULT = node;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("condicion",32, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // condicion ::= NULL 
            {
              Node RESULT =null;
		
                Node node = new Node();
                RESULT = node;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("condicion",32, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // condicion ::= valor_cond OPLOG condicion 
            {
              Node RESULT =null;
		
                Node node = new Node();
                RESULT = node;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("condicion",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // valor_cond ::= NUM 
            {
              Node RESULT =null;
		
                System.err.println("Entra a valor_cond 1");
                Node node = new Node();
                RESULT = node;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("valor_cond",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // valor_cond ::= ID 
            {
              Node RESULT =null;
		
                System.err.println("Entra a valor_cond 2");
                Node node = new Node();
                RESULT = node;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("valor_cond",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // valor_cond ::= TRUE 
            {
              Node RESULT =null;
		
                System.err.println("Entra a valor_cond 3");
                Node node = new Node();
                RESULT = node;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("valor_cond",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // valor_cond ::= FALSE 
            {
              Node RESULT =null;
		
                System.err.println("Entra a valor_cond 4");
                Node node = new Node();
                RESULT = node;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("valor_cond",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // dec_return ::= RETURN valor 
            {
              Node RESULT =null;
		
                System.err.println("Entra a dec_return 1");

                Node node = new Node();
                RESULT = node;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("dec_return",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // dec_return ::= RETURN 
            {
              Node RESULT =null;
		
                System.err.println("Entra a dec_return 2");  
                Node node = new Node();
                RESULT = node;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("dec_return",34, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // tipo ::= BOOLEAN 
            {
              Node RESULT =null;
		
                System.err.println("Entra a tipo 1");
                Node node = new Node();
                RESULT = node;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo",35, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // tipo ::= CHARACTER 
            {
              Node RESULT =null;
		
                System.err.println("Entra a tipo 2");
                Node node = new Node();
                RESULT = node;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo",35, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // tipo ::= INTEGER 
            {
              Node RESULT =null;
		
                System.err.println("Entra a tipo 3");
                Node node = new Node();
                RESULT = node;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo",35, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // tipo ::= VOID 
            {
              Node RESULT =null;
		
                System.err.println("Entra a tipo 4");
                Node node = new Node();
                RESULT = node;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo",35, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // tipo ::= STRING 
            {
              Node RESULT =null;
		  
                System.err.println("Entra a tipo 5");
                Node node = new Node();
                RESULT = node;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo",35, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
