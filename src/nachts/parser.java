
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package nachts;

import java_cup.runtime.*;
import java.util.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return Sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\177\000\002\002\004\000\002\002\004\000\002\002" +
    "\004\000\002\003\004\000\002\003\002\000\002\003\004" +
    "\000\002\004\014\000\002\004\014\000\002\005\007\000" +
    "\002\005\006\000\002\005\011\000\002\005\010\000\002" +
    "\005\013\000\002\005\012\000\002\005\002\000\002\006" +
    "\010\000\002\006\007\000\002\006\012\000\002\006\011" +
    "\000\002\006\014\000\002\006\013\000\002\010\004\000" +
    "\002\010\004\000\002\010\004\000\002\010\004\000\002" +
    "\010\004\000\002\010\005\000\002\010\004\000\002\010" +
    "\005\000\002\010\003\000\002\010\004\000\002\010\002" +
    "\000\002\011\007\000\002\011\012\000\002\011\015\000" +
    "\002\012\004\000\002\012\003\000\002\012\010\000\002" +
    "\012\013\000\002\012\016\000\002\012\004\000\002\013" +
    "\004\000\002\013\004\000\002\013\004\000\002\013\004" +
    "\000\002\013\004\000\002\013\004\000\002\013\004\000" +
    "\002\013\004\000\002\013\004\000\002\044\006\000\002" +
    "\044\004\000\002\045\005\000\002\045\002\000\002\043" +
    "\006\000\002\014\005\000\002\014\002\000\002\015\006" +
    "\000\002\015\013\000\002\015\006\000\002\015\006\000" +
    "\002\015\005\000\002\015\015\000\002\016\003\000\002" +
    "\016\003\000\002\016\003\000\002\016\003\000\002\016" +
    "\003\000\002\016\003\000\002\017\004\000\002\020\005" +
    "\000\002\020\002\000\002\021\004\000\002\022\005\000" +
    "\002\022\002\000\002\023\003\000\002\023\010\000\002" +
    "\023\012\000\002\023\003\000\002\023\003\000\002\023" +
    "\005\000\002\024\011\000\002\025\022\000\002\025\022" +
    "\000\002\025\025\000\002\025\025\000\002\026\011\000" +
    "\002\027\007\000\002\030\005\000\002\030\007\000\002" +
    "\030\004\000\002\031\012\000\002\031\004\000\002\032" +
    "\012\000\002\032\006\000\002\032\002\000\002\033\006" +
    "\000\002\033\010\000\002\033\006\000\002\033\004\000" +
    "\002\034\004\000\002\034\003\000\002\034\002\000\002" +
    "\007\004\000\002\007\003\000\002\035\005\000\002\035" +
    "\004\000\002\035\004\000\002\037\007\000\002\037\003" +
    "\000\002\050\005\000\002\046\005\000\002\046\002\000" +
    "\002\047\004\000\002\047\002\000\002\047\004\000\002" +
    "\040\003\000\002\040\003\000\002\040\003\000\002\041" +
    "\004\000\002\041\003\000\002\042\003\000\002\042\003" +
    "\000\002\042\003\000\002\042\003\000\002\042\003\000" +
    "\002\042\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0163\000\006\003\005\004\006\001\002\000\010\002" +
    "\ufffd\003\u0162\004\006\001\002\000\006\003\005\004\006" +
    "\001\002\000\004\043\011\001\002\000\004\002\010\001" +
    "\002\000\004\002\001\001\002\000\004\062\012\001\002" +
    "\000\006\011\014\063\ufff3\001\002\000\004\063\061\001" +
    "\002\000\004\043\015\001\002\000\006\060\016\066\017" +
    "\001\002\000\004\061\050\001\002\000\016\012\021\014" +
    "\026\020\020\021\023\022\024\030\025\001\002\000\016" +
    "\003\uff86\053\uff86\056\uff86\063\uff86\064\uff86\065\uff86\001" +
    "\002\000\016\003\uff84\053\uff84\056\uff84\063\uff84\064\uff84" +
    "\065\uff84\001\002\000\006\063\ufff8\064\027\001\002\000" +
    "\016\003\uff87\053\uff87\056\uff87\063\uff87\064\uff87\065\uff87" +
    "\001\002\000\016\003\uff88\053\uff88\056\uff88\063\uff88\064" +
    "\uff88\065\uff88\001\002\000\016\003\uff85\053\uff85\056\uff85" +
    "\063\uff85\064\uff85\065\uff85\001\002\000\016\003\uff83\053" +
    "\uff83\056\uff83\063\uff83\064\uff83\065\uff83\001\002\000\004" +
    "\011\031\001\002\000\004\063\ufff9\001\002\000\004\043" +
    "\032\001\002\000\006\060\033\066\034\001\002\000\004" +
    "\061\037\001\002\000\016\012\021\014\026\020\020\021" +
    "\023\022\024\030\025\001\002\000\006\063\ufff1\064\027" +
    "\001\002\000\004\063\ufff2\001\002\000\006\060\040\066" +
    "\041\001\002\000\004\061\044\001\002\000\016\012\021" +
    "\014\026\020\020\021\023\022\024\030\025\001\002\000" +
    "\006\063\uffef\064\027\001\002\000\004\063\ufff0\001\002" +
    "\000\004\066\045\001\002\000\016\012\021\014\026\020" +
    "\020\021\023\022\024\030\025\001\002\000\006\063\uffed" +
    "\064\027\001\002\000\004\063\uffee\001\002\000\006\060" +
    "\051\066\052\001\002\000\004\061\055\001\002\000\016" +
    "\012\021\014\026\020\020\021\023\022\024\030\025\001" +
    "\002\000\006\063\ufff6\064\027\001\002\000\004\063\ufff7" +
    "\001\002\000\004\066\056\001\002\000\016\012\021\014" +
    "\026\020\020\021\023\022\024\030\025\001\002\000\006" +
    "\063\ufff4\064\027\001\002\000\004\063\ufff5\001\002\000" +
    "\004\066\062\001\002\000\020\012\021\014\026\020\020" +
    "\021\023\022\024\030\025\071\064\001\002\000\004\056" +
    "\u015d\001\002\000\004\056\065\001\002\000\030\003\105" +
    "\011\075\023\076\025\071\026\107\027\072\035\067\036" +
    "\110\037\074\043\100\057\uffe2\001\002\000\004\065\u015b" +
    "\001\002\000\004\062\u0156\001\002\000\032\003\105\011" +
    "\075\023\076\025\071\026\107\027\072\033\uffe2\035\067" +
    "\036\110\037\074\043\100\057\uffe2\001\002\000\004\062" +
    "\u014f\001\002\000\032\003\124\005\112\015\114\016\126" +
    "\017\116\031\120\032\121\035\067\036\110\043\122\062" +
    "\127\065\uff89\001\002\000\032\003\105\011\075\023\076" +
    "\025\071\026\107\027\072\033\uffe2\035\067\036\110\037" +
    "\074\043\100\057\uffe2\001\002\000\004\062\u013c\001\002" +
    "\000\004\043\367\001\002\000\004\062\321\001\002\000" +
    "\032\003\105\011\075\023\076\025\071\026\107\027\072" +
    "\033\uffe2\035\067\036\110\037\074\043\100\057\uffe2\001" +
    "\002\000\016\052\272\053\267\054\271\055\270\062\141" +
    "\070\273\001\002\000\032\003\105\011\075\023\076\025" +
    "\071\026\107\027\072\033\uffe2\035\067\036\110\037\074" +
    "\043\100\057\uffe2\001\002\000\004\065\264\001\002\000" +
    "\004\057\263\001\002\000\032\003\105\011\075\023\076" +
    "\025\071\026\107\027\072\033\uffe2\035\067\036\110\037" +
    "\074\043\100\057\uffe2\001\002\000\016\003\260\023\076" +
    "\033\uffe4\057\uffe4\063\137\065\257\001\002\000\032\003" +
    "\105\011\075\023\076\025\071\026\107\027\072\033\uffe2" +
    "\035\067\036\110\037\074\043\100\057\uffe2\001\002\000" +
    "\004\062\170\001\002\000\004\062\111\001\002\000\030" +
    "\003\124\005\112\015\114\016\126\017\116\031\120\032" +
    "\121\035\067\036\110\043\122\062\127\001\002\000\062" +
    "\003\uffb3\006\uffb3\007\uffb3\011\uffb3\023\uffb3\025\uffb3\026" +
    "\uffb3\027\uffb3\033\uffb3\035\uffb3\036\uffb3\037\uffb3\043\uffb3" +
    "\044\uffb3\046\uffb3\050\uffb3\051\uffb3\053\uffb3\057\uffb3\061" +
    "\uffb3\063\uffb3\064\uffb3\065\uffb3\066\uffb3\001\002\000\062" +
    "\003\uffb2\006\uffb2\007\uffb2\011\uffb2\023\uffb2\025\uffb2\026" +
    "\uffb2\027\uffb2\033\uffb2\035\uffb2\036\uffb2\037\uffb2\043\uffb2" +
    "\044\uffb2\046\uffb2\050\uffb2\051\uffb2\053\uffb2\057\uffb2\061" +
    "\uffb2\063\uffb2\064\uffb2\065\uffb2\066\uffb2\001\002\000\016" +
    "\003\uffbe\057\uffbe\063\uffbe\064\uffbe\065\uffbe\066\uffbe\001" +
    "\002\000\062\003\uffb7\006\uffb7\007\uffb7\011\uffb7\023\uffb7" +
    "\025\uffb7\026\uffb7\027\uffb7\033\uffb7\035\uffb7\036\uffb7\037" +
    "\uffb7\043\uffb7\044\uffb7\046\uffb7\050\165\051\uffb7\053\uffb7" +
    "\057\uffb7\061\uffb7\063\uffb7\064\uffb7\065\uffb7\066\uffb7\001" +
    "\002\000\016\003\uffc1\057\uffc1\063\uffc1\064\uffc1\065\uffc1" +
    "\066\uffc1\001\002\000\010\003\157\063\uff99\064\155\001" +
    "\002\000\016\003\uffc0\057\uffc0\063\uffc0\064\uffc0\065\uffc0" +
    "\066\uffc0\001\002\000\016\003\uffbf\057\uffbf\063\uffbf\064" +
    "\uffbf\065\uffbf\066\uffbf\001\002\000\066\003\uffb6\006\uffb6" +
    "\007\uffb6\011\uffb6\023\uffb6\025\uffb6\026\uffb6\027\uffb6\033" +
    "\uffb6\035\uffb6\036\uffb6\037\uffb6\043\uffb6\044\uffb6\046\uffb6" +
    "\050\uffb6\051\uffb6\053\uffb6\057\uffb6\061\uffb6\062\141\063" +
    "\uffb6\064\uffb6\065\uffb6\066\uffb6\070\142\001\002\000\004" +
    "\063\140\001\002\000\004\063\137\001\002\000\060\003" +
    "\uffba\006\uffba\007\uffba\011\uffba\023\uffba\025\uffba\026\uffba" +
    "\027\uffba\033\uffba\035\uffba\036\uffba\037\uffba\043\uffba\044" +
    "\uffba\046\uffba\051\134\053\uffba\057\uffba\061\uffba\063\uffba" +
    "\064\uffba\065\uffba\066\uffba\001\002\000\016\003\uffc2\057" +
    "\uffc2\063\uffc2\064\uffc2\065\uffc2\066\uffc2\001\002\000\016" +
    "\003\124\005\112\035\067\036\110\043\122\062\127\001" +
    "\002\000\016\003\uffbd\057\uffbd\063\uffbd\064\uffbd\065\uffbd" +
    "\066\uffbd\001\002\000\004\063\132\001\002\000\062\003" +
    "\uffb1\006\uffb1\007\uffb1\011\uffb1\023\uffb1\025\uffb1\026\uffb1" +
    "\027\uffb1\033\uffb1\035\uffb1\036\uffb1\037\uffb1\043\uffb1\044" +
    "\uffb1\046\uffb1\050\uffb1\051\uffb1\053\uffb1\057\uffb1\061\uffb1" +
    "\063\uffb1\064\uffb1\065\uffb1\066\uffb1\001\002\000\056\003" +
    "\uffbc\006\uffbc\007\uffbc\011\uffbc\023\uffbc\025\uffbc\026\uffbc" +
    "\027\uffbc\033\uffbc\035\uffbc\036\uffbc\037\uffbc\043\uffbc\044" +
    "\uffbc\046\uffbc\053\uffbc\057\uffbc\061\uffbc\063\uffbc\064\uffbc" +
    "\065\uffbc\066\uffbc\001\002\000\016\003\124\005\112\035" +
    "\067\036\110\043\122\062\127\001\002\000\060\003\uffba" +
    "\006\uffba\007\uffba\011\uffba\023\uffba\025\uffba\026\uffba\027" +
    "\uffba\033\uffba\035\uffba\036\uffba\037\uffba\043\uffba\044\uffba" +
    "\046\uffba\051\134\053\uffba\057\uffba\061\uffba\063\uffba\064" +
    "\uffba\065\uffba\066\uffba\001\002\000\056\003\uffbb\006\uffbb" +
    "\007\uffbb\011\uffbb\023\uffbb\025\uffbb\026\uffbb\027\uffbb\033" +
    "\uffbb\035\uffbb\036\uffbb\037\uffbb\043\uffbb\044\uffbb\046\uffbb" +
    "\053\uffbb\057\uffbb\061\uffbb\063\uffbb\064\uffbb\065\uffbb\066" +
    "\uffbb\001\002\000\062\003\uff9e\006\uff9e\007\uff9e\011\uff9e" +
    "\023\uff9e\025\uff9e\026\uff9e\027\uff9e\033\uff9e\035\uff9e\036" +
    "\uff9e\037\uff9e\043\uff9e\044\uff9e\046\uff9e\050\uff9e\051\uff9e" +
    "\053\uff9e\057\uff9e\061\uff9e\063\uff9e\064\uff9e\065\uff9e\066" +
    "\uff9e\001\002\000\062\003\uff9f\006\uff9f\007\uff9f\011\uff9f" +
    "\023\uff9f\025\uff9f\026\uff9f\027\uff9f\033\uff9f\035\uff9f\036" +
    "\uff9f\037\uff9f\043\uff9f\044\uff9f\046\uff9f\050\uff9f\051\uff9f" +
    "\053\uff9f\057\uff9f\061\uff9f\063\uff9f\064\uff9f\065\uff9f\066" +
    "\uff9f\001\002\000\032\003\124\005\112\015\114\016\126" +
    "\017\116\031\120\032\121\035\067\036\110\043\122\062" +
    "\127\063\uff9b\001\002\000\004\067\143\001\002\000\004" +
    "\062\144\001\002\000\016\003\124\005\112\035\067\036" +
    "\110\043\122\062\127\001\002\000\006\063\146\064\147" +
    "\001\002\000\062\003\uffb5\006\uffb5\007\uffb5\011\uffb5\023" +
    "\uffb5\025\uffb5\026\uffb5\027\uffb5\033\uffb5\035\uffb5\036\uffb5" +
    "\037\uffb5\043\uffb5\044\uffb5\046\uffb5\050\uffb5\051\uffb5\053" +
    "\uffb5\057\uffb5\061\uffb5\063\uffb5\064\uffb5\065\uffb5\066\uffb5" +
    "\001\002\000\016\003\124\005\112\035\067\036\110\043" +
    "\122\062\127\001\002\000\004\063\151\001\002\000\062" +
    "\003\uffb4\006\uffb4\007\uffb4\011\uffb4\023\uffb4\025\uffb4\026" +
    "\uffb4\027\uffb4\033\uffb4\035\uffb4\036\uffb4\037\uffb4\043\uffb4" +
    "\044\uffb4\046\uffb4\050\uffb4\051\uffb4\053\uffb4\057\uffb4\061" +
    "\uffb4\063\uffb4\064\uffb4\065\uffb4\066\uffb4\001\002\000\010" +
    "\003\157\063\uff9c\064\155\001\002\000\004\063\154\001" +
    "\002\000\062\003\uffa1\006\uffa1\007\uffa1\011\uffa1\023\uffa1" +
    "\025\uffa1\026\uffa1\027\uffa1\033\uffa1\035\uffa1\036\uffa1\037" +
    "\uffa1\043\uffa1\044\uffa1\046\uffa1\050\uffa1\051\uffa1\053\uffa1" +
    "\057\uffa1\061\uffa1\063\uffa1\064\uffa1\065\uffa1\066\uffa1\001" +
    "\002\000\030\003\124\005\112\015\114\016\126\017\116" +
    "\031\120\032\121\035\067\036\110\043\122\062\127\001" +
    "\002\000\004\063\uff9d\001\002\000\004\064\160\001\002" +
    "\000\004\063\uff96\001\002\000\010\003\157\063\uff97\064" +
    "\155\001\002\000\004\063\uff98\001\002\000\004\063\uff9a" +
    "\001\002\000\060\003\uffb9\006\uffb9\007\uffb9\011\uffb9\023" +
    "\uffb9\025\uffb9\026\uffb9\027\uffb9\033\uffb9\035\uffb9\036\uffb9" +
    "\037\uffb9\043\uffb9\044\uffb9\046\uffb9\051\uffb9\053\uffb9\057" +
    "\uffb9\061\uffb9\063\uffb9\064\uffb9\065\uffb9\066\uffb9\001\002" +
    "\000\016\003\124\005\112\035\067\036\110\043\122\062" +
    "\127\001\002\000\062\003\uffb7\006\uffb7\007\uffb7\011\uffb7" +
    "\023\uffb7\025\uffb7\026\uffb7\027\uffb7\033\uffb7\035\uffb7\036" +
    "\uffb7\037\uffb7\043\uffb7\044\uffb7\046\uffb7\050\165\051\uffb7" +
    "\053\uffb7\057\uffb7\061\uffb7\063\uffb7\064\uffb7\065\uffb7\066" +
    "\uffb7\001\002\000\060\003\uffb8\006\uffb8\007\uffb8\011\uffb8" +
    "\023\uffb8\025\uffb8\026\uffb8\027\uffb8\033\uffb8\035\uffb8\036" +
    "\uffb8\037\uffb8\043\uffb8\044\uffb8\046\uffb8\051\uffb8\053\uffb8" +
    "\057\uffb8\061\uffb8\063\uffb8\064\uffb8\065\uffb8\066\uffb8\001" +
    "\002\000\006\011\172\043\171\001\002\000\004\064\226" +
    "\001\002\000\004\043\173\001\002\000\004\066\174\001" +
    "\002\000\004\020\175\001\002\000\004\064\176\001\002" +
    "\000\016\003\124\005\112\035\067\036\110\043\122\062" +
    "\127\001\002\000\006\006\200\007\201\001\002\000\016" +
    "\003\124\005\112\035\067\036\110\043\122\062\127\001" +
    "\002\000\016\003\124\005\112\035\067\036\110\043\122" +
    "\062\127\001\002\000\004\064\203\001\002\000\004\010" +
    "\204\001\002\000\004\062\205\001\002\000\016\003\124" +
    "\005\112\035\067\036\110\043\122\062\127\001\002\000" +
    "\004\063\207\001\002\000\004\063\210\001\002\000\004" +
    "\056\211\001\002\000\030\003\105\011\075\023\076\025" +
    "\071\026\107\027\072\035\067\036\110\037\074\043\100" +
    "\057\uffe2\001\002\000\004\057\213\001\002\000\032\003" +
    "\uffac\011\uffac\023\uffac\025\uffac\026\uffac\027\uffac\033\uffac" +
    "\035\uffac\036\uffac\037\uffac\043\uffac\057\uffac\001\002\000" +
    "\004\064\215\001\002\000\004\010\216\001\002\000\004" +
    "\062\217\001\002\000\016\003\124\005\112\035\067\036" +
    "\110\043\122\062\127\001\002\000\004\063\221\001\002" +
    "\000\004\063\222\001\002\000\004\056\223\001\002\000" +
    "\030\003\105\011\075\023\076\025\071\026\107\027\072" +
    "\035\067\036\110\037\074\043\100\057\uffe2\001\002\000" +
    "\004\057\225\001\002\000\032\003\uffad\011\uffad\023\uffad" +
    "\025\uffad\026\uffad\027\uffad\033\uffad\035\uffad\036\uffad\037" +
    "\uffad\043\uffad\057\uffad\001\002\000\016\003\124\005\112" +
    "\035\067\036\110\043\122\062\127\001\002\000\006\006" +
    "\230\007\231\001\002\000\016\003\124\005\112\035\067" +
    "\036\110\043\122\062\127\001\002\000\016\003\124\005" +
    "\112\035\067\036\110\043\122\062\127\001\002\000\004" +
    "\064\233\001\002\000\004\010\234\001\002\000\004\062" +
    "\235\001\002\000\016\003\124\005\112\035\067\036\110" +
    "\043\122\062\127\001\002\000\004\063\237\001\002\000" +
    "\004\063\240\001\002\000\004\056\241\001\002\000\030" +
    "\003\105\011\075\023\076\025\071\026\107\027\072\035" +
    "\067\036\110\037\074\043\100\057\uffe2\001\002\000\004" +
    "\057\243\001\002\000\032\003\uffae\011\uffae\023\uffae\025" +
    "\uffae\026\uffae\027\uffae\033\uffae\035\uffae\036\uffae\037\uffae" +
    "\043\uffae\057\uffae\001\002\000\004\064\245\001\002\000" +
    "\004\010\246\001\002\000\004\062\247\001\002\000\016" +
    "\003\124\005\112\035\067\036\110\043\122\062\127\001" +
    "\002\000\004\063\251\001\002\000\004\063\252\001\002" +
    "\000\004\056\253\001\002\000\030\003\105\011\075\023" +
    "\076\025\071\026\107\027\072\035\067\036\110\037\074" +
    "\043\100\057\uffe2\001\002\000\004\057\255\001\002\000" +
    "\032\003\uffaf\011\uffaf\023\uffaf\025\uffaf\026\uffaf\027\uffaf" +
    "\033\uffaf\035\uffaf\036\uffaf\037\uffaf\043\uffaf\057\uffaf\001" +
    "\002\000\006\033\uffe6\057\uffe6\001\002\000\006\033\uffe3" +
    "\057\uffe3\001\002\000\006\003\260\023\076\001\002\000" +
    "\032\003\uffa5\011\uffa5\023\uffa5\025\uffa5\026\uffa5\027\uffa5" +
    "\033\uffa5\035\uffa5\036\uffa5\037\uffa5\043\uffa5\057\uffa5\001" +
    "\002\000\006\033\uffe9\057\uffe9\001\002\000\010\002\ufffa" +
    "\003\ufffa\004\ufffa\001\002\000\032\003\105\011\075\023" +
    "\076\025\071\026\107\027\072\033\uffe2\035\067\036\110" +
    "\037\074\043\100\057\uffe2\001\002\000\006\033\uffe5\057" +
    "\uffe5\001\002\000\006\033\uffea\057\uffea\001\002\000\030" +
    "\003\124\005\112\015\114\016\126\017\116\031\120\032" +
    "\121\035\067\036\110\043\122\062\127\001\002\000\030" +
    "\003\124\005\112\015\114\016\126\017\116\031\120\032" +
    "\121\035\067\036\110\043\122\062\127\001\002\000\030" +
    "\003\124\005\112\015\114\016\126\017\116\031\120\032" +
    "\121\035\067\036\110\043\122\062\127\001\002\000\004" +
    "\065\311\001\002\000\004\067\274\001\002\000\004\062" +
    "\275\001\002\000\016\003\124\005\112\035\067\036\110" +
    "\043\122\062\127\001\002\000\006\063\300\064\277\001" +
    "\002\000\016\003\124\005\112\035\067\036\110\043\122" +
    "\062\127\001\002\000\004\053\301\001\002\000\030\003" +
    "\124\005\112\015\114\016\126\017\116\031\120\032\121" +
    "\035\067\036\110\043\122\062\127\001\002\000\004\065" +
    "\303\001\002\000\032\003\uffc7\011\uffc7\023\uffc7\025\uffc7" +
    "\026\uffc7\027\uffc7\033\uffc7\035\uffc7\036\uffc7\037\uffc7\043" +
    "\uffc7\057\uffc7\001\002\000\004\063\305\001\002\000\004" +
    "\053\306\001\002\000\030\003\124\005\112\015\114\016" +
    "\126\017\116\031\120\032\121\035\067\036\110\043\122" +
    "\062\127\001\002\000\004\065\310\001\002\000\032\003" +
    "\uffc3\011\uffc3\023\uffc3\025\uffc3\026\uffc3\027\uffc3\033\uffc3" +
    "\035\uffc3\036\uffc3\037\uffc3\043\uffc3\057\uffc3\001\002\000" +
    "\032\003\uffc4\011\uffc4\023\uffc4\025\uffc4\026\uffc4\027\uffc4" +
    "\033\uffc4\035\uffc4\036\uffc4\037\uffc4\043\uffc4\057\uffc4\001" +
    "\002\000\004\065\313\001\002\000\032\003\uffc6\011\uffc6" +
    "\023\uffc6\025\uffc6\026\uffc6\027\uffc6\033\uffc6\035\uffc6\036" +
    "\uffc6\037\uffc6\043\uffc6\057\uffc6\001\002\000\004\065\315" +
    "\001\002\000\032\003\uffc5\011\uffc5\023\uffc5\025\uffc5\026" +
    "\uffc5\027\uffc5\033\uffc5\035\uffc5\036\uffc5\037\uffc5\043\uffc5" +
    "\057\uffc5\001\002\000\004\065\317\001\002\000\032\003" +
    "\uffc8\011\uffc8\023\uffc8\025\uffc8\026\uffc8\027\uffc8\033\uffc8" +
    "\035\uffc8\036\uffc8\037\uffc8\043\uffc8\057\uffc8\001\002\000" +
    "\006\033\uffe8\057\uffe8\001\002\000\024\003\124\005\112" +
    "\031\324\032\325\035\067\036\110\043\122\045\323\062" +
    "\127\001\002\000\004\063\uff94\001\002\000\004\062\363" +
    "\001\002\000\012\003\uff8d\044\uff8d\046\uff8d\063\uff8d\001" +
    "\002\000\012\003\uff8c\044\uff8c\046\uff8c\063\uff8c\001\002" +
    "\000\012\003\uff91\044\352\046\uff91\063\uff91\001\002\000" +
    "\004\063\331\001\002\000\012\003\uff8b\044\uff8b\046\uff8b" +
    "\063\uff8b\001\002\000\004\056\332\001\002\000\030\003" +
    "\105\011\075\023\076\025\071\026\107\027\072\035\067" +
    "\036\110\037\074\043\100\057\uffe2\001\002\000\004\057" +
    "\334\001\002\000\036\003\uffa2\011\uffa2\013\337\023\uffa2" +
    "\024\335\025\uffa2\026\uffa2\027\uffa2\033\uffa2\035\uffa2\036" +
    "\uffa2\037\uffa2\043\uffa2\057\uffa2\001\002\000\004\056\347" +
    "\001\002\000\032\003\uffa6\011\uffa6\023\uffa6\025\uffa6\026" +
    "\uffa6\027\uffa6\033\uffa6\035\uffa6\036\uffa6\037\uffa6\043\uffa6" +
    "\057\uffa6\001\002\000\004\062\340\001\002\000\024\003" +
    "\124\005\112\031\324\032\325\035\067\036\110\043\122" +
    "\045\323\062\127\001\002\000\004\063\342\001\002\000" +
    "\004\056\343\001\002\000\030\003\105\011\075\023\076" +
    "\025\071\026\107\027\072\035\067\036\110\037\074\043" +
    "\100\057\uffe2\001\002\000\004\057\345\001\002\000\036" +
    "\003\uffa2\011\uffa2\013\337\023\uffa2\024\335\025\uffa2\026" +
    "\uffa2\027\uffa2\033\uffa2\035\uffa2\036\uffa2\037\uffa2\043\uffa2" +
    "\057\uffa2\001\002\000\032\003\uffa4\011\uffa4\023\uffa4\025" +
    "\uffa4\026\uffa4\027\uffa4\033\uffa4\035\uffa4\036\uffa4\037\uffa4" +
    "\043\uffa4\057\uffa4\001\002\000\030\003\105\011\075\023" +
    "\076\025\071\026\107\027\072\035\067\036\110\037\074" +
    "\043\100\057\uffe2\001\002\000\004\057\351\001\002\000" +
    "\032\003\uffa3\011\uffa3\023\uffa3\025\uffa3\026\uffa3\027\uffa3" +
    "\033\uffa3\035\uffa3\036\uffa3\037\uffa3\043\uffa3\057\uffa3\001" +
    "\002\000\022\003\124\005\112\031\324\032\325\035\067" +
    "\036\110\043\122\062\127\001\002\000\010\003\354\046" +
    "\355\063\uff8f\001\002\000\010\003\354\046\355\063\uff8f" +
    "\001\002\000\024\003\124\005\112\031\324\032\325\035" +
    "\067\036\110\043\122\045\323\062\127\001\002\000\004" +
    "\063\uff93\001\002\000\004\063\uff90\001\002\000\004\063" +
    "\uff8e\001\002\000\012\003\uff91\044\352\046\uff91\063\uff91" +
    "\001\002\000\010\003\uff92\046\uff92\063\uff92\001\002\000" +
    "\022\003\124\005\112\031\324\032\325\035\067\036\110" +
    "\043\122\062\127\001\002\000\004\063\365\001\002\000" +
    "\010\003\354\046\355\063\uff8f\001\002\000\004\063\uff95" +
    "\001\002\000\006\060\370\066\371\001\002\000\016\003" +
    "\124\005\112\035\067\036\110\043\122\062\127\001\002" +
    "\000\016\012\021\014\026\020\020\021\023\022\024\030" +
    "\025\001\002\000\012\003\u0100\053\375\064\374\065\377" +
    "\001\002\000\032\003\uffe1\011\uffe1\023\uffe1\025\uffe1\026" +
    "\uffe1\027\uffe1\033\uffe1\035\uffe1\036\uffe1\037\uffe1\043\uffe1" +
    "\057\uffe1\001\002\000\004\043\u011e\001\002\000\032\003" +
    "\u010d\005\112\015\u010e\016\u0106\017\u010c\031\u0109\032\u010b" +
    "\035\067\036\110\043\122\056\u0107\062\127\001\002\000" +
    "\004\065\u0105\001\002\000\032\003\uffdd\011\uffdd\023\uffdd" +
    "\025\uffdd\026\uffdd\027\uffdd\033\uffdd\035\uffdd\036\uffdd\037" +
    "\uffdd\043\uffdd\057\uffdd\001\002\000\020\003\u0102\005\112" +
    "\035\067\036\110\043\122\053\375\062\127\001\002\000" +
    "\012\003\uffd0\053\uffd0\064\uffd0\065\uffd0\001\002\000\010" +
    "\003\u0104\053\375\063\137\001\002\000\032\003\uffd9\011" +
    "\uffd9\023\uffd9\025\uffd9\026\uffd9\027\uffd9\033\uffd9\035\uffd9" +
    "\036\uffd9\037\uffd9\043\uffd9\057\uffd9\001\002\000\006\003" +
    "\u0104\053\375\001\002\000\032\003\uffde\011\uffde\023\uffde" +
    "\025\uffde\026\uffde\027\uffde\033\uffde\035\uffde\036\uffde\037" +
    "\uffde\043\uffde\057\uffde\001\002\000\012\003\uffd7\053\uffd7" +
    "\064\uffd7\065\uffd7\001\002\000\032\003\124\005\112\015" +
    "\114\016\126\017\116\031\120\032\121\035\067\036\110" +
    "\043\122\056\u0111\062\127\001\002\000\012\003\uffd1\053" +
    "\uffd1\064\uffd1\065\uffd1\001\002\000\012\003\uffd5\053\uffd5" +
    "\064\uffd5\065\uffd5\001\002\000\012\003\uffd3\053\uffd3\064" +
    "\uffd3\065\uffd3\001\002\000\012\003\uffd4\053\uffd4\064\uffd4" +
    "\065\uffd4\001\002\000\012\003\uffd6\053\uffd6\064\uffd6\065" +
    "\uffd6\001\002\000\006\057\u0110\063\137\001\002\000\012" +
    "\003\uffd8\053\uffd8\064\uffd8\065\uffd8\001\002\000\012\003" +
    "\uffd2\053\uffd2\064\uffd2\065\uffd2\001\002\000\012\003\uffce" +
    "\053\uffce\064\uffce\065\uffce\001\002\000\030\003\124\005" +
    "\112\015\114\016\126\017\116\031\120\032\121\035\067" +
    "\036\110\043\122\062\127\001\002\000\006\057\uffc9\064" +
    "\u0119\001\002\000\006\057\uffcc\064\u0114\001\002\000\004" +
    "\056\u0111\001\002\000\004\057\u0116\001\002\000\012\003" +
    "\uffcf\053\uffcf\064\uffcf\065\uffcf\001\002\000\006\057\uffcc" +
    "\064\u0114\001\002\000\004\057\uffcd\001\002\000\030\003" +
    "\124\005\112\015\114\016\126\017\116\031\120\032\121" +
    "\035\067\036\110\043\122\062\127\001\002\000\004\057" +
    "\u011b\001\002\000\014\003\uffcb\053\uffcb\057\uffcb\064\uffcb" +
    "\065\uffcb\001\002\000\006\057\uffc9\064\u0119\001\002\000" +
    "\004\057\uffca\001\002\000\006\060\u011f\066\u0120\001\002" +
    "\000\016\003\124\005\112\035\067\036\110\043\122\062" +
    "\127\001\002\000\016\012\021\014\026\020\020\021\023" +
    "\022\024\030\025\001\002\000\006\003\u0104\053\375\001" +
    "\002\000\012\003\u0100\053\375\064\374\065\377\001\002" +
    "\000\032\003\uffdc\011\uffdc\023\uffdc\025\uffdc\026\uffdc\027" +
    "\uffdc\033\uffdc\035\uffdc\036\uffdc\037\uffdc\043\uffdc\057\uffdc" +
    "\001\002\000\004\061\u0125\001\002\000\006\060\u0126\066" +
    "\u0127\001\002\000\016\003\124\005\112\035\067\036\110" +
    "\043\122\062\127\001\002\000\016\012\021\014\026\020" +
    "\020\021\023\022\024\030\025\001\002\000\006\003\u0104" +
    "\053\375\001\002\000\012\003\u0100\053\375\064\374\065" +
    "\377\001\002\000\032\003\uffdb\011\uffdb\023\uffdb\025\uffdb" +
    "\026\uffdb\027\uffdb\033\uffdb\035\uffdb\036\uffdb\037\uffdb\043" +
    "\uffdb\057\uffdb\001\002\000\004\061\u012c\001\002\000\004" +
    "\066\u012d\001\002\000\016\012\021\014\026\020\020\021" +
    "\023\022\024\030\025\001\002\000\006\003\u0104\053\375" +
    "\001\002\000\012\003\u0100\053\375\064\374\065\377\001" +
    "\002\000\032\003\uffda\011\uffda\023\uffda\025\uffda\026\uffda" +
    "\027\uffda\033\uffda\035\uffda\036\uffda\037\uffda\043\uffda\057" +
    "\uffda\001\002\000\004\061\u0132\001\002\000\006\060\u0133" +
    "\066\u0134\001\002\000\016\003\124\005\112\035\067\036" +
    "\110\043\122\062\127\001\002\000\016\012\021\014\026" +
    "\020\020\021\023\022\024\030\025\001\002\000\012\003" +
    "\u0100\053\375\064\374\065\377\001\002\000\032\003\uffe0" +
    "\011\uffe0\023\uffe0\025\uffe0\026\uffe0\027\uffe0\033\uffe0\035" +
    "\uffe0\036\uffe0\037\uffe0\043\uffe0\057\uffe0\001\002\000\004" +
    "\061\u0138\001\002\000\004\066\u0139\001\002\000\016\012" +
    "\021\014\026\020\020\021\023\022\024\030\025\001\002" +
    "\000\012\003\u0100\053\375\064\374\065\377\001\002\000" +
    "\032\003\uffdf\011\uffdf\023\uffdf\025\uffdf\026\uffdf\027\uffdf" +
    "\033\uffdf\035\uffdf\036\uffdf\037\uffdf\043\uffdf\057\uffdf\001" +
    "\002\000\004\043\u013d\001\002\000\004\063\u013e\001\002" +
    "\000\004\056\u013f\001\002\000\004\041\u0140\001\002\000" +
    "\030\003\124\005\112\015\114\016\126\017\116\031\120" +
    "\032\121\035\067\036\110\043\122\062\127\001\002\000" +
    "\004\057\u0142\001\002\000\032\003\uffab\011\uffab\023\uffab" +
    "\025\uffab\026\uffab\027\uffab\033\uffab\035\uffab\036\uffab\037" +
    "\uffab\043\uffab\057\uffab\001\002\000\004\066\u0144\001\002" +
    "\000\030\003\105\011\075\023\076\025\071\026\107\027" +
    "\072\033\uffe2\035\067\036\110\037\074\043\100\001\002" +
    "\000\004\033\u0147\001\002\000\004\057\uffaa\001\002\000" +
    "\004\065\u0148\001\002\000\010\041\u0140\042\u0149\057\uffa7" +
    "\001\002\000\004\066\u014b\001\002\000\004\057\uffa9\001" +
    "\002\000\030\003\105\011\075\023\076\025\071\026\107" +
    "\027\072\035\067\036\110\037\074\043\100\057\uffe2\001" +
    "\002\000\004\057\uffa8\001\002\000\006\033\uffeb\057\uffeb" +
    "\001\002\000\004\065\uff8a\001\002\000\024\003\124\005" +
    "\112\031\324\032\325\035\067\036\110\043\122\045\323" +
    "\062\127\001\002\000\004\063\u0151\001\002\000\004\056" +
    "\u0152\001\002\000\030\003\105\011\075\023\076\025\071" +
    "\026\107\027\072\035\067\036\110\037\074\043\100\057" +
    "\uffe2\001\002\000\004\057\u0154\001\002\000\032\003\uffb0" +
    "\011\uffb0\023\uffb0\025\uffb0\026\uffb0\027\uffb0\033\uffb0\035" +
    "\uffb0\036\uffb0\037\uffb0\043\uffb0\057\uffb0\001\002\000\006" +
    "\033\uffec\057\uffec\001\002\000\004\043\u0157\001\002\000" +
    "\004\064\u0158\001\002\000\016\012\021\014\026\020\020" +
    "\021\023\022\024\030\025\001\002\000\004\063\u015a\001" +
    "\002\000\062\003\uffa0\006\uffa0\007\uffa0\011\uffa0\023\uffa0" +
    "\025\uffa0\026\uffa0\027\uffa0\033\uffa0\035\uffa0\036\uffa0\037" +
    "\uffa0\043\uffa0\044\uffa0\046\uffa0\050\uffa0\051\uffa0\053\uffa0" +
    "\057\uffa0\061\uffa0\063\uffa0\064\uffa0\065\uffa0\066\uffa0\001" +
    "\002\000\032\003\105\011\075\023\076\025\071\026\107" +
    "\027\072\033\uffe2\035\067\036\110\037\074\043\100\057" +
    "\uffe2\001\002\000\006\033\uffe7\057\uffe7\001\002\000\030" +
    "\003\105\011\075\023\076\025\071\026\107\027\072\035" +
    "\067\036\110\037\074\043\100\057\uffe2\001\002\000\004" +
    "\057\u015f\001\002\000\010\002\ufffb\003\ufffb\004\ufffb\001" +
    "\002\000\004\002\uffff\001\002\000\010\002\ufffd\003\u0162" +
    "\004\006\001\002\000\010\002\ufffd\003\u0162\004\006\001" +
    "\002\000\004\002\000\001\002\000\004\002\ufffc\001\002" +
    "\000\004\002\ufffe\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0163\000\006\002\006\004\003\001\001\000\006\003" +
    "\u0162\004\u0160\001\001\000\006\002\u015f\004\003\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\005\012\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\042\021\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\006\027\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\042\034\001\001\000\004\006\035" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\042\041\001\001\000\004\006\042\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\042\045\001" +
    "\001\000\004\006\046\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\042\052\001\001\000" +
    "\004\006\053\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\042\056\001\001\000\004\006\057\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\042\062\001\001" +
    "\000\002\001\001\000\002\001\001\000\024\010\102\011" +
    "\067\015\105\024\072\025\100\026\103\031\076\033\065" +
    "\041\101\001\001\000\002\001\001\000\002\001\001\000" +
    "\024\010\u0154\011\067\015\105\024\072\025\100\026\103" +
    "\031\076\033\065\041\101\001\001\000\002\001\001\000" +
    "\014\016\u014d\017\127\021\124\023\114\033\112\001\001" +
    "\000\024\010\u014c\011\067\015\105\024\072\025\100\026" +
    "\103\031\076\033\065\041\101\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\024\010\317\011" +
    "\067\015\105\024\072\025\100\026\103\031\076\033\065" +
    "\041\101\001\001\000\002\001\001\000\024\010\265\011" +
    "\067\015\105\024\072\025\100\026\103\031\076\033\065" +
    "\041\101\001\001\000\002\001\001\000\002\001\001\000" +
    "\024\010\261\011\067\015\105\024\072\025\100\026\103" +
    "\031\076\033\065\041\101\001\001\000\004\031\260\001" +
    "\001\000\024\010\255\011\067\015\105\024\072\025\100" +
    "\026\103\031\076\033\065\041\101\001\001\000\002\001" +
    "\001\000\002\001\001\000\016\007\122\016\116\017\127" +
    "\021\124\023\114\033\112\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\022\163\001\001" +
    "\000\002\001\001\000\004\035\162\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\020\132\001\001\000\002\001" +
    "\001\000\012\017\130\021\124\023\114\033\112\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\021\134\023\114\033\112\001\001" +
    "\000\004\020\135\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\016\016\151\017\127\021\124" +
    "\023\114\033\112\034\152\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\017\144\021\124\023\114\033\112" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\017" +
    "\147\021\124\023\114\033\112\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\035\155\001\001\000\002\001" +
    "\001\000\002\001\001\000\014\016\160\017\127\021\124" +
    "\023\114\033\112\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\035\161\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\023" +
    "\165\033\112\001\001\000\004\022\166\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\017\176\021\124\023\114\033\112\001\001\000" +
    "\002\001\001\000\012\017\213\021\124\023\114\033\112" +
    "\001\001\000\012\017\201\021\124\023\114\033\112\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\017\205\021\124\023\114\033\112\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\024" +
    "\010\211\011\067\015\105\024\072\025\100\026\103\031" +
    "\076\033\065\041\101\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\017\217\021\124\023\114\033\112\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\024\010\223\011\067\015\105\024\072\025\100\026\103" +
    "\031\076\033\065\041\101\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\017\226\021\124\023\114\033\112" +
    "\001\001\000\002\001\001\000\012\017\243\021\124\023" +
    "\114\033\112\001\001\000\012\017\231\021\124\023\114" +
    "\033\112\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\017\235\021\124\023\114\033\112" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\024\010\241\011\067\015\105\024\072\025\100" +
    "\026\103\031\076\033\065\041\101\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\017\247\021\124\023\114\033" +
    "\112\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\024\010\253\011\067\015\105\024\072\025" +
    "\100\026\103\031\076\033\065\041\101\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\031\260\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\024\010\264\011\067\015" +
    "\105\024\072\025\100\026\103\031\076\033\065\041\101" +
    "\001\001\000\002\001\001\000\002\001\001\000\014\016" +
    "\315\017\127\021\124\023\114\033\112\001\001\000\014" +
    "\016\313\017\127\021\124\023\114\033\112\001\001\000" +
    "\014\016\311\017\127\021\124\023\114\033\112\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\017\275\021\124\023\114\033\112\001\001\000\002" +
    "\001\001\000\012\017\303\021\124\023\114\033\112\001" +
    "\001\000\002\001\001\000\014\016\301\017\127\021\124" +
    "\023\114\033\112\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\014\016\306" +
    "\017\127\021\124\023\114\033\112\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\020" +
    "\017\327\021\124\023\114\033\112\037\326\040\325\050" +
    "\321\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\046\352\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\024" +
    "\010\332\011\067\015\105\024\072\025\100\026\103\031" +
    "\076\033\065\041\101\001\001\000\002\001\001\000\004" +
    "\032\335\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\020\017\327\021\124\023\114\033\112" +
    "\037\340\040\325\050\321\001\001\000\002\001\001\000" +
    "\002\001\001\000\024\010\343\011\067\015\105\024\072" +
    "\025\100\026\103\031\076\033\065\041\101\001\001\000" +
    "\002\001\001\000\004\032\345\001\001\000\002\001\001" +
    "\000\024\010\347\011\067\015\105\024\072\025\100\026" +
    "\103\031\076\033\065\041\101\001\001\000\002\001\001" +
    "\000\002\001\001\000\014\017\327\021\124\023\114\033" +
    "\112\040\360\001\001\000\004\047\355\001\001\000\004" +
    "\047\357\001\001\000\020\017\327\021\124\023\114\033" +
    "\112\037\356\040\325\050\321\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\046\361\001" +
    "\001\000\002\001\001\000\016\017\327\021\124\023\114" +
    "\033\112\040\325\050\363\001\001\000\002\001\001\000" +
    "\004\047\365\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\017\u0130\021\124\023\114\033\112\001\001\000" +
    "\004\042\371\001\001\000\006\012\372\013\375\001\001" +
    "\000\002\001\001\000\002\001\001\000\016\017\u0107\021" +
    "\124\023\114\033\112\043\u0109\044\u010e\001\001\000\002" +
    "\001\001\000\002\001\001\000\014\013\u0100\017\u0102\021" +
    "\124\023\114\033\112\001\001\000\002\001\001\000\004" +
    "\013\u0100\001\001\000\002\001\001\000\004\013\u0100\001" +
    "\001\000\002\001\001\000\002\001\001\000\016\016\u0111" +
    "\017\127\021\124\023\114\033\112\043\u0112\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\014\016\u0111" +
    "\017\127\021\124\023\114\033\112\001\001\000\004\014" +
    "\u0119\001\001\000\004\045\u0114\001\001\000\004\043\u0116" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\045" +
    "\u0117\001\001\000\002\001\001\000\014\016\u011b\017\127" +
    "\021\124\023\114\033\112\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\014\u011c\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\017\u0123\021\124\023\114\033" +
    "\112\001\001\000\004\042\u0120\001\001\000\004\013\u0121" +
    "\001\001\000\006\012\u0122\013\375\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\017\u012a" +
    "\021\124\023\114\033\112\001\001\000\004\042\u0127\001" +
    "\001\000\004\013\u0128\001\001\000\006\012\u0129\013\375" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\042\u012d\001\001\000\004\013\u012e\001\001" +
    "\000\006\012\u012f\013\375\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\017\u0136\021\124" +
    "\023\114\033\112\001\001\000\004\042\u0134\001\001\000" +
    "\006\012\u0135\013\375\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\042\u0139\001\001\000" +
    "\006\012\u013a\013\375\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\027" +
    "\u0140\001\001\000\014\016\u0142\017\127\021\124\023\114" +
    "\033\112\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\024\010\u0144\011\067\015\105\024\072" +
    "\025\100\026\103\031\076\033\065\041\101\001\001\000" +
    "\004\030\u0145\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\027\u0149\001\001\000\002\001\001\000\002\001" +
    "\001\000\024\010\u014b\011\067\015\105\024\072\025\100" +
    "\026\103\031\076\033\065\041\101\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\020\017\327" +
    "\021\124\023\114\033\112\037\u014f\040\325\050\321\001" +
    "\001\000\002\001\001\000\002\001\001\000\024\010\u0152" +
    "\011\067\015\105\024\072\025\100\026\103\031\076\033" +
    "\065\041\101\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\042\u0158\001\001\000\002\001\001\000\002\001\001" +
    "\000\024\010\u015b\011\067\015\105\024\072\025\100\026" +
    "\103\031\076\033\065\041\101\001\001\000\002\001\001" +
    "\000\024\010\u015d\011\067\015\105\024\072\025\100\026" +
    "\103\031\076\033\065\041\101\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\003\u0164\004" +
    "\u0160\001\001\000\006\003\u0163\004\u0160\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



   ArrayList<String> errores = new ArrayList();
   ArrayList<Variable> variables = new ArrayList();
   ArrayList<Function> funciones = new ArrayList();
   ArrayList<Cuadruplo> cuadruplos = new ArrayList();
   ArrayList<String> MensajesEntrada =new ArrayList();
   Node Tree  = new Node();
   int cont=0;
   int contMain=0;
   int contAmbito=0;
   int contContenido= 0;
   int resultId=1;
   boolean testCont = false;
   String tempTipo = "";

   public void semantic_errors(String message, int position_left, int position_right){
       message += "Position: " + "linea: " + position_right + " columna: " + position_left;
       errores.add(message);
   }
   //public parser(java.io.reader input){
   //    super(s=new Lexer(input));
   //}
   /*
   public void report_error_temporal(String message, Object info){
       if (info instanceof String){
           //java_cup.runtime.Symbol s = ((java_cup.runtime.Symbol)info);
           errors++;
           System.err.println(" " + errors "==>" +" "+message + s.current_lexxeme()+"\n");
       } else {
           StringBuffer m new StringBuffer("Error ");
           if (info instanceof java_cup.runtime.Symbol){
               m.append("(" + info.toString() + ")");
           }
        m.append(":" + message);
        System.err.println(m);
       }
   }
   */

   public String token_name_from_id(int id) {
		// obtenidos de la clase sym.java
		switch (id) {
  case 2: return   "FUNCTION" ; 
  case 44: return  "L_KEY"   ;
  case 39: return  "OPSUM"   ;
  case 35: return  "OPNEG"   ;
  case 28: return  "OUTPUT"   ;
  case 27: return  "INPUT"   ;
  case 30: return  "CASE"   ;
  case 14: return  "INTEGER" ;  
  case 49: return  "R_PAR"  ; 
  case 20: return  "FOR"   ;
  case 15: return  "CHARACTER" ;  
  case 51: return  "SEMICOLON";   
  case 41: return  "OPASIGN";   
  case 31: return  "OPTION";   
  case 50: return  "COMMA";   
  case 4: return   "UPTO"  ;
  case 34: return  "OPREL"  ; 
  case 45: return  "R_KEY" ;  
  case  3: return  "NUM"  ;
  case 55: return  "MAIN"  ; 
  case 17: return  "IF"   ;
  case 54: return  "DOT"   ;
  case 33: return  "ID"   ;
  case 12: return  "CONSTSTRING";   
  case 47: return  "R_BRACKET";   
  case 16: return  "BOOLEAN";   
  case 0: return   "EOF"  ;
  case 21: return  "RETURN"  ; 
  case 23: return  "TRUE"   ;
  case 1: return   "error"  ;
  case 11: return  "FLOAT_VAL";   
  case 26: return  "NULL"   ;
  case 42: return  "OPASIGNADD";   
  case 40: return  "OPINC"   ;
  case 25: return  "BREAK"   ;
  case 22: return  "VOID"   ;
  case 29: return  "SWITCH"   ;
  case 52: return  "COLON"   ;
  case 18: return  "ELSE"   ;
  case 7: return   "VARIABLE" ; 
  case 19: return  "WHILE"   ;
  case 32: return  "DEFAULT"  ; 
  case 10: return  "FLOAT"   ;
  case 37: return  "OPMOD"   ;
  case 48: return  "L_PAR"   ;
  case 43: return  "OPASIGNMULT";   
  case 8: return   "STRING"  ;
  case 13: return  "CONSTCHAR";   
  case 36: return  "OPLOG"  ; 
  case 5: return   "DOWNTO";  
  case 53: return  "AT"   ;
  case 24: return  "FALSE"   ;
  case 46: return  "L_BRACKET";   
  case 38: return  "OPMULT" ;  
  case 9: return   "ELIF"  ;
  case 6: return   "STEP" ;   
			
			default: return "N/A";
		}
	}

	public void syntax_error(Symbol s) {
        report_error("Error sintáctico. No se esperaba el siguiente token: <" + s.value + ">. Línea: " + (s.right + 1) + ", Columna: " + (s.left + 1) + 	"\n", null);
        errores.add("Error sintáctico. No se esperaba el siguiente token: <" + s.value + ">. Línea: " + (s.right + 1) + ", Columna: " + (s.left + 1) + 	"\n");

	List expected = expected_token_ids();
        if (expected.size() != 0) {
            int id;
            String x = "";
            String inicio = "Se esperaba:  ";
            x += inicio ;
            for (int i = 0; i < expected.size(); i++) {
            	id = (int) expected.get(i);
            	if (i == expected.size() - 1) {
            		System.out.println(token_name_from_id(id));
                        x+= token_name_from_id(id);
            	} else {
            		System.out.print(token_name_from_id(id) + " | ");
                        x+= token_name_from_id(id)+ " | ";
            	}   
            }
            errores.add(x);
        } else { /* do nothing */ }
     }
        
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception {
        System.out.println("No se pudo reparar y continuar el análisis.");
    }

    public void genError(Node Actual, String tipo){
        //asignacion de una funcion a una cariable de tipo diferente
        //
    }
    
    public Function buscaTipo2(String id , boolean returnsArray){
      String tipo = "";
        for (Function iter_list : funciones) {

            if(iter_list.getId().equals(id) && iter_list.isReturnsArray() == returnsArray){
                System.out.println(iter_list.toString());
                tipo = iter_list.getTipo();
                return iter_list;
                //isFound= true;
            }
        }
       
        System.err.println("NO EXISTE ESTA FUNCION");
        return new Function("-1","-1",false);
    }

    public Variable buscaTipo(String id, boolean esArray){
        //boolean isFound = false;
        String tipo = "";
        for (Variable iter_list : variables) {
            if(iter_list.getId().equals(id) && iter_list.isArray() == esArray){
                System.out.println("El tipo de la variable es: ");
                System.out.println(iter_list.getTipo());
                tipo= iter_list.getTipo();
                return iter_list;
                //isFound= true;
            }
        }
       
        System.err.println("NO EXISTE ESTA VARIABLE");
        return new Variable("-1","-1");
    }

    //Check if any id is repeated 
    public boolean checkRepeatedID(String id){
        for (Variable iter_list : variables) {
            if(iter_list.getId().equals(id)){
                System.out.println("Esta declaracion ya existe");
                return false;
            }else{
                return true;
            }
        }
        return false;
    }





/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {


    
    

  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= inicio EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Node start_val = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // inicio ::= dec_funcion dec_gen_fun 
            {
              Node RESULT =null;
		int dgleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dgright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Node dg = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int dgfleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dgfright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Node dgf = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    MensajesEntrada.add("Entra a inicio");
    parser.cont++;
    Node node = new Node();
    node.setEtiqueta("INICIO");
    node.setID(parser.cont);
    node.addHijos((Node) dg);
    node.addHijos((Node) dgf);
    
    parser.Tree = node;
    RESULT = node; 
    
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // inicio ::= error inicio 
            {
              Node RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // dec_gen_fun ::= dec_funcion dec_gen_fun 
            {
              Node RESULT =null;
		int dfleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dfright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Node df = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int dgfleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dgfright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Node dgf = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                MensajesEntrada.add("Entra a dec_gen_fun");
                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("dec_gen_fun");
                node.setID(parser.cont);
                node.addHijos((Node) df);
                node.addHijos((Node) dgf);  
                
                RESULT = node;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("dec_gen_fun",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // dec_gen_fun ::= 
            {
              Node RESULT =null;
		
                parser.cont++;
                Node nodo = new Node();
				nodo.setEtiqueta("vacio");
				nodo.setID(parser.cont);
				
                RESULT = nodo;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("dec_gen_fun",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // dec_gen_fun ::= error dec_gen_fun 
            {
              Node RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("dec_gen_fun",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // dec_funcion ::= FUNCTION ID L_PAR parametros R_PAR COLON tipo L_KEY dec_general R_KEY 
            {
              Node RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int partsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int partsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Node parts = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int tipleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int tipright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Node tip = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int deGleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int deGright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Node deG = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
               MensajesEntrada.add("Entra a dec_funcion");
                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("dec_funcion");
                node.setID(parser.cont);

                parser.cont++;
                Node identificador =new Node();
                identificador.setEtiqueta("ID");
                identificador.setID(parser.cont);
                identificador.setValor(id);

                Node n_parts=(Node) parts;
                Node n_tip=(Node) tip;
        
                node.addHijos(identificador);
                node.addHijos(n_parts);
                node.addHijos(n_tip);
                node.addHijos((Node) deG);

                ArrayList<Variable> params = (ArrayList<Variable>) n_parts.getValue();
                Function nueva_funcion=new Function(n_tip.getValor(),id,false);
                nueva_funcion.setParametros(params);
                System.out.println(nueva_funcion.toString());
                
                funciones.add(nueva_funcion);

                RESULT = node;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("dec_funcion",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // dec_funcion ::= FUNCTION ID L_PAR parametros R_PAR COLON MAIN L_KEY dec_general R_KEY 
            {
              Node RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int partsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int partsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Node parts = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int mnleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int mnright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String mn = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int deGleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int deGright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Node deG = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                parser.contMain++;
                if(parser.contMain>1){
                    semantic_errors("Solo puede declararse un main!",mnleft,mnright);
                }
               
                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("dec_Funcion");
                node.setID(parser.cont);

                parser.cont++;
                Node identificador =new Node();
                identificador.setEtiqueta("ID");
                identificador.setID(parser.cont);
                identificador.setValor(id);
                parser.cont++;
                Node main =new Node();
                main.setEtiqueta("Main");
                main.setID(parser.cont);
                main.setValor("Main");

                
                node.addHijos(identificador);
                node.addHijos((Node) parts);
                node.addHijos(main);
                node.addHijos((Node) deG);
                RESULT = node;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("dec_funcion",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // parametros ::= VARIABLE ID COLON tipo nuevo_parametro 
            {
              Node RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int tipleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tipright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Node tip = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int nuPleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nuPright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Node nuP = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                MensajesEntrada.add("Entra a parametros 1");

                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("parametros");
                node.setID(parser.cont);

                parser.cont++;
                Node identificador =new Node();
                identificador.setEtiqueta("ID");
                identificador.setID(parser.cont);
                identificador.setValor(id);

                Node n_nuP=(Node) nuP;
                Node n_tip=(Node) tip;
                node.addHijos(identificador);
                node.addHijos(n_tip);
                node.addHijos(n_nuP);

                ArrayList<Variable> var = (ArrayList<Variable>) n_nuP.getValue();
                Variable tempo=new Variable(n_tip.getValor(),id);
                tempo.setArray(false);
                var.add(tempo);
                node.setValue(var);
                for(Variable lista: var){
                    System.out.println("Parametro: "+lista.getId());
                }
                RESULT = node;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // parametros ::= VARIABLE ID COLON tipo 
            {
              Node RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int tipleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tipright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Node tip = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                MensajesEntrada.add("Entra a parametros 1");

                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("parametros");
                node.setID(parser.cont);

                parser.cont++;
                Node identificador =new Node();
                identificador.setEtiqueta("ID");
                identificador.setID(parser.cont);
                identificador.setValor(id);
                Node n_tip=(Node) tip;
                node.addHijos(identificador);
                node.addHijos(n_tip);

                ArrayList<Variable> var = new ArrayList();
                Variable tempo=new Variable(n_tip.getValor(),id);
                tempo.setArray(false);
                var.add(tempo);
                node.setValue(var);

                for(Variable lista: var){
                    System.out.println("Parametro solo: "+lista.getId());
                }

                RESULT = node;
               
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // parametros ::= VARIABLE ID L_BRACKET R_BRACKET COLON tipo nuevo_parametro 
            {
              Node RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int tipleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tipright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Node tip = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int nuPleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nuPright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Node nuP = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                MensajesEntrada.add("Entra a parametros 1");

                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("parametros");
                node.setID(parser.cont);

                parser.cont++;
                Node identificador =new Node();
                identificador.setEtiqueta("ID");
                identificador.setID(parser.cont);
                identificador.setValor(id);

                Node n_nuP=(Node) nuP;
                Node n_tip=(Node) tip;
                node.addHijos(identificador);
                node.addHijos(n_tip);
                node.addHijos(n_nuP);

                ArrayList<Variable> var = (ArrayList<Variable>) n_nuP.getValue();
                Variable tempo=new Variable(n_tip.getValor(),id);
                tempo.setArray(true);
                var.add(tempo);
                node.setValue(var);

                for(Variable lista: var){
                    System.out.println("Parametro: "+lista.getId());
                }
                
                RESULT = node;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // parametros ::= VARIABLE ID L_BRACKET R_BRACKET COLON tipo 
            {
              Node RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int tipleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tipright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Node tip = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                MensajesEntrada.add("Entra a parametros 1");

                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("parametros");
                node.setID(parser.cont);

                parser.cont++;
                Node identificador =new Node();
                identificador.setEtiqueta("ID");
                identificador.setID(parser.cont);
                identificador.setValor(id);
                Node n_tip=(Node) tip;
                node.addHijos(identificador);
                node.addHijos(n_tip);

                ArrayList<Variable> var = new ArrayList();
                Variable tempo=new Variable(n_tip.getValor(),id);
                tempo.setArray(true);
                var.add(tempo);
                node.setValue(var);

                for(Variable lista: var){
                    System.out.println("Parametro solo: "+lista.getId());
                }

                RESULT = node;
               
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // parametros ::= VARIABLE ID L_BRACKET R_BRACKET L_BRACKET R_BRACKET COLON tipo nuevo_parametro 
            {
              Node RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int tipleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tipright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Node tip = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int nuPleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nuPright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Node nuP = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                MensajesEntrada.add("Entra a parametros 1");

                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("parametros");
                node.setID(parser.cont);

                parser.cont++;
                Node identificador =new Node();
                identificador.setEtiqueta("ID");
                identificador.setID(parser.cont);
                identificador.setValor(id);

                Node n_nuP=(Node) nuP;
                Node n_tip=(Node) tip;
                node.addHijos(identificador);
                node.addHijos(n_tip);
                node.addHijos(n_nuP);

                ArrayList<Variable> var = (ArrayList<Variable>) n_nuP.getValue();
                Variable tempo=new Variable(n_tip.getValor(),id);
                tempo.setArray(true);
                var.add(tempo);
                node.setValue(var);

                for(Variable lista: var){
                    System.out.println("Parametro: "+lista.getId());
                }

                RESULT = node;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // parametros ::= VARIABLE ID L_BRACKET R_BRACKET L_BRACKET R_BRACKET COLON tipo 
            {
              Node RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int tipleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tipright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Node tip = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                MensajesEntrada.add("Entra a parametros 1");

                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("parametros");
                node.setID(parser.cont);

                parser.cont++;
                Node identificador =new Node();
                identificador.setEtiqueta("ID");
                identificador.setID(parser.cont);
                identificador.setValor(id);
                Node n_tip=(Node) tip;
                node.addHijos(identificador);
                node.addHijos(n_tip);

                ArrayList<Variable> var = new ArrayList();
                Variable tempo=new Variable(n_tip.getValor(),id);
                tempo.setArray(true);
                var.add(tempo);
                node.setValue(var);

                for(Variable lista: var){
                    System.out.println("Parametro solo: "+lista.getId());
                }

                RESULT = node;
               
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // parametros ::= 
            {
              Node RESULT =null;
		
                MensajesEntrada.add("Entra a vacio");

                parser.cont++;
                Node nodo = new Node();
				nodo.setEtiqueta("vacio");
				nodo.setID(parser.cont);
                ArrayList<Variable> var = new ArrayList();
                nodo.setValue(var);
                //System.out.println("No tiene parametros");
                RESULT = nodo;
               
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // nuevo_parametro ::= COMMA VARIABLE ID COLON tipo nuevo_parametro 
            {
              Node RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int tipleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tipright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Node tip = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int nuPleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nuPright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Node nuP = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                MensajesEntrada.add("Entra a nuevo_parametro 1");
                
                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("nuevo_parametro");
                node.setID(parser.cont);

                parser.cont++;
                Node identificador =new Node();
                identificador.setEtiqueta("ID");
                identificador.setID(parser.cont);
                identificador.setValor(id);

                Node n_nuP=(Node) nuP;
                Node n_tip=(Node) tip;
                node.addHijos(identificador);
                node.addHijos(n_tip);
                node.addHijos(n_nuP);

                ArrayList<Variable> var = (ArrayList<Variable>) n_nuP.getValue();
                Variable tempo=new Variable(n_tip.getValor(),id);
                tempo.setArray(false);
                var.add(tempo);
                node.setValue(var);

                RESULT = node;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("nuevo_parametro",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // nuevo_parametro ::= COMMA VARIABLE ID COLON tipo 
            {
              Node RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int tipleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tipright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Node tip = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                MensajesEntrada.add("Entra a nuevo_parametro 2");
                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("nuevo_parametro");
                node.setID(parser.cont);

                parser.cont++;
                Node identificador =new Node();
                identificador.setEtiqueta("ID");
                identificador.setID(parser.cont);
                identificador.setValor(id);
                Node n_tip=(Node) tip;
                node.addHijos(identificador);
                node.addHijos(n_tip);

                ArrayList<Variable> var = new ArrayList();
                Variable tempo=new Variable(n_tip.getValor(),id);
                tempo.setArray(false);
                var.add(tempo);
                node.setValue(var);

                RESULT = node;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("nuevo_parametro",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // nuevo_parametro ::= COMMA VARIABLE ID L_BRACKET R_BRACKET COLON tipo nuevo_parametro 
            {
              Node RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int tipleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tipright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Node tip = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int nuPleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nuPright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Node nuP = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                MensajesEntrada.add("Entra a nuevo_parametro 1");

                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("nuevo_parametro");
                node.setID(parser.cont);

                parser.cont++;
                Node identificador =new Node();
                identificador.setEtiqueta("ID");
                identificador.setID(parser.cont);
                identificador.setValor(id);
                Node n_nuP=(Node) nuP;
                Node n_tip=(Node) tip;
                node.addHijos(identificador);
                node.addHijos(n_tip);
                node.addHijos(n_nuP);

                ArrayList<Variable> var = (ArrayList<Variable>) n_nuP.getValue();
                Variable tempo=new Variable(n_tip.getValor(),id);
                tempo.setArray(true);
                var.add(tempo);
                node.setValue(var);

                RESULT = node;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("nuevo_parametro",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // nuevo_parametro ::= COMMA VARIABLE ID L_BRACKET R_BRACKET COLON tipo 
            {
              Node RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int tipleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tipright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Node tip = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                MensajesEntrada.add("Entra a nuevo_parametro 2");
                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("nuevo_parametro");
                node.setID(parser.cont);

                parser.cont++;
                Node identificador =new Node();
                identificador.setEtiqueta("ID");
                identificador.setID(parser.cont);
                identificador.setValor(id);

                Node n_tip=(Node) tip;
                node.addHijos(identificador);
                node.addHijos(n_tip);

                ArrayList<Variable> var = new ArrayList();
                Variable tempo=new Variable(n_tip.getValor(),id);
                tempo.setArray(true);
                var.add(tempo);
                node.setValue(var);

                RESULT = node;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("nuevo_parametro",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // nuevo_parametro ::= COMMA VARIABLE ID L_BRACKET R_BRACKET L_BRACKET R_BRACKET COLON tipo nuevo_parametro 
            {
              Node RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int tipleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tipright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Node tip = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int nuPleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nuPright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Node nuP = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                MensajesEntrada.add("Entra a nuevo_parametro 1");

                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("nuevo_parametro");
                node.setID(parser.cont);

                parser.cont++;
                Node identificador =new Node();
                identificador.setEtiqueta("ID");
                identificador.setID(parser.cont);
                identificador.setValor(id);

                Node n_nuP=(Node) nuP;
                Node n_tip=(Node) tip;
                node.addHijos(identificador);
                node.addHijos(n_tip);
                node.addHijos(n_nuP);

                ArrayList<Variable> var = (ArrayList<Variable>) n_nuP.getValue();
                Variable tempo=new Variable(n_tip.getValor(),id);
                tempo.setArray(true);
                var.add(tempo);
                node.setValue(var);

                RESULT = node;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("nuevo_parametro",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // nuevo_parametro ::= COMMA VARIABLE ID L_BRACKET R_BRACKET L_BRACKET R_BRACKET COLON tipo 
            {
              Node RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int tipleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tipright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Node tip = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                MensajesEntrada.add("Entra a nuevo_parametro 2");
                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("nuevo_parametro");
                node.setID(parser.cont);

                parser.cont++;
                Node identificador =new Node();
                identificador.setEtiqueta("ID");
                identificador.setID(parser.cont);
                identificador.setValor(id);
                Node n_tip=(Node) tip;
                node.addHijos(identificador);
                node.addHijos(n_tip);

                ArrayList<Variable> var = new ArrayList();
                Variable tempo=new Variable(n_tip.getValor(),id);
                tempo.setArray(true);
                var.add(tempo);
                node.setValue(var);

                RESULT = node;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("nuevo_parametro",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // dec_general ::= dec_variable dec_general 
            {
              Node RESULT =null;
		int dvaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dvaright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Node dva = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int dgleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dgright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Node dg = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                MensajesEntrada.add("Entra a dec_general de vairable");
                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("dec_general");
                node.setID(parser.cont);
                node.addHijos((Node) dva);
                node.addHijos((Node) dg);
                RESULT = node;
               
              CUP$parser$result = parser.getSymbolFactory().newSymbol("dec_general",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // dec_general ::= dec_while dec_general 
            {
              Node RESULT =null;
		int dwleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dwright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Node dw = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int dgleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dgright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Node dg = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                MensajesEntrada.add("Entra a dec_general de while");
                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("dec_general");
                node.setID(parser.cont);
                node.addHijos((Node) dw);
                node.addHijos((Node) dg);
                RESULT = node;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("dec_general",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // dec_general ::= dec_for dec_general 
            {
              Node RESULT =null;
		int dfleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dfright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Node df = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int dgleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dgright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Node dg = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                MensajesEntrada.add("Entra a dec_general de for");
                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("dec_general");
                node.setID(parser.cont);
                node.addHijos((Node) df);
                node.addHijos((Node) dg);
                RESULT = node;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("dec_general",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // dec_general ::= dec_switch dec_general 
            {
              Node RESULT =null;
		int dsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Node ds = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int dgleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dgright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Node dg = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                MensajesEntrada.add("Entra a dec_general de switch");
                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("dec_general");
                node.setID(parser.cont);
                node.addHijos((Node) ds);
                node.addHijos((Node) dg);
                RESULT = node;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("dec_general",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // dec_general ::= dec_if dec_general 
            {
              Node RESULT =null;
		int dileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int diright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Node di = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int dgleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dgright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Node dg = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                MensajesEntrada.add("Entra a dec_general de if");
                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("dec_general");
                node.setID(parser.cont);
                node.addHijos((Node) di);
                node.addHijos((Node) dg);
                RESULT = node;
               
              CUP$parser$result = parser.getSymbolFactory().newSymbol("dec_general",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // dec_general ::= dec_llamada_funcion SEMICOLON dec_general 
            {
              Node RESULT =null;
		int dlfleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int dlfright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Node dlf = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int dgleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dgright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Node dg = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                MensajesEntrada.add("Entra a dec_general de llamada_funcion");
                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("dec_general");
                node.setID(parser.cont);
                node.addHijos((Node) dlf);
                node.addHijos((Node) dg);
                RESULT = node;
               
              CUP$parser$result = parser.getSymbolFactory().newSymbol("dec_general",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // dec_general ::= dec_var_inst dec_general 
            {
              Node RESULT =null;
		int dvileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dviright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Node dvi = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int dgleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dgright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Node dg = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                MensajesEntrada.add("Entra a dec_general de dec_var_inst");
                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("dec_general");
                node.setID(parser.cont);
                node.addHijos((Node) dvi);
                node.addHijos((Node) dg);
                RESULT = node;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("dec_general",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // dec_general ::= dec_return SEMICOLON dec_general 
            {
              Node RESULT =null;
		int drleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int drright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Node dr = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int dgleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dgright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Node dg = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                MensajesEntrada.add("Entra a dec_general de dec_return");
                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("dec_general");
                node.setID(parser.cont);
                node.addHijos((Node) dr);
                node.addHijos((Node) dg);
                RESULT = node;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("dec_general",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // dec_general ::= error 
            {
              Node RESULT =null;
		
                MensajesEntrada.add("Entra a dec_general nos vamos para el error ");
                Node node = new Node();
                RESULT = node;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("dec_general",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // dec_general ::= error SEMICOLON 
            {
              Node RESULT =null;
		
                MensajesEntrada.add("Entra a dec_general nos vamos para el error ");
                Node node = new Node();
                RESULT = node;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("dec_general",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // dec_general ::= 
            {
              Node RESULT =null;
		
                MensajesEntrada.add("Entra a dec_general a vacio");
                parser.cont++;
                Node nodo = new Node();
				nodo.setEtiqueta("vacio");
				nodo.setID(parser.cont);
                RESULT = nodo;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("dec_general",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // dec_variable ::= VARIABLE ID COLON tipo dec_var 
            {
              Node RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int tipleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tipright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Node tip = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int dvleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dvright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Node dv = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("dec_variable");
                node.setID(parser.cont);

                parser.cont++;
                Node identificador =new Node();
                identificador.setEtiqueta("ID");
                identificador.setID(parser.cont);
                identificador.setValor(id);
                node.addHijos(identificador);
                
                Node n_tip = (Node)tip;

                Node n_dv = (Node) dv;
                //n_dv.setValor(id);

                node.addHijos(n_tip);
                node.addHijos(n_dv);

                Variable new_var = new Variable(n_tip.getValor(), id);
                new_var.setArray(false);

                String test=n_dv.getValor()+"";
                
                if(test.equals("")){
                    //System.out.println("no se hizo asignacion en "+id);
                }else if( n_dv.getValue() == null ){
                    semantic_errors("Asignacion Nula |", dvleft, dvright);
                }else{
                    if(n_tip.getValor().equals(n_dv.getValor())){
                        System.out.println("la asignacion es correcta en "+id);
                        new_var.setValue(n_dv.getValue());
                        cuadruplos.add(new Cuadruplo("=",""+n_dv.getValue()," ",id));
                    }else{
                        System.out.println("la asignacion es incorrecta en "+ id);
                        semantic_errors("La asignacion es incorrecta en "+ id+" | ", dvleft, dvright);
                        
                    }
                }
                variables.add(new_var);
                //System.out.println(n_tip.getValor());
                
                RESULT = node;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("dec_variable",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // dec_variable ::= VARIABLE ID L_BRACKET math_op R_BRACKET COLON tipo dec_var 
            {
              Node RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int vpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int vpright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Node vp = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int tipleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tipright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Node tip = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int dvleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dvright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Node dv = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("dec_variable");
                node.setID(parser.cont);

                parser.cont++;
                Node identificador =new Node();
                identificador.setEtiqueta("ID");
                identificador.setID(parser.cont);
                identificador.setValor(id);

                Node n_tip = (Node)tip;
                Node n_dv = (Node) dv;
                Node n_vp= (Node) vp;

                node.addHijos(n_tip);
                node.addHijos(n_dv);
                node.addHijos(identificador);
                node.addHijos(n_vp);

                Variable new_var = new Variable(n_tip.getValor(), id);
                new_var.setArray(true);
                String test=n_dv.getValor()+"";
                

                if(test.equals("")){
                    //System.out.println("no se hizo asignacion en "+id);
                }else if( n_dv.getValue() == null ){
                    System.out.println("Pucha casco otra vez!!!!!!!!!!!!!");
                    semantic_errors("Asignacion Nula |", dvleft, dvright);
                }else{
                    if(n_tip.getValor().equals(n_dv.getValor())){
                        ArrayList temp=(ArrayList)n_dv.getValue();

                        int size=(int)n_vp.getValue();
                        if(size==temp.size()){
                            System.out.println("la asignacion es correcta en "+ id);
                            new_var.setValue(temp);
                        }else{
                            System.out.println("la asignacion no corresponde con el tamaño");
                            //new_var.setValue("Error");
                            semantic_errors("la asignacion no corresponde con el tamaño"+ id+" | ", dvleft, dvright);
                        }
                    }else{
                        System.out.println("la asignacion es incorrecta en "+ id);
                        semantic_errors("La asignacion es incorrecta en "+ id+" | ", dvleft, dvright);
                    }
                }

                variables.add(new_var);
                RESULT = node;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("dec_variable",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // dec_variable ::= VARIABLE ID L_BRACKET math_op R_BRACKET L_BRACKET math_op R_BRACKET COLON tipo dec_var 
            {
              Node RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int vp1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int vp1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Node vp1 = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int vp2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int vp2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Node vp2 = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int tipleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tipright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Node tip = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int dvleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dvright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Node dv = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("dec_variable");
                node.setID(parser.cont);

                parser.cont++;
                Node identificador =new Node();
                identificador.setEtiqueta("ID");
                identificador.setID(parser.cont);
                identificador.setValor(id);

                Node n_tip = (Node)tip;

                Node n_dv = (Node) dv;
                Node ind1= (Node) vp1;
                Node ind2=(Node) vp2;

                node.addHijos(n_tip);
                node.addHijos(n_dv);
                node.addHijos(identificador);
                node.addHijos(ind1);
                node.addHijos(ind2);

                Variable new_var = new Variable(n_tip.getValor(), id);
                /*if(!n_di.getEtiqueta.equals("vacio")){
                    new_var.setValue(n_di.getValue());
                }*/
                new_var.setArray(true);
                String test=n_dv.getValor()+"";
                //System.out.println("Maldita sea"+n_dv.getValue());
                /*
                TODO > Hay que implementar una manera de detectar errores en la asignación de valores. 
                En este momento no estamos validando tamaños de los arrays
                var a [4][2] = foo
                var b [2][2] = a
                Esto no está tirando error. 

                TODO > no estamos validando cuando estamos asignado el valor de una variable nula a otra variable.

                var a =  Null
                var b = a
                Esto debería de arrojar error.

                */
                //System.out.println("Pucha casco otra vez:"+n_dv.getValue());
                
                if(test.equals("")){
                    //System.out.println("no se hizo asignacion en "+id);
                }else if( n_dv.getValue() == null ){
                    System.out.println("Pucha casco otra vez!!!!!!!!!!!!!");
                    semantic_errors("Asignacion Nula |", dvleft, dvright);
                }else{
                    if(n_tip.getValor().equals(n_dv.getValor())){
                                                    
                        ArrayList temp = (ArrayList)n_dv.getValue();
                        ArrayList temp_Compare = (ArrayList)temp.get(0);

                        if(temp.size() == (int)ind1.getValue() && temp_Compare.size() == (int)ind2.getValue()){
                            boolean compare = true;
                            
                            for (int i = 1; i < temp.size() ; i++){
                                if(temp_Compare.size() != ((ArrayList)temp.get(i)).size()){
                                    System.out.println("Tamaños incorrectos "+ id);
                                    semantic_errors("Arreglo de tamaños incorrectos1 | ", dvleft, dvright);
                                    compare= false;
                                }
                            }
                            if(compare){
                                System.out.println("la asignacion es correcta en "+ id);
                                new_var.setValue(n_dv.getValue());
                            }
                        }else{
                            System.out.println("Tamaños incorrectos "+ id);
                            semantic_errors("Arreglo de tamaños incorrectos2 | ", dvleft, dvright);
                        }
                    }else{
                        System.out.println("la asignacion es incorrecta en "+ id);
                        semantic_errors("Asignación incorrecta id: "+ id +" | ", dvleft, dvright);
                        System.out.println( n_tip.getValor()+ " =/= "+ id);   
                    }

                }
                variables.add(new_var);
                RESULT = node;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("dec_variable",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // dec_var ::= dec_inst SEMICOLON 
            {
              Node RESULT =null;
		int dileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int diright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Node di = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("dec_var");
                node.setID(parser.cont);
                Node node_di = (Node) di;
                node.addHijos(node_di);
                System.out.println("aqui "+ node_di.getValue() +" aqui");
                node.setValor(node_di.getValor());
                node.setValue(node_di.getValue());
                RESULT = node;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("dec_var",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // dec_var ::= SEMICOLON 
            {
              Node RESULT =null;
		
                parser.cont++;
                Node node = new Node();
				node.setEtiqueta("vacio");
				node.setID(parser.cont);
                node.setValor("");
                node.setValue("vacio");
                RESULT = node;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("dec_var",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // dec_var ::= COMMA ID COLON tipo dec_inst dec_var 
            {
              Node RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int tipleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tipright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Node tip = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int dileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int diright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Node di = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int dvleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dvright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Node dv = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("dec_var");
                node.setID(parser.cont);

                parser.cont++;
                Node identificador =new Node();
                identificador.setEtiqueta("ID");
                identificador.setID(parser.cont);
                identificador.setValor(id);
                node.addHijos(identificador);

                Node n_tip =(Node) tip;
                Node n_di=(Node) di;
                Node n_dv=(Node) dv;

                node.addHijos(n_tip);
                node.addHijos(n_di);
                node.addHijos(n_dv);
                
                Variable new_var = new Variable(n_tip.getValor(), id);
                /*if(!n_di.getEtiqueta().equals("vacio")){
                    new_var.setValue(n_di.getValue());
                }*/
                new_var.setArray(false);
                
                String test=n_di.getValor()+"";
                
                if(test.equals("")){
                    System.out.println("no hubo asignacion en "+ id);
                }else if( n_di.getValue() == null ){
                    System.out.println("Pucha casco otra vez!!!!!!!!!!!!!");
                    semantic_errors("Asignacion Nula |", dileft, diright);
                }else{
                    if(n_tip.getValor().equals(n_di.getValor())){
                        System.out.println("la asignacion es correcta en "+ id);
                        new_var.setValue(n_di.getValue());
                    }else{
                        System.out.println(" # la asignacion es incorrecta en "+ id);
                        System.out.println( n_tip.getValor()+ " =/= "+ id);
                        semantic_errors("La asignacion es incorrecta en "+ id+" | ", dileft, diright);

                    }
                }
                node.setValor("");
                variables.add(new_var);
                RESULT = node;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("dec_var",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // dec_var ::= COMMA ID L_BRACKET math_op R_BRACKET COLON tipo dec_inst dec_var 
            {
              Node RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int vpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int vpright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Node vp = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int tipleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tipright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Node tip = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int dileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int diright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Node di = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int dvleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dvright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Node dv = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("dec_var");
                node.setID(parser.cont);

                parser.cont++;
                Node identificador =new Node();
                identificador.setEtiqueta("ID");
                identificador.setID(parser.cont);
                identificador.setValor(id);

                Node n_tip =(Node) tip;
                Node n_di=(Node) di;
                Node n_dv=(Node) dv;
                Node n_vp=(Node) vp;
                node.addHijos(n_dv);
                node.addHijos(identificador);
                node.addHijos(n_vp);
                node.addHijos(n_tip);
                node.addHijos(n_di);

                Variable new_var = new Variable(n_tip.getValor(), id);
                /*if(!n_di.getEtiqueta().equals("vacio")){
                    new_var.setValue(n_di.getValue());
                }*/
                new_var.setArray(true);
                variables.add(new_var);
                String test=n_di.getValor()+"";
                
                if(test.equals("")){
                    System.out.println("no hubo asignacion en "+ id);
                }else if( n_di.getValue() == null ){
                    System.out.println("Pucha casco otra vez!!!!!!!!!!!!!");
                    semantic_errors("Asignacion Nula |", dileft, diright);
                }else{
                    if(n_tip.getValor().equals(n_di.getValor())){
                        
                        ArrayList temp=(ArrayList)n_di.getValue();
                        int size=(int)n_vp.getValue();
                        if(size==temp.size()){
                            System.out.println("la asignacion es correcta en "+ id);
                            new_var.setValue(n_di.getValue());
                        }else{
                            System.out.println("la asignacion no corresponde con el tamaño");
                            //new_var.setValue("Error");
                            semantic_errors("la asignacion no corresponde con el tamaño"+ id+" | ", dileft, diright);
                        }
                        
                    }else{
                        System.out.println(" # la asignacion es incorrecta en "+ id);
                        System.out.println( n_tip.getValor()+ " =/= "+ id);
                        semantic_errors("La asignacion es incorrecta en "+ id+" | ", dileft, diright);

                    }
                }
                node.setValor("");
                variables.add(new_var);
                RESULT = node;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("dec_var",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // dec_var ::= COMMA ID L_BRACKET math_op R_BRACKET L_BRACKET math_op R_BRACKET COLON tipo dec_inst dec_var 
            {
              Node RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-10)).value;
		int vp1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int vp1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		Node vp1 = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int vp2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int vp2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Node vp2 = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int tipleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tipright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Node tip = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int dileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int diright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Node di = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int dvleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dvright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Node dv = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("dec_var");
                node.setID(parser.cont);

                parser.cont++;
                Node identificador =new Node();
                identificador.setEtiqueta("ID");
                identificador.setID(parser.cont);
                identificador.setValor(id);

                Node n_tip =(Node) tip;
                Node n_di=(Node) di;
                Node n_dv=(Node) dv;
                Node ind1=(Node) vp1;
                Node ind2= (Node) vp2;
                
                node.addHijos(n_dv);
                node.addHijos(n_tip);
                node.addHijos(n_di);
                node.addHijos(identificador);
                node.addHijos(ind1);
                node.addHijos(ind2);

                Variable new_var = new Variable(n_tip.getValor(), id);
                /*if(!n_di.getEtiqueta().equals("vacio")){
                    new_var.setValue(n_di.getValue());
                }*/
                new_var.setArray(true);
                
                String test=n_di.getValor()+"";
                
                if(test.equals("")){
                    System.out.println("no hubo asignacion en "+ id);
                    
                }else if( n_di.getValue() == null ){
                    System.out.println("Pucha casco otra vez!!!!!!!!!!!!!");
                    semantic_errors("Asignacion Nula |", dileft, diright);
                }else{
                    if(n_tip.getValor().equals(n_di.getValor())){
                        
                        ArrayList temp = (ArrayList)n_di.getValue();
                        ArrayList temp_Compare = (ArrayList)temp.get(0);

                        if(temp.size() == (int)ind1.getValue() && temp_Compare.size() == (int)ind2.getValue()){
                            boolean compare = true;
                            
                            for (int i = 1; i < temp.size() ; i++){
                                
                                if(temp_Compare.size() != ((ArrayList)temp.get(i)).size()){
                                    System.out.println("Tamaños incorrectos "+ id);
                                    compare= false;
                                    semantic_errors("Tamaños incorrectos1 |", dileft, diright);
                                }
                            }

                            if(compare){
                                System.out.println("la asignacion es correcta en "+ id);
                                new_var.setValue(n_di.getValue());
                            }
                        }else{
                            System.out.println("Tamaños incorrectos "+ id);
                            semantic_errors("Tamaños incorrectos2 |", dileft, diright);
                        }
                    }else{
                        System.out.println(" # la asignacion es incorrecta en "+ id);
                        System.out.println( n_tip.getValor()+ " =/= "+ id);
                    }
                }
                variables.add(new_var);
                node.setValor("");
                RESULT = node;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("dec_var",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // dec_var ::= error math_op 
            {
              Node RESULT =null;
		
                MensajesEntrada.add("Entra a dec_general nos vamos para el error ");
                Node node = new Node();
                RESULT = node;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("dec_var",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // dec_inst ::= OPASIGN FLOAT_VAL 
            {
              Node RESULT =null;
		int nmleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nmright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String nm = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("dec_inst");
                node.setID(parser.cont);

                parser.cont++;
                Node num =new Node();
                num.setEtiqueta("float");
                num.setID(parser.cont);
                num.setValor(nm);
                node.addHijos(num);
                RESULT = node;
             
              CUP$parser$result = parser.getSymbolFactory().newSymbol("dec_inst",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // dec_inst ::= OPASIGN CONSTSTRING 
            {
              Node RESULT =null;
		int csleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int csright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String cs = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("dec_inst");
                node.setID(parser.cont);
                node.setValor("string");
                parser.cont++;
                Node const_string =new Node();
                const_string.setEtiqueta("string");
                const_string.setID(parser.cont);
                const_string.setValor(cs.replaceAll("\"",""));
                node.addHijos(const_string);
                node.setValue(cs);
                RESULT = node;
             
              CUP$parser$result = parser.getSymbolFactory().newSymbol("dec_inst",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // dec_inst ::= OPASIGN CONSTCHAR 
            {
              Node RESULT =null;
		int ccleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int ccright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String cc = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("dec_inst");
                node.setID(parser.cont);
                node.setValor("chr");
                parser.cont++;
                System.out.print("PUCHA CASCO");
                Node const_char =new Node();
                const_char.setEtiqueta("const char");
                const_char.setID(parser.cont);
                const_char.setValor(cc.replaceAll("\'",""));
                node.addHijos(const_char);
                node.setValue(cc);
                System.out.println("que pedos CHAR:"+cc);
                RESULT = node;
             
              CUP$parser$result = parser.getSymbolFactory().newSymbol("dec_inst",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // dec_inst ::= OPASIGN TRUE 
            {
              Node RESULT =null;
		int truleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int truright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String tru = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("dec_inst");
                node.setID(parser.cont);
                node.setValor("bool");
                parser.cont++;
                Node bool_true =new Node();
                bool_true.setEtiqueta("true");
                bool_true.setID(parser.cont);
                bool_true.setValor(tru);
                node.addHijos(bool_true);
                node.setValue(true);
                RESULT = node;
             
              CUP$parser$result = parser.getSymbolFactory().newSymbol("dec_inst",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // dec_inst ::= OPASIGN FALSE 
            {
              Node RESULT =null;
		int falsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int falsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String fals = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("dec_inst");
                node.setID(parser.cont);
                node.setValor("bool");
                parser.cont++;
                Node bool_false =new Node();
                bool_false.setEtiqueta("false");
                bool_false.setID(parser.cont);
                bool_false.setValor(fals);
                node.addHijos(bool_false);
                node.setValue(false);
                RESULT = node;
             
              CUP$parser$result = parser.getSymbolFactory().newSymbol("dec_inst",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // dec_inst ::= OPASIGN arreglo 
            {
              Node RESULT =null;
		int arrleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int arrright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Node arr = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("dec_inst");
                node.setID(parser.cont);
                Node n_arr=(Node) arr;
                node.addHijos(n_arr);

                node.setValor(n_arr.getValor());
                node.setValue(n_arr.getValue());
                RESULT = node;
             
              CUP$parser$result = parser.getSymbolFactory().newSymbol("dec_inst",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // dec_inst ::= OPASIGN arreglo2d 
            {
              Node RESULT =null;
		int arrleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int arrright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Node arr = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("dec_inst");
                node.setID(parser.cont);
                Node n_arr=(Node) arr;
                node.addHijos(n_arr);

                node.setValor(n_arr.getValor());
                node.setValue(arr.getValue());
                System.out.println("Sera?"+arr.getValue().toString());
                RESULT = node;
             
              CUP$parser$result = parser.getSymbolFactory().newSymbol("dec_inst",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // dec_inst ::= OPASIGN math_op 
            {
              Node RESULT =null;
		int moleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int moright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Node mo = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("dec_inst");
                node.setID(parser.cont);
                
                Node n_mo=(Node) mo;
                node.addHijos(n_mo);
                node.setValue(n_mo.getValue());
                node.setValor(n_mo.isIsInt());
                RESULT = node;
             
              CUP$parser$result = parser.getSymbolFactory().newSymbol("dec_inst",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // dec_inst ::= error dec_inst 
            {
              Node RESULT =null;
		
                MensajesEntrada.add("Entra a dec_general nos vamos para el error ");
                Node node = new Node();
                RESULT = node;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("dec_inst",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // arreglo2d ::= L_KEY arreglo arr2_cont R_KEY 
            {
              Node RESULT =null;
		int arrleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int arrright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Node arr = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int arcleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int arcright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Node arc = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                parser.cont++;
                Node node=new Node();
                node.setEtiqueta("arreglo2d");
                Node n_arr=(Node) arr;
                Node n_arc=(Node) arc;
                node.addHijos(n_arr);
                node.addHijos((Node) arc);

                if(n_arc.getValor().equals("nada")){
                    node.setValor(n_arr.getValor());
                    ArrayList temp1 = new ArrayList();
                    temp1.add(n_arr.getValue());
                    node.setValue(temp1);

                }else if(n_arc.getValor().equals(n_arr.getValor())){
                    node.setValor(n_arr.getValor());                
                    ArrayList temp1=new ArrayList();
                    ArrayList temp2=(ArrayList)n_arc.getValue();
                    ArrayList temp3=new ArrayList();

                    for(int i=0;i<temp2.size();i++){ 
                        temp3= new ArrayList();
                        ArrayList temp_iter = (ArrayList)temp2.get(i);
                        for(int j=0;j<temp_iter.size();j++){
                            temp3.add(temp_iter.get(j));
                        }
                        temp1.add(temp3);
                    }
                    //System.out.println("Aqui perrin:"+temp1.toString());
                    temp1.add(n_arr.getValue());
                    //System.out.println("Aqui perrin:"+temp1.toString());
                    Collections.reverse(temp1);
                    node.setValue(temp1);
                }else{
                    node.setValor("error");
                }
                RESULT=node;
             
              CUP$parser$result = parser.getSymbolFactory().newSymbol("arreglo2d",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // arreglo2d ::= error R_KEY 
            {
              Node RESULT =null;
		
                System.err.println("arreglo2d error ");
                Node node = new Node();
                RESULT = node;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("arreglo2d",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // arr2_cont ::= COMMA arreglo arr2_cont 
            {
              Node RESULT =null;
		int arrleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int arrright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Node arr = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int arcleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int arcright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Node arc = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                parser.cont++;
                Node node=new Node();
                node.setEtiqueta("arr2_cont");
                node.setID(parser.cont);
                



                Node n_arr=(Node) arr;
                Node n_arc=(Node) arc;
                node.addHijos(n_arr);
                node.addHijos((Node) arc);

                if(n_arc.getValor().equals("nada")){
                    node.setValor(n_arr.getValor());
                    ArrayList temp1 = new ArrayList();
                    temp1.add(n_arr.getValue());
                    node.setValue(temp1);

                }else if(n_arc.getValor().equals(n_arr.getValor())){
                    node.setValor(n_arr.getValor());
                    ArrayList temp1=new ArrayList();
                    ArrayList temp2=(ArrayList)n_arc.getValue();
                    ArrayList temp3=new ArrayList();

                    for(int i=0;i<temp2.size();i++){ 
                        temp3= new ArrayList();
                        ArrayList temp_iter = (ArrayList)temp2.get(i);
                        for(int j=0;j<temp_iter.size();j++){
                            temp3.add(temp_iter.get(j));
                        }
                        temp1.add(temp3);
                    }
                    //System.out.println("ejenie queseso" +temp3.toString());
                    temp1.add(n_arr.getValue());
                    //temp1.add(temp3);
                    //System.out.println("Puntito cinco le voy a dar" +temp1.toString());

                    node.setValue(temp1);

                }else{
                    node.setValor("error");
                }

                RESULT=node;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("arr2_cont",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // arr2_cont ::= 
            {
              Node RESULT =null;
		
                parser.cont++;
                Node nodo = new Node();
				nodo.setEtiqueta("vacio");
				nodo.setID(parser.cont);
                nodo.setValor("nada");
                RESULT = nodo;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("arr2_cont",35, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // arreglo ::= L_KEY valor arr_cont R_KEY 
            {
              Node RESULT =null;
		int valeft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int varight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Node va = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int arcleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int arcright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Node arc = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                parser.cont++;
                Node node=new Node();
                node.setEtiqueta("arreglo");
                node.setID(parser.cont);
                Node n_va=(Node) va;
                Node n_arc=(Node) arc;
                
                node.addHijos(n_va);
                node.addHijos(n_arc);


                if(n_arc.getValor().equals("nada")){
                    node.setValor(n_va.getValor());
                    ArrayList temp1=new ArrayList();
                    temp1.add(n_va.getValue());
                    node.setValue(temp1);
                }else if(n_arc.getValor().equals(n_va.getValor())){                   
                    node.setValor(n_va.getValor());
                    ArrayList temp1=new ArrayList();
                    ArrayList temp2=(ArrayList)n_arc.getValue();
                    
                    for(int i=0;i<temp2.size();i++){
                        temp1.add(temp2.get(i));
                    }
                    temp1.add(n_va.getValue());
                    Collections.reverse(temp1);

                    node.setValue(temp1);
                }else{
                    node.setValor("error");
                }
                RESULT=node;

             
              CUP$parser$result = parser.getSymbolFactory().newSymbol("arreglo",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // arr_cont ::= COMMA valor arr_cont 
            {
              Node RESULT =null;
		int valeft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int varight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Node va = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int arcleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int arcright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Node arc = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("arr_cont");
                node.setID(parser.cont);

                Node n_va=(Node) va;
                Node n_arc=(Node) arc;
                
                node.addHijos(n_va);
                node.addHijos(n_arc);

                if(n_arc.getValor().equals("nada")){
                    node.setValor(n_va.getValor());
                    ArrayList temp1=new ArrayList();
                    temp1.add(n_va.getValue());
                    node.setValue(temp1);
                }else if(n_arc.getValor().equals(n_va.getValor())){         
                    node.setValor(n_va.getValor());
                    ArrayList temp1=new ArrayList();
                    ArrayList temp2=(ArrayList)n_arc.getValue();
                    //if( temp2!=null && !temp2.isEmpty() ){
                        for(int i=0;i<temp2.size();i++){
                            temp1.add(temp2.get(i));
                        }
                        temp1.add(n_va.getValue());
                        node.setValue(temp1);
                    //}
                }else{
                    node.setValor("error");
                }
                RESULT = node;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("arr_cont",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // arr_cont ::= 
            {
              Node RESULT =null;
		
                parser.cont++;
                Node nodo = new Node();
				nodo.setEtiqueta("vacio");
				nodo.setID(parser.cont);
                nodo.setValor("nada");
                RESULT = nodo;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("arr_cont",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // dec_var_inst ::= ID OPASIGN valor SEMICOLON 
            {
              Node RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int valeft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int varight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Node va = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("dec_var_inst");
                node.setID(parser.cont);
                node.setLine(idright);
                node.setColummn(idleft);
                parser.cont++;
                Node identificador =new Node();
                identificador.setEtiqueta("ID");
                identificador.setID(parser.cont);
                identificador.setValor(id);

                Node n_va=(Node) va;
                node.addHijos(identificador);
                node.addHijos(n_va);
                
                Variable compare = buscaTipo(identificador.getValor(),false);
                System.out.println("La variable tiene asignado un: "+n_va.getValor());
                
                if(compare.getTipo().equals(n_va.getValor())){
                    System.out.println(" :) la asignacion es correcta en "+ id);
                    System.out.println( compare.getTipo() + " == "+ n_va.getValor());
                    for(Variable iter: variables ){
                        if(iter.getId().equals(identificador.getValor())){
                            iter.setValue(n_va.getValue());
                            cuadruplos.add(new Cuadruplo("=",""+n_va.getValue()," ",id));
                        }
                    }
                }else{
                    System.out.println(" :( la asignacion es incorrecta en "+ id);
                    System.out.println(  compare.getTipo() + " =/= "+ n_va.getValor());
                }

                RESULT = node;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("dec_var_inst",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // dec_var_inst ::= ID DOT AT L_PAR math_op R_PAR OPASIGN valor SEMICOLON 
            {
              Node RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int vpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int vpright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Node vp = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int valeft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int varight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Node va = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("dec_var_inst");
                node.setID(parser.cont);

                parser.cont++;
                Node identificador =new Node();
                identificador.setEtiqueta("ID");
                identificador.setID(parser.cont);
                identificador.setValor(id);
                node.addHijos((Node) vp);

                Node n_va=(Node) va;
                node.addHijos(identificador);
                node.addHijos(n_va);
                

                Variable compare = buscaTipo(identificador.getValor(),true);
                System.out.println("La variable tiene asignado un: "+n_va.getValor());
                
                if(compare.getTipo().equals(n_va.getValor())){
                    System.out.println(" :) la asignacion es correcta en "+ id);
                    System.out.println( compare.getTipo() + " == "+ n_va.getValor());
                }else{
                    System.out.println(" :( la asignacion es incorrecta en "+ id);
                    System.out.println(  compare.getTipo() + " =/= "+ n_va.getValor());
                }


                RESULT = node;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("dec_var_inst",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // dec_var_inst ::= ID OPASIGNADD valor SEMICOLON 
            {
              Node RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int opasleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int opasright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String opas = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int valeft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int varight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Node va = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("dec_var_inst");
                node.setID(parser.cont);
                node.setLine(idright);
                node.setColummn(idleft);
                parser.cont++;
                Node identificador =new Node();
                identificador.setEtiqueta("ID");
                identificador.setID(parser.cont);
                identificador.setValor(id);
                Node n_va=(Node) va;
                node.addHijos(identificador);
                node.addHijos(n_va);

                Variable compare = buscaTipo(identificador.getValor(),false);
                String operadorAritmetico = ((String)opas).charAt(0) + " ";
                if(compare.getTipo().equals(n_va.getValor())){
                    System.out.println("incrementando o decrementando"+ id);
                    //System.out.println( compare.getTipo() + " == "+ n_va.getValor());
                    for(Variable iter: variables ){
                        if(iter.getId().equals(identificador.getValor())){
                            iter.setValue(n_va.getValue());
                            
                            String temp="T"+resultId;
                            cuadruplos.add(new Cuadruplo(operadorAritmetico,id,""+n_va.getValue(),temp));
                            cuadruplos.add(new Cuadruplo("=",temp," ",id));
                        }
                    }
                }else{
                    if(opas.equals("+=")){
                        System.out.println("incremento incorrecto"+ id);
                    }else{
                        System.out.println("decremento incorrecto"+ id);
                    }
                    System.out.println(  compare.getTipo() + " =/= "+ n_va.getValor());
                }
                RESULT = node;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("dec_var_inst",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // dec_var_inst ::= ID OPASIGNMULT valor SEMICOLON 
            {
              Node RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int opasleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int opasright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String opas = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int valeft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int varight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Node va = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("dec_var_inst");
                node.setID(parser.cont);
                node.setLine(idright);
                node.setColummn(idleft);
                parser.cont++;
                Node identificador =new Node();
                identificador.setEtiqueta("ID");
                identificador.setID(parser.cont);
                identificador.setValor(id);
                parser.cont++;
                //Node num =new Node();
                //num.setEtiqueta("num");
                //num.setID(parser.cont);
                Node n_va=(Node) va;
                //num.setValor();
                node.addHijos(identificador);
                node.addHijos(n_va);

                Variable compare = buscaTipo(identificador.getValor(),false);
                String operadorAritmetico = ((String)opas).charAt(0) + " ";
                if(compare.getTipo().equals(n_va.getValor())){
                    System.out.println("multiplicando o dividiendo"+ id);
                    //System.out.println( compare.getTipo() + " == "+ n_va.getValor());
                    for(Variable iter: variables ){
                        if(iter.getId().equals(identificador.getValor())){
                            iter.setValue(n_va.getValue());
                            
                            String temp="T"+resultId;
                            cuadruplos.add(new Cuadruplo(operadorAritmetico,id,""+n_va.getValue(),temp));
                            cuadruplos.add(new Cuadruplo("=",temp," ",id));
                        }
                    }
                }else{
                    if(opas.equals("+=")){
                        System.out.println("multiplicado incorrecto"+ id);
                    }else{
                        System.out.println("dividiendo incorrecto"+ id);
                    }
                    System.out.println(  compare.getTipo() + " =/= "+ n_va.getValor());
                }
                RESULT = node;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("dec_var_inst",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // dec_var_inst ::= ID OPINC SEMICOLON 
            {
              Node RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opasleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int opasright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String opas = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("dec_var_inst");
                node.setID(parser.cont);
                node.setLine(idright);
                node.setColummn(idleft);
                parser.cont++;
                Node identificador =new Node();
                identificador.setEtiqueta("ID");
                identificador.setID(parser.cont);
                identificador.setValor(id);
                node.addHijos(identificador);
                Variable compare = buscaTipo(identificador.getValor(),false);
                String operadorAritmetico = ((String)opas).charAt(0) + " ";
                if(compare.getTipo().equals("int")){
                    System.out.println("incrementando o decrementando"+ id);
                    //System.out.println( compare.getTipo() + " == "+ n_va.getValor());
                    for(Variable iter: variables ){
                        if(iter.getId().equals(identificador.getValor())){
                            String temp="T"+resultId;
                            cuadruplos.add(new Cuadruplo(operadorAritmetico,id,"1",temp));
                            cuadruplos.add(new Cuadruplo("=",temp," ",id));
                            iter.setValue(temp);
                        }
                    }
                }else{
                    if(opas.equals("+=")){
                        System.out.println("incremento incorrecto"+ id);
                    }else{
                        System.out.println("decremento incorrecto"+ id);
                    }
                }
                RESULT = node;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("dec_var_inst",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // dec_var_inst ::= ID DOT AT L_PAR math_op COMMA math_op R_PAR OPASIGN valor SEMICOLON 
            {
              Node RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-10)).value;
		int vp1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int vp1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Node vp1 = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int vp2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int vp2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Node vp2 = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int valeft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int varight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Node va = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("dec_var_inst");
                node.setID(parser.cont);
                node.setLine(idright);
                node.setColummn(idleft);
                parser.cont++;
                Node identificador =new Node();
                identificador.setEtiqueta("ID");
                identificador.setID(parser.cont);
                identificador.setValor(id);
                node.addHijos((Node) vp1);
                node.addHijos((Node) vp2);

                Node n_va=(Node) va;
                node.addHijos(identificador);
                node.addHijos(n_va);
                

                Variable compare = buscaTipo(identificador.getValor(),true);
                System.out.println("La variable tiene asignado un: "+n_va.getValor());
                
                if(compare.getTipo().equals(n_va.getValor())){
                    System.out.println(" :) la asignacion es correcta en "+ id);
                    System.out.println( compare.getTipo() + " == "+ n_va.getValor());
                }else{
                    System.out.println(" :( la asignacion es incorrecta en "+ id);
                    System.out.println(  compare.getTipo() + " =/= "+ n_va.getValor());
                }

                RESULT = node;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("dec_var_inst",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // valor ::= CONSTSTRING 
            {
              Node RESULT =null;
		int csleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int csright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String cs = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("valor");
                node.setID(parser.cont);
                node.setValor("string");
                node.setValue(cs);
                parser.cont++;
                
                /********************
                    REVISAR ESTO
                *********************/
                Node const_string = new Node();
                const_string.setEtiqueta("const string");
                const_string.setID(parser.cont);
                
                if(cs.equals("")){
                    const_string.setValor("empty");
                }else{
                    const_string.setValor(cs);
                }    
                //node.setValor(const_string.getValor().replaceAll("\"",""));

                RESULT = node;
           
              CUP$parser$result = parser.getSymbolFactory().newSymbol("valor",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // valor ::= CONSTCHAR 
            {
              Node RESULT =null;
		int ccleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int ccright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String cc = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("valor");
                node.setID(parser.cont);
                node.setValor("chr");
                node.setValue(cc);
                
                parser.cont++;
                Node const_char = new Node();
                const_char.setEtiqueta("const char");
                const_char.setID(parser.cont);
                const_char.setValor(cc);

                //node.setValor(const_char.getValor());
                RESULT = node;
           
              CUP$parser$result = parser.getSymbolFactory().newSymbol("valor",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // valor ::= TRUE 
            {
              Node RESULT =null;
		int truleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int truright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String tru = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("valor");
                node.setID(parser.cont);
                node.setValor("bool");
                node.setValue(true);

                parser.cont++;
                Node bool_true = new Node();
                bool_true.setEtiqueta("true");
                bool_true.setID(parser.cont);
                bool_true.setValor(tru);

                //node.setValor(bool_true.getValor());
                RESULT = node;
           
              CUP$parser$result = parser.getSymbolFactory().newSymbol("valor",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // valor ::= FALSE 
            {
              Node RESULT =null;
		int falsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int falsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String fals = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("valor");
                node.setID(parser.cont);
                node.setValor("bool");
                node.setValue(false);
                parser.cont++;
                Node bool_false = new Node();
                bool_false.setEtiqueta("false");
                bool_false.setID(parser.cont);
                bool_false.setValor(fals);

                //node.setValor(bool_false.getValor());
                RESULT = node;
           
              CUP$parser$result = parser.getSymbolFactory().newSymbol("valor",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // valor ::= FLOAT_VAL 
            {
              Node RESULT =null;
		int fltleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fltright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String flt = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("valor");
                node.setID(parser.cont);
                
                parser.cont++;
                Node num_flt = new Node();
                num_flt.setEtiqueta("FLOAT");
                num_flt.setID(parser.cont);
                num_flt.setValor(flt);

                node.setValor(num_flt.getValor());
                RESULT = node;
           
              CUP$parser$result = parser.getSymbolFactory().newSymbol("valor",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // valor ::= math_op 
            {
              Node RESULT =null;
		int mopleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int mopright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Node mop = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("valor");
                node.setID(parser.cont);
                Node n_mop=(Node) mop;
                node.addHijos(n_mop);
                node.setValor(n_mop.isIsInt());
                System.out.println("Aritmetica:"+n_mop.getValue()+":"+n_mop.isAritmetica());
                node.setAritmetica(n_mop.isAritmetica());
                node.setValue(n_mop.getValue());
                RESULT = node;
           
              CUP$parser$result = parser.getSymbolFactory().newSymbol("valor",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // math_op ::= m_op sum_op 
            {
              Node RESULT =null;
		int multleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int multright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Node mult = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int sumleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sumright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Node sum = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("math_op");
                node.setID(parser.cont);

                Node n_mult=(Node) mult;
                Node n_sum=(Node) sum;

                if( n_mult.isIsInt().equals("int") && n_sum.isIsInt().equals("int") ){
                    //node.setValue((int)n_mult.getValue() + (int)n_sum.getValue());
                    if(n_sum.getEtiqueta().equals("vacio")){
                        node.setValue(n_mult.getValue());
                    }else{
                        //String result="T"+resultId;
                        //node.setValue(result);
                        node.setValue(n_mult.getValue()+""+n_sum.getValue());
                        //resultId++;
                        /*Cuadruplo temp= new Cuadruplo();
                        temp.setOperator(n_sum.getOperador());
                        temp.setArgs1(n_mult.getValue()+"");
                        temp.setArgs2(n_sum.getValue()+ "");
                        temp.setResult(result); 
                        cuadruplos.add(temp);*/
                        //cuadruplos.add(new Cuadruplo(n_mult.getOperador(),n_sum.getValue()+"",n_mult.getValue()+ "",result));

                    }
                    if(n_mult.isAritmetica()){
                        node.setAritmetica(true);
                    }else if(n_sum.isAritmetica()){
                        node.setAritmetica(true);
                    }
                    node.setIsInt("int");
                }else if(  n_sum.getEtiqueta().equals("vacio") ){
                    node.setValue(n_mult.getValue());
                    node.setIsInt(n_mult.isIsInt());
                }else {
                    System.err.println("OPERACIONES INCOMPATIBLES");
                    node.setIsInt("error");
                }
                node.addHijos(n_mult);
                node.addHijos(n_sum);
                RESULT = node;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("math_op",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // sum_op ::= OPSUM m_op sum_op 
            {
              Node RESULT =null;
		int operadorleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int operadorright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String operador = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int multleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int multright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Node mult = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int sumleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sumright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Node sum = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("math_op +");
                Node n_mult=(Node) mult;
                Node n_sum=(Node) sum;
                if(n_mult.isIsInt().equals("int") && n_sum.isIsInt().equals("int")){
                    //node.setValue((int)n_mult.getValue() + (int)n_sum.getValue());
                    if(n_sum.getEtiqueta().equals("vacio")){
                        node.setValue(operador+""+n_mult.getValue());
                    }else{
                        //String result="T"+resultId;
                        //node.setValue(result);
                        node.setValue(operador+""+n_mult.getValue()+""+n_sum.getValue());
                        //resultId++;
                        /*Cuadruplo temp= new Cuadruplo();
                        temp.setOperator(n_sum.getOperador());
                        temp.setArgs1(n_mult.getValue()+"");
                        temp.setArgs2(n_sum.getValue()+ "");
                        temp.setResult(result); 
                        cuadruplos.add(temp);*/
                        //cuadruplos.add(new Cuadruplo(n_mult.getOperador(),n_sum.getValue()+"",n_mult.getValue()+ "",result));

                    }
                    //node.setOperador(operador);
                    node.setAritmetica(true);
                    node.setIsInt("int");
                }else {
                    System.err.println("OPERACIONES INCOMPATIBLES");
                    semantic_errors("Operaciones Incompatibles | ", operadorleft, operadorright);
                    System.err.println( "posicion operador: (" +operadorleft +","+operadorright+")" );
                    System.err.println( "mult: (" +multleft +","+multright+")" );
                    System.err.println( "sum: (" +sumleft +","+sumright+")" );

                    node.setIsInt("error");
                }
                node.setID(parser.cont);
                node.addHijos(n_mult);
                node.addHijos(n_sum);
                RESULT = node;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sum_op",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // sum_op ::= 
            {
              Node RESULT =null;
		
                parser.cont++;
                Node nodo = new Node();
				nodo.setEtiqueta("vacio");
				nodo.setID(parser.cont);
                nodo.setValue(0);
                nodo.setIsInt("int");
                RESULT = nodo;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sum_op",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // m_op ::= val mult_op 
            {
              Node RESULT =null;
		int vlleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int vlright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Node vl = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int multleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int multright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Node mult = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("math_op");
                node.setID(parser.cont);
                Node n_vl=(Node) vl;
                Node n_mult=(Node) mult;

                if(n_vl.isIsInt().equals("int") && n_mult.isIsInt().equals("int") ){
                    //node.setValue((int)n_vl.getValue() * (int)n_mult.getValue());
                    if(n_mult.getEtiqueta().equals("vacio")){
                        node.setValue(n_vl.getValue());
                    }else{
                        //String result="T"+resultId;
                        //node.setValue(result);
                        node.setValue(n_vl.getValue()+""+n_mult.getValue());
                        //resultId++;
                        /*Cuadruplo temp= new Cuadruplo();
                        temp.setOperator(n_mult.getOperador());
                        temp.setArgs1(n_vl.getValue()+"");
                        temp.setArgs2(n_mult.getValue()+ "");
                        temp.setResult(result); 
                        cuadruplos.add(temp);*/
                        //cuadruplos.add(new Cuadruplo(n_mult.getOperador(),n_vl.getValue()+"",n_mult.getValue()+ "",result));
                    }
                    //node.setOperador(n_mult.getOperador());
                    node.setAritmetica(n_mult.isAritmetica());
                    node.setIsInt("int");
                }else if( n_mult.getEtiqueta().equals("vacio")){
                    node.setValue(n_vl.getValue());
                    node.setIsInt(n_vl.isIsInt());

                }else {
                    System.err.println("OPERACIONES INCOMPATIBLES");
                    node.setIsInt("error");
                }
                n_vl.setLine(vlright);
                n_vl.setColummn(vlleft);
                node.addHijos(n_vl);
                node.addHijos(n_mult);

                RESULT = node;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("m_op",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // mult_op ::= OPMULT val mult_op 
            {
              Node RESULT =null;
		int operadorleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int operadorright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String operador = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int vlleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int vlright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Node vl = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int multleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int multright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Node mult = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("math_op *");
                node.setID(parser.cont);
                Node n_vl=(Node) vl;
                Node n_mult=(Node) mult;
                if(n_vl.isIsInt().equals("int") && n_mult.isIsInt().equals("int")){
                    //node.setValue((int)n_vl.getValue() * (int)n_mult.getValue());
                    if(n_mult.getEtiqueta().equals("vacio")){
                        node.setValue(operador+""+n_vl.getValue());
                    }else{
                        //String result="T"+resultId;
                        //node.setValue(result);
                        node.setValue(operador+""+n_vl.getValue()+""+n_mult.getValue());
                        //resultId++;
                        /*Cuadruplo temp= new Cuadruplo();
                        temp.setOperator(n_mult.getOperador());
                        temp.setArgs1(n_vl.getValue()+"");
                        temp.setArgs2(n_mult.getValue()+ "");
                        temp.setResult(result); 
                        cuadruplos.add(temp);*/
                        //cuadruplos.add(new Cuadruplo(n_mult.getOperador(),n_vl.getValue()+"",n_mult.getValue()+ "",result));

                    }
                    node.setAritmetica(true);
                    //node.setOperador(operador);
                    node.setIsInt("int");
                }else {
                    System.err.println("OPERACIONES INCOMPATIBLES");
                    node.setIsInt("error");
                }
                n_vl.setLine(vlright);
                n_vl.setColummn(vlleft);
                node.addHijos(n_vl);
                node.addHijos(n_mult);
                RESULT = node;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("mult_op",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // mult_op ::= 
            {
              Node RESULT =null;
		
                parser.cont++;
                Node nodo = new Node();
				nodo.setEtiqueta("vacio");
                nodo.setValue(1);
				nodo.setID(parser.cont);
                nodo.setIsInt("int");
                RESULT = nodo;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("mult_op",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // val ::= ID 
            {
              Node RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                /*
                *** !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
                SE DEBE DISTINGUIR ENTRE STRINGS E 
                INTEGERS, YA QUE PODEMOS CONCATENAR CADENAS
                ***!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
                */
                
                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("val");
                node.setID(parser.cont);
                node.setValueIsID(true);
                //Para ver si es variable
                Variable temp = buscaTipo(id,false);
                //Para ver si es array
                if( temp.getTipo().equals("-1")){
                    temp = buscaTipo(id,true);
                }
                System.out.println(temp.toString());

                

                if(temp.getTipo().equals("int")){
                   /* if(temp.getValue().getClass() == Integer.class ){
                        
                    }else*/ 
                    if (temp.isEsArray()){
                        System.out.println("a que es array prrin");
                        node.setValue(temp.getValue());
                        node.setIsInt("int");
                    }else{
                        System.out.println("veamo si entra prrin");
                        //int valor_temp = (int)temp.getValue();
                        //node.setValue(valor_temp);
                        node.setValue(temp.getValue());
                        node.setIsInt("int");
                    }
                }else if(temp.getTipo().equals("string")){
                    //String valor_temp = (String)temp.getValue();
                    //node.setValue(valor_temp);
                    //node.setIsInt("string");
                    /*if(temp.getValue().getClass() == String.class ){
                        
                    }else */
                    if (temp.isEsArray()){
                        System.out.println("a que es array prrin");
                        node.setValue(temp.getValue());
                        node.setIsInt("string");
                    }else{
                        System.out.println("veamo si entra prrin");
                        //String valor_temp = (String)temp.getValue();
                        //node.setValue(valor_temp);
                        node.setValue(temp.getValue());
                        node.setIsInt("string");
                    }

                }
                else if(temp.getTipo().equals("chr")){
                    //char valor_temp = ((String)temp.getValue()).charAt(0);
                    //node.setValue(valor_temp);
                    //node.setIsInt("chr");
                    /*if(temp.getValue().getClass() == Character.class ){   
                    }*/
                    if (temp.isEsArray()){
                        System.out.println("a que es array prrin:"+temp.getValue().toString());
                        node.setValue(temp.getValue());
                        node.setIsInt("chr");
                    }else{
                        System.out.println("veamo si entra prrin chr");
                        //char valor_temp = ((String)temp.getValue()).charAt(0);
                        //node.setValue(valor_temp);
                        node.setValue(temp.getValue());
                        node.setIsInt("chr");
                    }
                    System.out.println("NO entre"+temp.getValue().getClass());
                }else if(temp.getTipo().equals("bool")){
                    /*if(temp.getValue().getClass() == Boolean.class ){
                    }else */
                    if (temp.isEsArray()){
                        System.out.println("a que es array prrin");
                        node.setValue(temp.getValue());
                        node.setIsInt("bool");
                    }else{
                        System.out.println("veamo si entra prrin");
                        boolean valor_temp;
                        if(temp.getValue()==null){
                            node.setValue(temp.getValue());
                        }else if((boolean)temp.getValue()){
                            valor_temp = true;
                            node.setValue(valor_temp);
                        }else{
                            valor_temp = false;
                            node.setValue(valor_temp);
                        }
                        node.setIsInt("bool");
                    }
                }else{
                    node.setIsInt("error");
                }
                
                parser.cont++;

                Node identificador = new Node();
                identificador.setEtiqueta("ID");
                identificador.setID(parser.cont);
                identificador.setValor(id);

                node.setValor(identificador.getValor());
                RESULT = node;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("val",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // val ::= ID DOT AT L_PAR math_op R_PAR 
            {
              Node RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int vpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int vpright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Node vp = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("val");
                node.setID(parser.cont);
                
                Variable temp = buscaTipo(id,true);
                Node n_vp = (Node)vp;

                if(temp.getTipo().equals("int")){
                    ArrayList valor_temp = (ArrayList)temp.getValue();
                    int pos =(int)valor_temp.get( (int)n_vp.getValue() );
                    node.setValue(pos);
                    node.setIsInt("int");
                    
                }else if(temp.getTipo().equals("string")){
                    ArrayList<String> valor_temp = (ArrayList<String>)temp.getValue();
                    node.setValue(valor_temp.get( (int)n_vp.getValue() ) );
                    node.setIsInt("string");
                }
                else if(temp.getTipo().equals("chr")){
                    ArrayList valor_temp = (ArrayList)temp.getValue();
                    char pos =((String)valor_temp.get( (int)n_vp.getValue())).charAt(0);
                    node.setValue(pos);
                    node.setIsInt("chr");
                }
                else if(temp.getTipo().equals("bool")){
                    ArrayList valor_temp = (ArrayList)temp.getValue();
                    boolean pos =(boolean)valor_temp.get( (int)n_vp.getValue() );
                    node.setValue(pos);
                    node.setIsInt("bool");
                }


                parser.cont++;
                Node identificador = new Node();
                identificador.setEtiqueta("ID");
                identificador.setID(parser.cont);
                identificador.setValor(id);
                node.addHijos(identificador);
                node.addHijos((Node) vp);
                node.setValor("");

                RESULT = node;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("val",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // val ::= ID DOT AT L_PAR math_op COMMA math_op R_PAR 
            {
              Node RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int vp1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int vp1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Node vp1 = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int vp2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int vp2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Node vp2 = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("val");
                node.setID(parser.cont);
                
                parser.cont++;
                Node identificador = new Node();
                identificador.setEtiqueta("ID");
                identificador.setID(parser.cont);
                identificador.setValor(id);
                node.addHijos(identificador);
                node.addHijos((Node) vp1);
                node.addHijos((Node) vp2);
                node.setValor("");

                RESULT = node;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("val",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // val ::= NUM 
            {
              Node RESULT =null;
		int nmleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nmright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String nm = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("val");
                node.setID(parser.cont);
                node.setValue(Integer.parseInt(nm));
                parser.cont++;
                Node num = new Node();
                num.setEtiqueta("num");
                num.setID(parser.cont);
                num.setValor(nm);

                node.setValor(num.getValor());
                node.setIsInt("int");
                RESULT = node;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("val",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // val ::= dec_llamada_funcion 
            {
              Node RESULT =null;
		int dlfleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dlfright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Node dlf = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("val");
                node.setID(parser.cont);
                node.addHijos((Node) dlf);
                RESULT = node;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("val",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // val ::= L_PAR math_op R_PAR 
            {
              Node RESULT =null;
		int moleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int moright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Node mo = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("val");
                node.setID(parser.cont);
                Node n_mo=(Node) mo;
                node.addHijos(n_mo);
                node.setValue("("+n_mo.getValue()+")");
                node.setIsInt(n_mo.isIsInt());
                RESULT = node;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("val",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // dec_while ::= WHILE L_PAR condicion R_PAR L_KEY dec_general R_KEY 
            {
              Node RESULT =null;
		int condleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int condright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Node cond = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int dgleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dgright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Node dg = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("dec_while");
                node.setID(parser.cont);
                Node n_cond=(Node) cond;
                node.addHijos(n_cond);
                node.addHijos((Node) dg);
                System.out.println("Booleana:"+n_cond.getValue());
                RESULT = node;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("dec_while",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // dec_for ::= FOR L_PAR ID COMMA math_op UPTO math_op COMMA STEP L_PAR math_op R_PAR R_PAR L_KEY dec_general R_KEY 
            {
              Node RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-13)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-13)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-13)).value;
		int nm1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).left;
		int nm1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).right;
		Node nm1 = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-11)).value;
		int nm2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int nm2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		Node nm2 = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int nm3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int nm3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Node nm3 = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int dgleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dgright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Node dg = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                MensajesEntrada.add("Entra a dec_for 1");
                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("dec_for");
                node.setID(parser.cont);

                parser.cont++;
                Node identificador = new Node();
                identificador.setEtiqueta("ID");
                identificador.setID(parser.cont);
                identificador.setValor(id);
                /*parser.cont++;
                Node num1 =new Node();
                num1.setEtiqueta("num");
                num1.setID(parser.cont);
                num1.setValor(nm1);
                parser.cont++;
                Node num2 =new Node();
                num2.setEtiqueta("num");
                num2.setID(parser.cont);
                num2.setValor(nm2);
                parser.cont++;
                Node num3 =new Node();
                num3.setEtiqueta("num");
                num3.setID(parser.cont);
                num3.setValor(nm3);*/     
                node.addHijos(identificador);
                node.addHijos((Node) nm1);
                node.addHijos((Node) nm2);
                node.addHijos((Node) nm3);
                node.addHijos((Node) dg);
                RESULT = node;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("dec_for",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-15)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // dec_for ::= FOR L_PAR ID COMMA math_op DOWNTO math_op COMMA STEP L_PAR math_op R_PAR R_PAR L_KEY dec_general R_KEY 
            {
              Node RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-13)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-13)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-13)).value;
		int nm1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).left;
		int nm1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).right;
		Node nm1 = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-11)).value;
		int nm2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int nm2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		Node nm2 = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int nm3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int nm3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Node nm3 = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int dgleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dgright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Node dg = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                MensajesEntrada.add("Entra a dec_for 2");
                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("dec_for");
                node.setID(parser.cont);

                parser.cont++;
                Node identificador = new Node();
                identificador.setEtiqueta("ID");
                identificador.setID(parser.cont);
                identificador.setValor(id);
                /*parser.cont++;
                Node num1 =new Node();
                num1.setEtiqueta("num");
                num1.setID(parser.cont);
                num1.setValor(nm1);
                parser.cont++;
                Node num2 =new Node();
                num2.setEtiqueta("num");
                num2.setID(parser.cont);
                num2.setValor(nm2);
                parser.cont++;
                Node num3 =new Node();
                num3.setEtiqueta("num");
                num3.setID(parser.cont);
                num3.setValor(nm3);*/     
                node.addHijos(identificador);
                node.addHijos((Node) nm1);
                node.addHijos((Node) nm2);
                node.addHijos((Node) nm3);
                node.addHijos((Node) dg);
                RESULT = node;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("dec_for",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-15)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // dec_for ::= FOR L_PAR VARIABLE ID COLON INTEGER COMMA math_op UPTO math_op COMMA STEP L_PAR math_op R_PAR R_PAR L_KEY dec_general R_KEY 
            {
              Node RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-15)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-15)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-15)).value;
		int nm1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).left;
		int nm1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).right;
		Node nm1 = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-11)).value;
		int nm2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int nm2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		Node nm2 = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int nm3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int nm3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Node nm3 = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int dgleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dgright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Node dg = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                MensajesEntrada.add("Entra a dec_for 3");
                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("dec_for");
                node.setID(parser.cont);

                parser.cont++;
                Node identificador = new Node();
                identificador.setEtiqueta("ID");
                identificador.setID(parser.cont);
                identificador.setValor(id);
                /*parser.cont++;
                Node num1 =new Node();
                num1.setEtiqueta("num");
                num1.setID(parser.cont);
                num1.setValor(nm1);
                parser.cont++;
                Node num2 =new Node();
                num2.setEtiqueta("num");
                num2.setID(parser.cont);
                num2.setValor(nm2);
                parser.cont++;
                Node num3 =new Node();
                num3.setEtiqueta("num");
                num3.setID(parser.cont);
                num3.setValor(nm3); */    
                node.addHijos(identificador);
                node.addHijos((Node) nm1);
                node.addHijos((Node) nm2);
                node.addHijos((Node) nm3);
                node.addHijos((Node) dg);
                RESULT = node;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("dec_for",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-18)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // dec_for ::= FOR L_PAR VARIABLE ID COLON INTEGER COMMA math_op DOWNTO math_op COMMA STEP L_PAR math_op R_PAR R_PAR L_KEY dec_general R_KEY 
            {
              Node RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-15)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-15)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-15)).value;
		int nm1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).left;
		int nm1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).right;
		Node nm1 = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-11)).value;
		int nm2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int nm2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		Node nm2 = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int nm3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int nm3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Node nm3 = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int dgleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dgright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Node dg = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                MensajesEntrada.add("Entra a dec_for 4");
                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("dec_for");
                node.setID(parser.cont);

                parser.cont++;
                Node identificador = new Node();
                identificador.setEtiqueta("ID");
                identificador.setID(parser.cont);
                identificador.setValor(id);
               /* parser.cont++;
                Node num1 =new Node();
                num1.setEtiqueta("num");
                num1.setID(parser.cont);
                num1.setValor(nm1);
                parser.cont++;
                Node num2 =new Node();
                num2.setEtiqueta("num");
                num2.setID(parser.cont);
                num2.setValor(nm2);
                parser.cont++;
                Node num3 =new Node();
                num3.setEtiqueta("num");
                num3.setID(parser.cont);
                num3.setValor(nm3);*/     
                node.addHijos(identificador);
                node.addHijos((Node) nm1);
                node.addHijos((Node) nm2);
                node.addHijos((Node) nm3);
                node.addHijos((Node) dg);
                RESULT = node;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("dec_for",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-18)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // dec_switch ::= SWITCH L_PAR ID R_PAR L_KEY list_op R_KEY 
            {
              Node RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int loleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int loright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Node lo = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                MensajesEntrada.add("Entra a dec_switch");
                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("dec_switch");
                node.setID(parser.cont);

                parser.cont++;
                Node identificador = new Node();
                identificador.setEtiqueta("ID");
                identificador.setID(parser.cont);
                identificador.setValor(id);
                node.addHijos(identificador);
                node.addHijos((Node) lo);
                RESULT = node;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("dec_switch",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // list_op ::= OPTION valor COLON dec_general new_op 
            {
              Node RESULT =null;
		int vlleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int vlright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Node vl = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int dgleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dgright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Node dg = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int nwoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nworight = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Node nwo = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                MensajesEntrada.add("Entra a list_op");
                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("list_op");
                node.setID(parser.cont);
                node.addHijos((Node) vl);
                node.addHijos((Node) dg);
                node.addHijos((Node) nwo);
                RESULT = node;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("list_op",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // new_op ::= BREAK SEMICOLON list_op 
            {
              Node RESULT =null;
		int loleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int loright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Node lo = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                MensajesEntrada.add("Entra a new_op 1");
                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("option");
                node.setID(parser.cont);
                node.addHijos((Node) lo);
                RESULT = node;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("new_op",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // new_op ::= BREAK SEMICOLON DEFAULT COLON dec_general 
            {
              Node RESULT =null;
		int dgleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dgright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Node dg = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                MensajesEntrada.add("Entra a new_op 2");
                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("default");
                node.setID(parser.cont);
                node.addHijos((Node) dg);
                RESULT = node;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("new_op",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // new_op ::= BREAK SEMICOLON 
            {
              Node RESULT =null;
		
                MensajesEntrada.add("Entra a new_op 3");
                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("new_op");
                node.setID(parser.cont);
                RESULT = node;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("new_op",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // dec_if ::= IF L_PAR condicion R_PAR L_KEY dec_general R_KEY dec_else 
            {
              Node RESULT =null;
		int condleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int condright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Node cond = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int dgleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int dgright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Node dg = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int delleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int delright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Node del = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                MensajesEntrada.add("Entra a dec_if");
                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("dec_if");
                node.setID(parser.cont);
                node.addHijos((Node) cond);
                node.addHijos((Node) dg);
                node.addHijos((Node) del);
                RESULT = node;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("dec_if",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // dec_if ::= error dec_if 
            {
              Node RESULT =null;
		
                MensajesEntrada.add("Entra a dec_general nos vamos para el error ");
                Node node = new Node();
                RESULT = node;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("dec_if",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // dec_else ::= ELIF L_PAR condicion R_PAR L_KEY dec_general R_KEY dec_else 
            {
              Node RESULT =null;
		int condleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int condright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Node cond = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int dgleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int dgright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Node dg = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int delleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int delright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Node del = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                MensajesEntrada.add("Entra a dec_else elif");
                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("dec_elif");
                node.setID(parser.cont);
                node.addHijos((Node) cond);
                node.addHijos((Node) dg);
                node.addHijos((Node) del);
                RESULT = node;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("dec_else",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // dec_else ::= ELSE L_KEY dec_general R_KEY 
            {
              Node RESULT =null;
		int dgleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dgright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Node dg = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                MensajesEntrada.add("Entra a dec_else else");
                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("dec_else");
                node.setID(parser.cont);
                node.addHijos((Node) dg);
                RESULT = node;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("dec_else",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // dec_else ::= 
            {
              Node RESULT =null;
		
                parser.cont++;
                Node nodo = new Node();
				nodo.setEtiqueta("vacio");
				nodo.setID(parser.cont);
                RESULT = nodo;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("dec_else",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // dec_llamada_funcion ::= ID L_PAR llamada_parametros R_PAR 
            {
              Node RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int llpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int llpright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Node llp = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                MensajesEntrada.add("Entra a dec_llamada_funcion");
                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("dec_llamada_funcion");
                node.setValor(id);
                node.setID(parser.cont);
                Node n_llp=(Node) llp;
                node.addHijos(n_llp);
                ArrayList<String> tipos =(ArrayList<String>)n_llp.getValue();
                Function tempo=buscaTipo2(id,false);
                String concat= "(";
                node.setLine(idright);
                node.setColummn(idleft);
                //System.out.println("veamo si me retorna el numero de parametros: "+tempo.getParametros().size());
                
                /*if(!tempo.getParametros().isEmpty()){
                    for ( Variable parametro : tempo.getParametros()){
                        concat+=parametro.getTipo()+"," ;
                    }
                }
                concat = concat.substring(0,concat.length()-1); 
                concat+=")";

                ArrayList<Variable> var =(ArrayList<Variable>) tempo.getParametros();
                boolean bandera=true;
                /*System.out.println(tipos.size()+"=="+var.size());
                if(tipos.size()==var.size() && !tempo.getId().equals("-1")){
                    for (int i = 0; i < var.size(); i++) {
                        if(!tipos.get(i).equals(var.get(i).getTipo())){
                            bandera=false;
                        }
                    }
                    if(bandera){
                        System.out.println("LLAMADA CORRECTA");
                    }else{
                        
                        System.out.println("INCOMPATIBILIDAD DE TIPOS");
                        semantic_errors("Tipo de parametro erroneo, se espera lo siguiente: "+concat,idleft,idright);
                    }
                }else{
                    System.out.println("diferente cantidad de parametros o no existe");
                    semantic_errors("Numero erroneo de parametros, se espera lo siguiente: "+concat,idleft,idright);


                }*/
                


                RESULT = node;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("dec_llamada_funcion",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // dec_llamada_funcion ::= INPUT L_PAR ID COMMA tipo R_PAR 
            {
              Node RESULT =null;
		int inleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int inright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String in = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int tipleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tipright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Node tip = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                MensajesEntrada.add("Entra a func_input");
                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("func_input");
                node.setID(parser.cont);
                parser.cont++;
                Node identificador =new Node();
                identificador.setEtiqueta("ID");
                identificador.setID(parser.cont);
                identificador.setValor(id);
                node.addHijos(identificador);
                node.addHijos((Node) tip);
                RESULT = node;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("dec_llamada_funcion",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // dec_llamada_funcion ::= OUTPUT L_PAR params_output R_PAR 
            {
              Node RESULT =null;
		int outleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int outright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String out = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int llpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int llpright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Node llp = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                MensajesEntrada.add("Entra a func_output ");
                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("func_output");
                node.setValor(out);
                node.setID(parser.cont);
                node.addHijos((Node) llp);
                RESULT = node;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("dec_llamada_funcion",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // dec_llamada_funcion ::= error R_PAR 
            {
              Node RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("dec_llamada_funcion",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // llamada_parametros ::= valor lista_valores 
            {
              Node RESULT =null;
		int vlleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int vlright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Node vl = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int lvleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lvright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Node lv = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                MensajesEntrada.add("Entra a llamada_parametros 1");
                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("llamada_parametros");
                node.setID(parser.cont);
                Node n_vl=(Node) vl;
                Node n_lv=(Node) lv;
                node.addHijos(n_vl);
                node.addHijos(n_lv);
                ArrayList<String> tipos=(ArrayList<String>) n_lv.getValue();
                tipos.add(n_vl.getValor());
                for(String tips: tipos){
                    System.out.println(tips);
                }
                node.setValue(tipos);
                RESULT = node;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("llamada_parametros",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // llamada_parametros ::= valor 
            {
              Node RESULT =null;
		int vlleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vlright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Node vl = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                MensajesEntrada.add("Entra a llamada_parametros 2");
                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("llamada_parametros");
                node.setID(parser.cont);
                Node n_vl=(Node) vl;
                node.addHijos(n_vl);
                ArrayList<String> tipos=new ArrayList();
                tipos.add(n_vl.getValor());
                for(String tips: tipos){
                    System.out.println("solo: "+tips);
                }
                node.setValue(tipos);
                RESULT = node;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("llamada_parametros",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // llamada_parametros ::= 
            {
              Node RESULT =null;
		
                MensajesEntrada.add("Entra a vacio");
                parser.cont++;
                Node nodo = new Node();
				nodo.setEtiqueta("vacio");
				nodo.setID(parser.cont);
                ArrayList<String> tipos=new ArrayList();
                nodo.setValue(tipos);
                System.out.println("no llama nada");
                RESULT = nodo;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("llamada_parametros",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // params_output ::= valor lista_valores 
            {
              Node RESULT =null;
		int vlleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int vlright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Node vl = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int lvleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lvright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Node lv = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                MensajesEntrada.add("Entra a llamada_parametros 1");
                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("params_output");
                node.setID(parser.cont);
                node.addHijos((Node) vl);
                node.addHijos((Node) lv);
                RESULT = node;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("params_output",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // params_output ::= valor 
            {
              Node RESULT =null;
		int vlleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vlright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Node vl = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                MensajesEntrada.add("Entra a llamada_parametros 2");
                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("params_output");
                node.setID(parser.cont);
                node.addHijos((Node) vl);
                RESULT = node;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("params_output",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // lista_valores ::= COMMA valor lista_valores 
            {
              Node RESULT =null;
		int vlleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int vlright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Node vl = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int lvleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lvright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Node lv = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                MensajesEntrada.add("Entra a lista_valores 1");
                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("lista_valores");
                node.setID(parser.cont);
                Node n_vl=(Node) vl;
                Node n_lv=(Node) lv;
                node.addHijos(n_vl);
                node.addHijos(n_lv);
                ArrayList<String> tipos=(ArrayList<String>) n_lv.getValue();
                tipos.add(n_vl.getValor());
                node.setValue(tipos);
                RESULT = node;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_valores",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // lista_valores ::= COMMA valor 
            {
              Node RESULT =null;
		int vlleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vlright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Node vl = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                MensajesEntrada.add("Entra a lista_valores 2");
                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("lista_valores");
                node.setID(parser.cont);
                Node n_vl=(Node) vl;
                node.addHijos(n_vl);
                ArrayList<String> tipos=new ArrayList();
                tipos.add(n_vl.getValor());
                node.setValue(tipos);
                RESULT = node;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_valores",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // lista_valores ::= error COMMA 
            {
              Node RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_valores",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // condicion ::= OPNEG L_PAR condicion2 R_PAR otra_condicion 
            {
              Node RESULT =null;
		int condleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int condright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Node cond = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int otracleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int otracright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Node otrac = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("inicio_condiciones");
                //node.setValor(vc.getValor());
                node.setID(parser.cont);
                Node n_cond=(Node) cond;
                Node n_otrac=(Node) otrac;
                node.addHijos(n_cond);
                node.addHijos(n_otrac);
                node.setValue("!("+n_cond.getValue()+")"+n_otrac.getValue());
                RESULT = node;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("condicion",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // condicion ::= condicion2 
            {
              Node RESULT =null;
		int condleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int condright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Node cond = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("inicio_condiciones");
                node.setID(parser.cont);
                Node n_cond=(Node) cond;
                node.addHijos(n_cond);
                node.setValue(n_cond.getValue());
                RESULT = node;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("condicion",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // condicion2 ::= valor_cond mas_condicion otra_condicion 
            {
              Node RESULT =null;
		int vcleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int vcright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Node vc = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int mascleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int mascright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Node masc = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int otracleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int otracright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Node otrac = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    parser.cont++;
                    Node node = new Node();
                    node.setEtiqueta("inicio_condiciones");
                    //node.setValor(vc.getValor());
                    node.setID(parser.cont);
                    Node n_vc=(Node) vc;
                    Node n_masc=(Node) masc;
                    Node n_otrac=(Node) otrac;
                    node.addHijos(n_vc);
                    node.addHijos(n_masc);
                    node.addHijos(n_otrac);
                    node.setValue(""+n_vc.getValue()+n_masc.getValue()+n_otrac.getValue());
                    RESULT = node;
                
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("condicion2",38, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // mas_condicion ::= OPREL valor_cond mas_condicion 
            {
              Node RESULT =null;
		int opreleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int opreright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String opre = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int vcleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int vcright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Node vc = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int mascleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int mascright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Node masc = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    parser.cont++;
                    Node node = new Node();
                    node.setEtiqueta("mas_condicion");
                    node.setID(parser.cont);
                    Node n_vc=(Node) vc;
                    Node n_masc=(Node) masc;
                    node.setValor(opre);
                    node.addHijos(n_vc);
                    node.addHijos(n_masc);
                    node.setValue(""+opre+n_vc.getValue()+n_masc.getValue());
                    RESULT = node;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("mas_condicion",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // mas_condicion ::= 
            {
              Node RESULT =null;
		
                    parser.cont++;
                    Node nodo = new Node();
				    nodo.setEtiqueta("vacio");
                    nodo.setValue("");
				    nodo.setID(parser.cont);
                    RESULT = nodo;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("mas_condicion",36, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // otra_condicion ::= OPLOG condicion 
            {
              Node RESULT =null;
		int oplgleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int oplgright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String oplg = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int condleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int condright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Node cond = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    parser.cont++;
                    Node node = new Node();
                    node.setEtiqueta("otra_condicion");
                    node.setID(parser.cont);
                    Node n_cond=(Node) cond;
                    node.setValor(oplg);
                    node.addHijos(n_cond);
                    node.setValue(""+oplg+n_cond.getValue());
                    //node.addHijos((Node) masc);
                    //node.addHijos((Node) otrac);
                    RESULT = node;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("otra_condicion",37, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // otra_condicion ::= 
            {
              Node RESULT =null;
		
                    parser.cont++;
                    Node nodo = new Node();
				    nodo.setEtiqueta("vacio");
                    nodo.setValue("");
				    nodo.setID(parser.cont);
                    RESULT = nodo;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("otra_condicion",37, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // otra_condicion ::= error otra_condicion 
            {
              Node RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("otra_condicion",37, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // valor_cond ::= TRUE 
            {
              Node RESULT =null;
		int truleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int truright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String tru = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                MensajesEntrada.add("Entra a valor_cond 3");
                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("valor_cond");
                node.setID(parser.cont);
                
                parser.cont++;
                Node bool_true = new Node();
                bool_true.setEtiqueta("true");
                bool_true.setID(parser.cont);
                bool_true.setValor(tru);
                node.setValue("true");
                node.setValor(bool_true.getValor());
                RESULT = node;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("valor_cond",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // valor_cond ::= FALSE 
            {
              Node RESULT =null;
		int falsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int falsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String fals = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                MensajesEntrada.add("Entra a valor_cond 4");
                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("valor");
                node.setID(parser.cont);
                
                parser.cont++;
                Node bool_false = new Node();
                bool_false.setEtiqueta("false");
                bool_false.setID(parser.cont);
                bool_false.setValor(fals);
                node.setValue("false");
                node.setValor(bool_false.getValor());
                RESULT = node;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("valor_cond",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // valor_cond ::= math_op 
            {
              Node RESULT =null;
		int mopleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int mopright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Node mop = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("valor");
                node.setID(parser.cont);
                Node n_mop=(Node) mop;
                node.setValue(n_mop.getValue());
                node.addHijos(n_mop);
                RESULT = node;
           
              CUP$parser$result = parser.getSymbolFactory().newSymbol("valor_cond",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // dec_return ::= RETURN valor 
            {
              Node RESULT =null;
		int vlleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vlright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Node vl = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                MensajesEntrada.add("Entra a dec_return 1");
                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("dec_return");
                node.setID(parser.cont);
                node.addHijos(vl);
                RESULT = node;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("dec_return",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // dec_return ::= RETURN 
            {
              Node RESULT =null;
		
                MensajesEntrada.add("Entra a dec_return 2");  
                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("dec_return");
                node.setID(parser.cont);
                RESULT = node;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("dec_return",31, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // tipo ::= BOOLEAN 
            {
              Node RESULT =null;
		
                MensajesEntrada.add("Entra a tipo 1");
                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("tipo");
                node.setID(parser.cont);
                node.setValor("bool");
                RESULT = node;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo",32, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // tipo ::= CHARACTER 
            {
              Node RESULT =null;
		
                MensajesEntrada.add("Entra a tipo 2");
                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("tipo");
                node.setID(parser.cont);
                node.setValor("chr");
                RESULT = node;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo",32, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // tipo ::= INTEGER 
            {
              Node RESULT =null;
		
                MensajesEntrada.add("Entra a tipo 3");
                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("tipo");
                node.setID(parser.cont);
                node.setValor("int");
                RESULT = node;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo",32, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // tipo ::= VOID 
            {
              Node RESULT =null;
		
                MensajesEntrada.add("Entra a tipo 4");
                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("tipo");
                node.setID(parser.cont);
                node.setValor("Void");
                RESULT = node;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo",32, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // tipo ::= STRING 
            {
              Node RESULT =null;
		  
                MensajesEntrada.add("Entra a tipo 5");
                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("tipo");
                node.setID(parser.cont);
                node.setValor("string");
                RESULT = node;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo",32, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // tipo ::= FLOAT 
            {
              Node RESULT =null;
		  
                MensajesEntrada.add("Entra a tipo 5");
                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("tipo");
                node.setID(parser.cont);
                node.setValor("FLOAT");
                RESULT = node;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo",32, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
