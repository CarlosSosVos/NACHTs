
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package nachts;

import java_cup.runtime.*;
import java.util.ArrayList;
import java.util.LinkedList;
import java.util.List;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return Sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\170\000\002\002\004\000\002\002\004\000\002\003" +
    "\004\000\002\003\002\000\002\004\014\000\002\004\014" +
    "\000\002\005\007\000\002\005\006\000\002\005\011\000" +
    "\002\005\010\000\002\005\013\000\002\005\012\000\002" +
    "\005\002\000\002\006\010\000\002\006\007\000\002\006" +
    "\012\000\002\006\011\000\002\006\014\000\002\006\013" +
    "\000\002\010\004\000\002\010\004\000\002\010\004\000" +
    "\002\010\004\000\002\010\004\000\002\010\005\000\002" +
    "\010\004\000\002\010\005\000\002\010\003\000\002\010" +
    "\004\000\002\010\002\000\002\011\007\000\002\011\012" +
    "\000\002\011\015\000\002\012\004\000\002\012\010\000" +
    "\002\012\013\000\002\012\016\000\002\013\004\000\002" +
    "\013\004\000\002\013\004\000\002\013\004\000\002\013" +
    "\004\000\002\013\004\000\002\013\004\000\002\013\004" +
    "\000\002\013\002\000\002\044\006\000\002\044\004\000" +
    "\002\045\005\000\002\045\002\000\002\043\006\000\002" +
    "\014\005\000\002\014\002\000\002\015\006\000\002\015" +
    "\013\000\002\015\006\000\002\015\006\000\002\015\005" +
    "\000\002\015\015\000\002\016\003\000\002\016\003\000" +
    "\002\016\003\000\002\016\003\000\002\016\003\000\002" +
    "\016\003\000\002\017\004\000\002\020\005\000\002\020" +
    "\002\000\002\021\004\000\002\022\005\000\002\022\002" +
    "\000\002\023\003\000\002\023\010\000\002\023\012\000" +
    "\002\023\003\000\002\023\003\000\002\023\005\000\002" +
    "\024\011\000\002\025\022\000\002\025\022\000\002\025" +
    "\025\000\002\025\025\000\002\026\011\000\002\027\007" +
    "\000\002\030\005\000\002\030\007\000\002\030\004\000" +
    "\002\031\012\000\002\032\012\000\002\032\006\000\002" +
    "\032\002\000\002\033\006\000\002\033\010\000\002\033" +
    "\006\000\002\033\004\000\002\034\004\000\002\034\003" +
    "\000\002\034\002\000\002\007\004\000\002\007\003\000" +
    "\002\035\005\000\002\035\004\000\002\035\004\000\002" +
    "\037\005\000\002\047\005\000\002\047\002\000\002\050" +
    "\006\000\002\050\002\000\002\040\003\000\002\040\003" +
    "\000\002\040\003\000\002\041\004\000\002\041\003\000" +
    "\002\042\003\000\002\042\003\000\002\042\003\000\002" +
    "\042\003\000\002\042\003\000\002\042\003\000\002\046" +
    "\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0152\000\004\004\005\001\002\000\006\002\ufffe\004" +
    "\005\001\002\000\004\043\010\001\002\000\004\002\007" +
    "\001\002\000\004\002\001\001\002\000\004\062\011\001" +
    "\002\000\006\011\013\063\ufff5\001\002\000\004\063\060" +
    "\001\002\000\004\043\014\001\002\000\006\060\015\066" +
    "\016\001\002\000\004\061\047\001\002\000\016\012\020" +
    "\014\025\020\017\021\022\022\023\030\024\001\002\000" +
    "\014\053\uff8e\056\uff8e\063\uff8e\064\uff8e\065\uff8e\001\002" +
    "\000\014\053\uff8c\056\uff8c\063\uff8c\064\uff8c\065\uff8c\001" +
    "\002\000\006\063\ufffa\064\026\001\002\000\014\053\uff8f" +
    "\056\uff8f\063\uff8f\064\uff8f\065\uff8f\001\002\000\014\053" +
    "\uff90\056\uff90\063\uff90\064\uff90\065\uff90\001\002\000\014" +
    "\053\uff8d\056\uff8d\063\uff8d\064\uff8d\065\uff8d\001\002\000" +
    "\014\053\uff8b\056\uff8b\063\uff8b\064\uff8b\065\uff8b\001\002" +
    "\000\004\011\030\001\002\000\004\063\ufffb\001\002\000" +
    "\004\043\031\001\002\000\006\060\032\066\033\001\002" +
    "\000\004\061\036\001\002\000\016\012\020\014\025\020" +
    "\017\021\022\022\023\030\024\001\002\000\006\063\ufff3" +
    "\064\026\001\002\000\004\063\ufff4\001\002\000\006\060" +
    "\037\066\040\001\002\000\004\061\043\001\002\000\016" +
    "\012\020\014\025\020\017\021\022\022\023\030\024\001" +
    "\002\000\006\063\ufff1\064\026\001\002\000\004\063\ufff2" +
    "\001\002\000\004\066\044\001\002\000\016\012\020\014" +
    "\025\020\017\021\022\022\023\030\024\001\002\000\006" +
    "\063\uffef\064\026\001\002\000\004\063\ufff0\001\002\000" +
    "\006\060\050\066\051\001\002\000\004\061\054\001\002" +
    "\000\016\012\020\014\025\020\017\021\022\022\023\030" +
    "\024\001\002\000\006\063\ufff8\064\026\001\002\000\004" +
    "\063\ufff9\001\002\000\004\066\055\001\002\000\016\012" +
    "\020\014\025\020\017\021\022\022\023\030\024\001\002" +
    "\000\006\063\ufff6\064\026\001\002\000\004\063\ufff7\001" +
    "\002\000\004\066\061\001\002\000\020\012\020\014\025" +
    "\020\017\021\022\022\023\030\024\071\063\001\002\000" +
    "\004\056\u014f\001\002\000\004\056\064\001\002\000\030" +
    "\003\104\011\074\023\075\025\070\026\106\027\071\035" +
    "\066\036\107\037\073\043\077\057\uffe4\001\002\000\004" +
    "\065\u014d\001\002\000\004\062\u0148\001\002\000\032\003" +
    "\104\011\074\023\075\025\070\026\106\027\071\033\uffe4" +
    "\035\066\036\107\037\073\043\077\057\uffe4\001\002\000" +
    "\004\062\u0141\001\002\000\032\003\122\005\111\015\113" +
    "\016\125\017\116\031\115\032\120\035\066\036\107\043" +
    "\121\062\126\065\uff91\001\002\000\032\003\104\011\074" +
    "\023\075\025\070\026\106\027\071\033\uffe4\035\066\036" +
    "\107\037\073\043\077\057\uffe4\001\002\000\004\062\u012e" +
    "\001\002\000\004\043\357\001\002\000\004\062\317\001" +
    "\002\000\032\003\104\011\074\023\075\025\070\026\106" +
    "\027\071\033\uffe4\035\066\036\107\037\073\043\077\057" +
    "\uffe4\001\002\000\016\052\270\053\265\054\267\055\266" +
    "\062\140\070\271\001\002\000\032\003\104\011\074\023" +
    "\075\025\070\026\106\027\071\033\uffe4\035\066\036\107" +
    "\037\073\043\077\057\uffe4\001\002\000\004\065\262\001" +
    "\002\000\004\057\261\001\002\000\032\003\104\011\074" +
    "\023\075\025\070\026\106\027\071\033\uffe4\035\066\036" +
    "\107\037\073\043\077\057\uffe4\001\002\000\012\033\uffe6" +
    "\057\uffe6\063\137\065\257\001\002\000\032\003\104\011" +
    "\074\023\075\025\070\026\106\027\071\033\uffe4\035\066" +
    "\036\107\037\073\043\077\057\uffe4\001\002\000\004\062" +
    "\170\001\002\000\004\062\110\001\002\000\030\003\122" +
    "\005\111\015\113\016\125\017\116\031\115\032\120\035" +
    "\066\036\107\043\121\062\126\001\002\000\036\003\uffb7" +
    "\006\uffb7\007\uffb7\044\uffb7\046\uffb7\050\uffb7\051\uffb7\053" +
    "\uffb7\057\uffb7\061\uffb7\063\uffb7\064\uffb7\065\uffb7\066\uffb7" +
    "\001\002\000\036\003\uffb6\006\uffb6\007\uffb6\044\uffb6\046" +
    "\uffb6\050\uffb6\051\uffb6\053\uffb6\057\uffb6\061\uffb6\063\uffb6" +
    "\064\uffb6\065\uffb6\066\uffb6\001\002\000\016\003\uffc2\057" +
    "\uffc2\063\uffc2\064\uffc2\065\uffc2\066\uffc2\001\002\000\036" +
    "\003\uffbb\006\uffbb\007\uffbb\044\uffbb\046\uffbb\050\165\051" +
    "\uffbb\053\uffbb\057\uffbb\061\uffbb\063\uffbb\064\uffbb\065\uffbb" +
    "\066\uffbb\001\002\000\016\003\uffc4\057\uffc4\063\uffc4\064" +
    "\uffc4\065\uffc4\066\uffc4\001\002\000\016\003\uffc5\057\uffc5" +
    "\063\uffc5\064\uffc5\065\uffc5\066\uffc5\001\002\000\010\003" +
    "\157\063\uff9e\064\155\001\002\000\016\003\uffc3\057\uffc3" +
    "\063\uffc3\064\uffc3\065\uffc3\066\uffc3\001\002\000\042\003" +
    "\uffba\006\uffba\007\uffba\044\uffba\046\uffba\050\uffba\051\uffba" +
    "\053\uffba\057\uffba\061\uffba\062\140\063\uffba\064\uffba\065" +
    "\uffba\066\uffba\070\141\001\002\000\004\063\137\001\002" +
    "\000\004\063\136\001\002\000\034\003\uffbe\006\uffbe\007" +
    "\uffbe\044\uffbe\046\uffbe\051\133\053\uffbe\057\uffbe\061\uffbe" +
    "\063\uffbe\064\uffbe\065\uffbe\066\uffbe\001\002\000\016\003" +
    "\uffc6\057\uffc6\063\uffc6\064\uffc6\065\uffc6\066\uffc6\001\002" +
    "\000\016\003\122\005\111\035\066\036\107\043\121\062" +
    "\126\001\002\000\016\003\uffc1\057\uffc1\063\uffc1\064\uffc1" +
    "\065\uffc1\066\uffc1\001\002\000\004\063\131\001\002\000" +
    "\036\003\uffb5\006\uffb5\007\uffb5\044\uffb5\046\uffb5\050\uffb5" +
    "\051\uffb5\053\uffb5\057\uffb5\061\uffb5\063\uffb5\064\uffb5\065" +
    "\uffb5\066\uffb5\001\002\000\032\003\uffc0\006\uffc0\007\uffc0" +
    "\044\uffc0\046\uffc0\053\uffc0\057\uffc0\061\uffc0\063\uffc0\064" +
    "\uffc0\065\uffc0\066\uffc0\001\002\000\016\003\122\005\111" +
    "\035\066\036\107\043\121\062\126\001\002\000\034\003" +
    "\uffbe\006\uffbe\007\uffbe\044\uffbe\046\uffbe\051\133\053\uffbe" +
    "\057\uffbe\061\uffbe\063\uffbe\064\uffbe\065\uffbe\066\uffbe\001" +
    "\002\000\032\003\uffbf\006\uffbf\007\uffbf\044\uffbf\046\uffbf" +
    "\053\uffbf\057\uffbf\061\uffbf\063\uffbf\064\uffbf\065\uffbf\066" +
    "\uffbf\001\002\000\036\003\uffa4\006\uffa4\007\uffa4\044\uffa4" +
    "\046\uffa4\050\uffa4\051\uffa4\053\uffa4\057\uffa4\061\uffa4\063" +
    "\uffa4\064\uffa4\065\uffa4\066\uffa4\001\002\000\036\003\uffa3" +
    "\006\uffa3\007\uffa3\044\uffa3\046\uffa3\050\uffa3\051\uffa3\053" +
    "\uffa3\057\uffa3\061\uffa3\063\uffa3\064\uffa3\065\uffa3\066\uffa3" +
    "\001\002\000\032\003\122\005\111\015\113\016\125\017" +
    "\116\031\115\032\120\035\066\036\107\043\121\062\126" +
    "\063\uffa0\001\002\000\004\067\142\001\002\000\004\062" +
    "\143\001\002\000\016\003\122\005\111\035\066\036\107" +
    "\043\121\062\126\001\002\000\006\063\147\064\146\001" +
    "\002\000\014\006\uff8a\007\uff8a\061\uff8a\063\uff8a\064\uff8a" +
    "\001\002\000\016\003\122\005\111\035\066\036\107\043" +
    "\121\062\126\001\002\000\036\003\uffb9\006\uffb9\007\uffb9" +
    "\044\uffb9\046\uffb9\050\uffb9\051\uffb9\053\uffb9\057\uffb9\061" +
    "\uffb9\063\uffb9\064\uffb9\065\uffb9\066\uffb9\001\002\000\004" +
    "\063\151\001\002\000\036\003\uffb8\006\uffb8\007\uffb8\044" +
    "\uffb8\046\uffb8\050\uffb8\051\uffb8\053\uffb8\057\uffb8\061\uffb8" +
    "\063\uffb8\064\uffb8\065\uffb8\066\uffb8\001\002\000\010\003" +
    "\157\063\uffa1\064\155\001\002\000\004\063\154\001\002" +
    "\000\036\003\uffa6\006\uffa6\007\uffa6\044\uffa6\046\uffa6\050" +
    "\uffa6\051\uffa6\053\uffa6\057\uffa6\061\uffa6\063\uffa6\064\uffa6" +
    "\065\uffa6\066\uffa6\001\002\000\030\003\122\005\111\015" +
    "\113\016\125\017\116\031\115\032\120\035\066\036\107" +
    "\043\121\062\126\001\002\000\004\063\uffa2\001\002\000" +
    "\004\064\160\001\002\000\004\063\uff9b\001\002\000\010" +
    "\003\157\063\uff9c\064\155\001\002\000\004\063\uff9d\001" +
    "\002\000\004\063\uff9f\001\002\000\034\003\uffbd\006\uffbd" +
    "\007\uffbd\044\uffbd\046\uffbd\051\uffbd\053\uffbd\057\uffbd\061" +
    "\uffbd\063\uffbd\064\uffbd\065\uffbd\066\uffbd\001\002\000\016" +
    "\003\122\005\111\035\066\036\107\043\121\062\126\001" +
    "\002\000\036\003\uffbb\006\uffbb\007\uffbb\044\uffbb\046\uffbb" +
    "\050\165\051\uffbb\053\uffbb\057\uffbb\061\uffbb\063\uffbb\064" +
    "\uffbb\065\uffbb\066\uffbb\001\002\000\034\003\uffbc\006\uffbc" +
    "\007\uffbc\044\uffbc\046\uffbc\051\uffbc\053\uffbc\057\uffbc\061" +
    "\uffbc\063\uffbc\064\uffbc\065\uffbc\066\uffbc\001\002\000\006" +
    "\011\172\043\171\001\002\000\004\064\226\001\002\000" +
    "\004\043\173\001\002\000\004\066\174\001\002\000\004" +
    "\020\175\001\002\000\004\064\176\001\002\000\016\003" +
    "\122\005\111\035\066\036\107\043\121\062\126\001\002" +
    "\000\006\006\200\007\201\001\002\000\016\003\122\005" +
    "\111\035\066\036\107\043\121\062\126\001\002\000\016" +
    "\003\122\005\111\035\066\036\107\043\121\062\126\001" +
    "\002\000\004\064\203\001\002\000\004\010\204\001\002" +
    "\000\004\062\205\001\002\000\016\003\122\005\111\035" +
    "\066\036\107\043\121\062\126\001\002\000\004\063\207" +
    "\001\002\000\004\063\210\001\002\000\004\056\211\001" +
    "\002\000\030\003\104\011\074\023\075\025\070\026\106" +
    "\027\071\035\066\036\107\037\073\043\077\057\uffe4\001" +
    "\002\000\004\057\213\001\002\000\032\003\uffb0\011\uffb0" +
    "\023\uffb0\025\uffb0\026\uffb0\027\uffb0\033\uffb0\035\uffb0\036" +
    "\uffb0\037\uffb0\043\uffb0\057\uffb0\001\002\000\004\064\215" +
    "\001\002\000\004\010\216\001\002\000\004\062\217\001" +
    "\002\000\016\003\122\005\111\035\066\036\107\043\121" +
    "\062\126\001\002\000\004\063\221\001\002\000\004\063" +
    "\222\001\002\000\004\056\223\001\002\000\030\003\104" +
    "\011\074\023\075\025\070\026\106\027\071\035\066\036" +
    "\107\037\073\043\077\057\uffe4\001\002\000\004\057\225" +
    "\001\002\000\032\003\uffb1\011\uffb1\023\uffb1\025\uffb1\026" +
    "\uffb1\027\uffb1\033\uffb1\035\uffb1\036\uffb1\037\uffb1\043\uffb1" +
    "\057\uffb1\001\002\000\016\003\122\005\111\035\066\036" +
    "\107\043\121\062\126\001\002\000\006\006\230\007\231" +
    "\001\002\000\016\003\122\005\111\035\066\036\107\043" +
    "\121\062\126\001\002\000\016\003\122\005\111\035\066" +
    "\036\107\043\121\062\126\001\002\000\004\064\233\001" +
    "\002\000\004\010\234\001\002\000\004\062\235\001\002" +
    "\000\016\003\122\005\111\035\066\036\107\043\121\062" +
    "\126\001\002\000\004\063\237\001\002\000\004\063\240" +
    "\001\002\000\004\056\241\001\002\000\030\003\104\011" +
    "\074\023\075\025\070\026\106\027\071\035\066\036\107" +
    "\037\073\043\077\057\uffe4\001\002\000\004\057\243\001" +
    "\002\000\032\003\uffb2\011\uffb2\023\uffb2\025\uffb2\026\uffb2" +
    "\027\uffb2\033\uffb2\035\uffb2\036\uffb2\037\uffb2\043\uffb2\057" +
    "\uffb2\001\002\000\004\064\245\001\002\000\004\010\246" +
    "\001\002\000\004\062\247\001\002\000\016\003\122\005" +
    "\111\035\066\036\107\043\121\062\126\001\002\000\004" +
    "\063\251\001\002\000\004\063\252\001\002\000\004\056" +
    "\253\001\002\000\030\003\104\011\074\023\075\025\070" +
    "\026\106\027\071\035\066\036\107\037\073\043\077\057" +
    "\uffe4\001\002\000\004\057\255\001\002\000\032\003\uffb3" +
    "\011\uffb3\023\uffb3\025\uffb3\026\uffb3\027\uffb3\033\uffb3\035" +
    "\uffb3\036\uffb3\037\uffb3\043\uffb3\057\uffb3\001\002\000\006" +
    "\033\uffe8\057\uffe8\001\002\000\006\033\uffe5\057\uffe5\001" +
    "\002\000\006\033\uffeb\057\uffeb\001\002\000\006\002\ufffc" +
    "\004\ufffc\001\002\000\032\003\104\011\074\023\075\025" +
    "\070\026\106\027\071\033\uffe4\035\066\036\107\037\073" +
    "\043\077\057\uffe4\001\002\000\006\033\uffe7\057\uffe7\001" +
    "\002\000\006\033\uffec\057\uffec\001\002\000\030\003\122" +
    "\005\111\015\113\016\125\017\116\031\115\032\120\035" +
    "\066\036\107\043\121\062\126\001\002\000\004\005\312" +
    "\001\002\000\030\003\122\005\111\015\113\016\125\017" +
    "\116\031\115\032\120\035\066\036\107\043\121\062\126" +
    "\001\002\000\004\065\307\001\002\000\004\067\272\001" +
    "\002\000\004\062\273\001\002\000\016\003\122\005\111" +
    "\035\066\036\107\043\121\062\126\001\002\000\006\063" +
    "\275\064\276\001\002\000\004\053\304\001\002\000\016" +
    "\003\122\005\111\035\066\036\107\043\121\062\126\001" +
    "\002\000\004\063\300\001\002\000\004\053\301\001\002" +
    "\000\030\003\122\005\111\015\113\016\125\017\116\031" +
    "\115\032\120\035\066\036\107\043\121\062\126\001\002" +
    "\000\004\065\303\001\002\000\032\003\uffc7\011\uffc7\023" +
    "\uffc7\025\uffc7\026\uffc7\027\uffc7\033\uffc7\035\uffc7\036\uffc7" +
    "\037\uffc7\043\uffc7\057\uffc7\001\002\000\030\003\122\005" +
    "\111\015\113\016\125\017\116\031\115\032\120\035\066" +
    "\036\107\043\121\062\126\001\002\000\004\065\306\001" +
    "\002\000\032\003\uffcb\011\uffcb\023\uffcb\025\uffcb\026\uffcb" +
    "\027\uffcb\033\uffcb\035\uffcb\036\uffcb\037\uffcb\043\uffcb\057" +
    "\uffcb\001\002\000\032\003\uffc8\011\uffc8\023\uffc8\025\uffc8" +
    "\026\uffc8\027\uffc8\033\uffc8\035\uffc8\036\uffc8\037\uffc8\043" +
    "\uffc8\057\uffc8\001\002\000\004\065\311\001\002\000\032" +
    "\003\uffca\011\uffca\023\uffca\025\uffca\026\uffca\027\uffca\033" +
    "\uffca\035\uffca\036\uffca\037\uffca\043\uffca\057\uffca\001\002" +
    "\000\004\065\313\001\002\000\032\003\uffc9\011\uffc9\023" +
    "\uffc9\025\uffc9\026\uffc9\027\uffc9\033\uffc9\035\uffc9\036\uffc9" +
    "\037\uffc9\043\uffc9\057\uffc9\001\002\000\004\065\315\001" +
    "\002\000\032\003\uffcc\011\uffcc\023\uffcc\025\uffcc\026\uffcc" +
    "\027\uffcc\033\uffcc\035\uffcc\036\uffcc\037\uffcc\043\uffcc\057" +
    "\uffcc\001\002\000\006\033\uffea\057\uffea\001\002\000\022" +
    "\003\122\005\111\031\320\032\321\035\066\036\107\043" +
    "\121\062\126\001\002\000\010\044\uff95\046\uff95\063\uff95" +
    "\001\002\000\010\044\uff94\046\uff94\063\uff94\001\002\000" +
    "\010\044\346\046\uff98\063\uff98\001\002\000\004\063\325" +
    "\001\002\000\010\044\uff93\046\uff93\063\uff93\001\002\000" +
    "\004\056\326\001\002\000\030\003\104\011\074\023\075" +
    "\025\070\026\106\027\071\035\066\036\107\037\073\043" +
    "\077\057\uffe4\001\002\000\004\057\330\001\002\000\036" +
    "\003\uffa7\011\uffa7\013\332\023\uffa7\024\331\025\uffa7\026" +
    "\uffa7\027\uffa7\033\uffa7\035\uffa7\036\uffa7\037\uffa7\043\uffa7" +
    "\057\uffa7\001\002\000\004\056\343\001\002\000\004\062" +
    "\334\001\002\000\032\003\uffaa\011\uffaa\023\uffaa\025\uffaa" +
    "\026\uffaa\027\uffaa\033\uffaa\035\uffaa\036\uffaa\037\uffaa\043" +
    "\uffaa\057\uffaa\001\002\000\022\003\122\005\111\031\320" +
    "\032\321\035\066\036\107\043\121\062\126\001\002\000" +
    "\004\063\336\001\002\000\004\056\337\001\002\000\030" +
    "\003\104\011\074\023\075\025\070\026\106\027\071\035" +
    "\066\036\107\037\073\043\077\057\uffe4\001\002\000\004" +
    "\057\341\001\002\000\036\003\uffa7\011\uffa7\013\332\023" +
    "\uffa7\024\331\025\uffa7\026\uffa7\027\uffa7\033\uffa7\035\uffa7" +
    "\036\uffa7\037\uffa7\043\uffa7\057\uffa7\001\002\000\032\003" +
    "\uffa9\011\uffa9\023\uffa9\025\uffa9\026\uffa9\027\uffa9\033\uffa9" +
    "\035\uffa9\036\uffa9\037\uffa9\043\uffa9\057\uffa9\001\002\000" +
    "\030\003\104\011\074\023\075\025\070\026\106\027\071" +
    "\035\066\036\107\037\073\043\077\057\uffe4\001\002\000" +
    "\004\057\345\001\002\000\032\003\uffa8\011\uffa8\023\uffa8" +
    "\025\uffa8\026\uffa8\027\uffa8\033\uffa8\035\uffa8\036\uffa8\037" +
    "\uffa8\043\uffa8\057\uffa8\001\002\000\022\003\122\005\111" +
    "\031\320\032\321\035\066\036\107\043\121\062\126\001" +
    "\002\000\006\046\350\063\uff96\001\002\000\022\003\122" +
    "\005\111\031\320\032\321\035\066\036\107\043\121\062" +
    "\126\001\002\000\004\063\uff9a\001\002\000\010\044\346" +
    "\046\uff98\063\uff98\001\002\000\006\046\350\063\uff96\001" +
    "\002\000\004\063\uff97\001\002\000\010\044\346\046\uff98" +
    "\063\uff98\001\002\000\006\046\uff99\063\uff99\001\002\000" +
    "\006\060\360\066\361\001\002\000\016\003\122\005\111" +
    "\035\066\036\107\043\121\062\126\001\002\000\016\012" +
    "\020\014\025\020\017\021\022\022\023\030\024\001\002" +
    "\000\010\053\365\064\364\065\uffd4\001\002\000\032\003" +
    "\uffe3\011\uffe3\023\uffe3\025\uffe3\026\uffe3\027\uffe3\033\uffe3" +
    "\035\uffe3\036\uffe3\037\uffe3\043\uffe3\057\uffe3\001\002\000" +
    "\004\043\u0110\001\002\000\032\003\377\005\111\015\u0100" +
    "\016\370\017\376\031\373\032\375\035\066\036\107\043" +
    "\121\056\371\062\126\001\002\000\004\065\367\001\002" +
    "\000\032\003\uffe0\011\uffe0\023\uffe0\025\uffe0\026\uffe0\027" +
    "\uffe0\033\uffe0\035\uffe0\036\uffe0\037\uffe0\043\uffe0\057\uffe0" +
    "\001\002\000\010\053\uffdb\064\uffdb\065\uffdb\001\002\000" +
    "\032\003\122\005\111\015\113\016\125\017\116\031\115" +
    "\032\120\035\066\036\107\043\121\056\u0103\062\126\001" +
    "\002\000\010\053\uffd5\064\uffd5\065\uffd5\001\002\000\010" +
    "\053\uffd9\064\uffd9\065\uffd9\001\002\000\010\053\uffd7\064" +
    "\uffd7\065\uffd7\001\002\000\010\053\uffd8\064\uffd8\065\uffd8" +
    "\001\002\000\010\053\uffda\064\uffda\065\uffda\001\002\000" +
    "\006\057\u0102\063\137\001\002\000\010\053\uffdc\064\uffdc" +
    "\065\uffdc\001\002\000\010\053\uffd6\064\uffd6\065\uffd6\001" +
    "\002\000\010\053\uffd2\064\uffd2\065\uffd2\001\002\000\030" +
    "\003\122\005\111\015\113\016\125\017\116\031\115\032" +
    "\120\035\066\036\107\043\121\062\126\001\002\000\006" +
    "\057\uffcd\064\u010b\001\002\000\006\057\uffd0\064\u0106\001" +
    "\002\000\004\056\u0103\001\002\000\004\057\u0108\001\002" +
    "\000\010\053\uffd3\064\uffd3\065\uffd3\001\002\000\006\057" +
    "\uffd0\064\u0106\001\002\000\004\057\uffd1\001\002\000\030" +
    "\003\122\005\111\015\113\016\125\017\116\031\115\032" +
    "\120\035\066\036\107\043\121\062\126\001\002\000\004" +
    "\057\u010d\001\002\000\012\053\uffcf\057\uffcf\064\uffcf\065" +
    "\uffcf\001\002\000\006\057\uffcd\064\u010b\001\002\000\004" +
    "\057\uffce\001\002\000\006\060\u0111\066\u0112\001\002\000" +
    "\016\003\122\005\111\035\066\036\107\043\121\062\126" +
    "\001\002\000\016\012\020\014\025\020\017\021\022\022" +
    "\023\030\024\001\002\000\010\053\365\064\uffd4\065\uffd4" +
    "\001\002\000\010\053\365\064\364\065\uffd4\001\002\000" +
    "\032\003\uffdf\011\uffdf\023\uffdf\025\uffdf\026\uffdf\027\uffdf" +
    "\033\uffdf\035\uffdf\036\uffdf\037\uffdf\043\uffdf\057\uffdf\001" +
    "\002\000\004\061\u0117\001\002\000\006\060\u0118\066\u0119" +
    "\001\002\000\016\003\122\005\111\035\066\036\107\043" +
    "\121\062\126\001\002\000\016\012\020\014\025\020\017" +
    "\021\022\022\023\030\024\001\002\000\010\053\365\064" +
    "\uffd4\065\uffd4\001\002\000\010\053\365\064\364\065\uffd4" +
    "\001\002\000\032\003\uffde\011\uffde\023\uffde\025\uffde\026" +
    "\uffde\027\uffde\033\uffde\035\uffde\036\uffde\037\uffde\043\uffde" +
    "\057\uffde\001\002\000\004\061\u011e\001\002\000\004\066" +
    "\u011f\001\002\000\016\012\020\014\025\020\017\021\022" +
    "\022\023\030\024\001\002\000\010\053\365\064\uffd4\065" +
    "\uffd4\001\002\000\010\053\365\064\364\065\uffd4\001\002" +
    "\000\032\003\uffdd\011\uffdd\023\uffdd\025\uffdd\026\uffdd\027" +
    "\uffdd\033\uffdd\035\uffdd\036\uffdd\037\uffdd\043\uffdd\057\uffdd" +
    "\001\002\000\004\061\u0124\001\002\000\006\060\u0125\066" +
    "\u0126\001\002\000\016\003\122\005\111\035\066\036\107" +
    "\043\121\062\126\001\002\000\016\012\020\014\025\020" +
    "\017\021\022\022\023\030\024\001\002\000\010\053\365" +
    "\064\364\065\uffd4\001\002\000\032\003\uffe2\011\uffe2\023" +
    "\uffe2\025\uffe2\026\uffe2\027\uffe2\033\uffe2\035\uffe2\036\uffe2" +
    "\037\uffe2\043\uffe2\057\uffe2\001\002\000\004\061\u012a\001" +
    "\002\000\004\066\u012b\001\002\000\016\012\020\014\025" +
    "\020\017\021\022\022\023\030\024\001\002\000\010\053" +
    "\365\064\364\065\uffd4\001\002\000\032\003\uffe1\011\uffe1" +
    "\023\uffe1\025\uffe1\026\uffe1\027\uffe1\033\uffe1\035\uffe1\036" +
    "\uffe1\037\uffe1\043\uffe1\057\uffe1\001\002\000\004\043\u012f" +
    "\001\002\000\004\063\u0130\001\002\000\004\056\u0131\001" +
    "\002\000\004\041\u0132\001\002\000\030\003\122\005\111" +
    "\015\113\016\125\017\116\031\115\032\120\035\066\036" +
    "\107\043\121\062\126\001\002\000\004\057\u0134\001\002" +
    "\000\032\003\uffaf\011\uffaf\023\uffaf\025\uffaf\026\uffaf\027" +
    "\uffaf\033\uffaf\035\uffaf\036\uffaf\037\uffaf\043\uffaf\057\uffaf" +
    "\001\002\000\004\066\u0136\001\002\000\030\003\104\011" +
    "\074\023\075\025\070\026\106\027\071\033\uffe4\035\066" +
    "\036\107\037\073\043\077\001\002\000\004\033\u0139\001" +
    "\002\000\004\057\uffae\001\002\000\004\065\u013a\001\002" +
    "\000\010\041\u0132\042\u013b\057\uffab\001\002\000\004\066" +
    "\u013d\001\002\000\004\057\uffad\001\002\000\030\003\104" +
    "\011\074\023\075\025\070\026\106\027\071\035\066\036" +
    "\107\037\073\043\077\057\uffe4\001\002\000\004\057\uffac" +
    "\001\002\000\006\033\uffed\057\uffed\001\002\000\004\065" +
    "\uff92\001\002\000\022\003\122\005\111\031\320\032\321" +
    "\035\066\036\107\043\121\062\126\001\002\000\004\063" +
    "\u0143\001\002\000\004\056\u0144\001\002\000\030\003\104" +
    "\011\074\023\075\025\070\026\106\027\071\035\066\036" +
    "\107\037\073\043\077\057\uffe4\001\002\000\004\057\u0146" +
    "\001\002\000\032\003\uffb4\011\uffb4\023\uffb4\025\uffb4\026" +
    "\uffb4\027\uffb4\033\uffb4\035\uffb4\036\uffb4\037\uffb4\043\uffb4" +
    "\057\uffb4\001\002\000\006\033\uffee\057\uffee\001\002\000" +
    "\004\043\u0149\001\002\000\004\064\u014a\001\002\000\016" +
    "\012\020\014\025\020\017\021\022\022\023\030\024\001" +
    "\002\000\004\063\u014c\001\002\000\036\003\uffa5\006\uffa5" +
    "\007\uffa5\044\uffa5\046\uffa5\050\uffa5\051\uffa5\053\uffa5\057" +
    "\uffa5\061\uffa5\063\uffa5\064\uffa5\065\uffa5\066\uffa5\001\002" +
    "\000\032\003\104\011\074\023\075\025\070\026\106\027" +
    "\071\033\uffe4\035\066\036\107\037\073\043\077\057\uffe4" +
    "\001\002\000\006\033\uffe9\057\uffe9\001\002\000\030\003" +
    "\104\011\074\023\075\025\070\026\106\027\071\035\066" +
    "\036\107\037\073\043\077\057\uffe4\001\002\000\004\057" +
    "\u0151\001\002\000\006\002\ufffd\004\ufffd\001\002\000\006" +
    "\002\ufffe\004\005\001\002\000\004\002\000\001\002\000" +
    "\004\002\uffff\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0152\000\006\002\005\004\003\001\001\000\006\003" +
    "\u0152\004\u0151\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\005\011\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\042\020\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\006\026\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\042\033\001" +
    "\001\000\004\006\034\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\042\040\001\001\000" +
    "\004\006\041\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\042\044\001\001\000\004\006\045\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\042\051\001\001\000\004\006\052\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\042\055\001\001\000\004" +
    "\006\056\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\042\061\001\001\000\002\001\001\000\002\001\001" +
    "\000\024\010\101\011\066\015\104\024\071\025\077\026" +
    "\102\031\075\033\064\041\100\001\001\000\002\001\001" +
    "\000\002\001\001\000\024\010\u0146\011\066\015\104\024" +
    "\071\025\077\026\102\031\075\033\064\041\100\001\001" +
    "\000\002\001\001\000\014\016\u013f\017\126\021\123\023" +
    "\113\033\111\001\001\000\024\010\u013e\011\066\015\104" +
    "\024\071\025\077\026\102\031\075\033\064\041\100\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\024\010\315\011\066\015\104\024\071\025\077\026" +
    "\102\031\075\033\064\041\100\001\001\000\002\001\001" +
    "\000\024\010\263\011\066\015\104\024\071\025\077\026" +
    "\102\031\075\033\064\041\100\001\001\000\002\001\001" +
    "\000\002\001\001\000\024\010\257\011\066\015\104\024" +
    "\071\025\077\026\102\031\075\033\064\041\100\001\001" +
    "\000\002\001\001\000\024\010\255\011\066\015\104\024" +
    "\071\025\077\026\102\031\075\033\064\041\100\001\001" +
    "\000\002\001\001\000\002\001\001\000\016\007\122\016" +
    "\116\017\126\021\123\023\113\033\111\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\022" +
    "\163\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\035\162\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\020\131\001\001" +
    "\000\002\001\001\000\012\017\127\021\123\023\113\033" +
    "\111\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\021\133\023\113\033" +
    "\111\001\001\000\004\020\134\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\016\016\151\017" +
    "\126\021\123\023\113\033\111\034\152\001\001\000\002" +
    "\001\001\000\002\001\001\000\014\017\144\021\123\023" +
    "\113\033\111\046\143\001\001\000\002\001\001\000\002" +
    "\001\001\000\014\017\144\021\123\023\113\033\111\046" +
    "\147\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\035\155\001\001\000\002\001\001\000" +
    "\002\001\001\000\014\016\160\017\126\021\123\023\113" +
    "\033\111\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\035\161\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\023\165\033" +
    "\111\001\001\000\004\022\166\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\014" +
    "\017\144\021\123\023\113\033\111\046\176\001\001\000" +
    "\002\001\001\000\014\017\144\021\123\023\113\033\111" +
    "\046\213\001\001\000\014\017\144\021\123\023\113\033" +
    "\111\046\201\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\014\017\144\021\123\023\113\033" +
    "\111\046\205\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\024\010\211\011\066\015\104\024" +
    "\071\025\077\026\102\031\075\033\064\041\100\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\014\017\144\021\123" +
    "\023\113\033\111\046\217\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\024\010\223\011\066" +
    "\015\104\024\071\025\077\026\102\031\075\033\064\041" +
    "\100\001\001\000\002\001\001\000\002\001\001\000\014" +
    "\017\144\021\123\023\113\033\111\046\226\001\001\000" +
    "\002\001\001\000\014\017\144\021\123\023\113\033\111" +
    "\046\243\001\001\000\014\017\144\021\123\023\113\033" +
    "\111\046\231\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\014\017\144\021\123\023\113\033" +
    "\111\046\235\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\024\010\241\011\066\015\104\024" +
    "\071\025\077\026\102\031\075\033\064\041\100\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\014\017\144\021\123" +
    "\023\113\033\111\046\247\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\024\010\253\011\066" +
    "\015\104\024\071\025\077\026\102\031\075\033\064\041" +
    "\100\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\024\010\262\011\066\015\104\024\071\025\077" +
    "\026\102\031\075\033\064\041\100\001\001\000\002\001" +
    "\001\000\002\001\001\000\014\016\313\017\126\021\123" +
    "\023\113\033\111\001\001\000\002\001\001\000\014\016" +
    "\307\017\126\021\123\023\113\033\111\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\014\017" +
    "\144\021\123\023\113\033\111\046\273\001\001\000\002" +
    "\001\001\000\002\001\001\000\014\017\144\021\123\023" +
    "\113\033\111\046\276\001\001\000\002\001\001\000\002" +
    "\001\001\000\014\016\301\017\126\021\123\023\113\033" +
    "\111\001\001\000\002\001\001\000\002\001\001\000\014" +
    "\016\304\017\126\021\123\023\113\033\111\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\016\017\323\021\123\023\113\033\111\037\322\040" +
    "\321\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\047\346\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\024\010\326\011\066\015\104\024\071" +
    "\025\077\026\102\031\075\033\064\041\100\001\001\000" +
    "\002\001\001\000\004\032\332\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\016\017\323\021" +
    "\123\023\113\033\111\037\334\040\321\001\001\000\002" +
    "\001\001\000\002\001\001\000\024\010\337\011\066\015" +
    "\104\024\071\025\077\026\102\031\075\033\064\041\100" +
    "\001\001\000\002\001\001\000\004\032\341\001\001\000" +
    "\002\001\001\000\024\010\343\011\066\015\104\024\071" +
    "\025\077\026\102\031\075\033\064\041\100\001\001\000" +
    "\002\001\001\000\002\001\001\000\014\017\323\021\123" +
    "\023\113\033\111\040\354\001\001\000\004\050\350\001" +
    "\001\000\014\017\323\021\123\023\113\033\111\040\351" +
    "\001\001\000\002\001\001\000\004\047\352\001\001\000" +
    "\004\050\353\001\001\000\002\001\001\000\004\047\355" +
    "\001\001\000\002\001\001\000\002\001\001\000\014\017" +
    "\144\021\123\023\113\033\111\046\u0122\001\001\000\004" +
    "\042\361\001\001\000\006\012\362\013\365\001\001\000" +
    "\002\001\001\000\002\001\001\000\016\017\371\021\123" +
    "\023\113\033\111\043\373\044\u0100\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\016\016\u0103" +
    "\017\126\021\123\023\113\033\111\043\u0104\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\014\016\u0103" +
    "\017\126\021\123\023\113\033\111\001\001\000\004\014" +
    "\u010b\001\001\000\004\045\u0106\001\001\000\004\043\u0108" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\045" +
    "\u0109\001\001\000\002\001\001\000\014\016\u010d\017\126" +
    "\021\123\023\113\033\111\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\014\u010e\001\001\000\002\001\001" +
    "\000\002\001\001\000\014\017\144\021\123\023\113\033" +
    "\111\046\u0115\001\001\000\004\042\u0112\001\001\000\004" +
    "\013\u0113\001\001\000\006\012\u0114\013\365\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\014" +
    "\017\144\021\123\023\113\033\111\046\u011c\001\001\000" +
    "\004\042\u0119\001\001\000\004\013\u011a\001\001\000\006" +
    "\012\u011b\013\365\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\042\u011f\001\001\000\004" +
    "\013\u0120\001\001\000\006\012\u0121\013\365\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\014" +
    "\017\144\021\123\023\113\033\111\046\u0128\001\001\000" +
    "\004\042\u0126\001\001\000\006\012\u0127\013\365\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\042\u012b\001\001\000\006\012\u012c\013\365\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\027\u0132\001\001\000\014\016\u0134" +
    "\017\126\021\123\023\113\033\111\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\024\010\u0136" +
    "\011\066\015\104\024\071\025\077\026\102\031\075\033" +
    "\064\041\100\001\001\000\004\030\u0137\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\027\u013b\001\001\000" +
    "\002\001\001\000\002\001\001\000\024\010\u013d\011\066" +
    "\015\104\024\071\025\077\026\102\031\075\033\064\041" +
    "\100\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\016\017\323\021\123\023\113\033\111\037" +
    "\u0141\040\321\001\001\000\002\001\001\000\002\001\001" +
    "\000\024\010\u0144\011\066\015\104\024\071\025\077\026" +
    "\102\031\075\033\064\041\100\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\042\u014a\001\001\000\002\001\001" +
    "\000\002\001\001\000\024\010\u014d\011\066\015\104\024" +
    "\071\025\077\026\102\031\075\033\064\041\100\001\001" +
    "\000\002\001\001\000\024\010\u014f\011\066\015\104\024" +
    "\071\025\077\026\102\031\075\033\064\041\100\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\003\u0153\004" +
    "\u0151\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



   ArrayList<String> errores = new ArrayList();
   ArrayList<Variable> variables = new ArrayList();
   ArrayList<Function> funciones = new ArrayList();
   Node Tree  = new Node();
   int cont=0;
   int contMain=0;
   int contAmbito=0;
   int contContenido= 0;
   boolean testCont = false;
   String tempTipo = ""; 

   public String token_name_from_id(int id) {
		// obtenidos de la clase sym.java
		switch (id) {
  case 2: return   "FUNCTION" ; 
  case 44: return  "L_KEY"   ;
  case 39: return  "OPSUM"   ;
  case 35: return  "OPCOND"   ;
  case 28: return  "OUTPUT"   ;
  case 27: return  "INPUT"   ;
  case 30: return  "CASE"   ;
  case 14: return  "INTEGER" ;  
  case 49: return  "R_PAR"  ; 
  case 20: return  "FOR"   ;
  case 15: return  "CHARACTER" ;  
  case 51: return  "SEMICOLON";   
  case 41: return  "OPASIGN";   
  case 31: return  "OPTION";   
  case 50: return  "COMMA";   
  case 4: return   "UPTO"  ;
  case 34: return  "OPREL"  ; 
  case 45: return  "R_KEY" ;  
  case  3: return  "NUM"  ;
  case 55: return  "MAIN"  ; 
  case 17: return  "IF"   ;
  case 54: return  "DOT"   ;
  case 33: return  "ID"   ;
  case 12: return  "CONSTSTRING";   
  case 47: return  "R_BRACKET";   
  case 16: return  "BOOLEAN";   
  case 0: return   "EOF"  ;
  case 21: return  "RETURN"  ; 
  case 23: return  "TRUE"   ;
  case 1: return   "error"  ;
  case 11: return  "FLOAT_VAL";   
  case 26: return  "NULL"   ;
  case 42: return  "OPASIGNADD";   
  case 40: return  "OPINC"   ;
  case 25: return  "BREAK"   ;
  case 22: return  "VOID"   ;
  case 29: return  "SWITCH"   ;
  case 52: return  "COLON"   ;
  case 18: return  "ELSE"   ;
  case 7: return   "VARIABLE" ; 
  case 19: return  "WHILE"   ;
  case 32: return  "DEFAULT"  ; 
  case 10: return  "FLOAT"   ;
  case 37: return  "OPMOD"   ;
  case 48: return  "L_PAR"   ;
  case 43: return  "OPASIGNMULT";   
  case 8: return   "STRING"  ;
  case 13: return  "CONSTCHAR";   
  case 36: return  "OPLOG"  ; 
  case 5: return   "DOWNTO";  
  case 53: return  "AT"   ;
  case 24: return  "FALSE"   ;
  case 46: return  "L_BRACKET";   
  case 38: return  "OPMULT" ;  
  case 9: return   "ELIF"  ;
  case 6: return   "STEP" ;   
			
			default: return "N/A";
		}
	}

	public void syntax_error(Symbol s) {
        report_error("Error sintáctico. No se esperaba el siguiente token: <" + s.value + ">. Línea: " + (s.right + 1) + ", Columna: " + (s.left + 1) + 	"\n", null);
        errores.add("Error sintáctico. No se esperaba el siguiente token: <" + s.value + ">. Línea: " + (s.right + 1) + ", Columna: " + (s.left + 1) + 	"\n");

	List expected = expected_token_ids();
        if (expected.size() != 0) {
            int id;
            String x = "";
            String inicio = "Se esperaba:  ";
            x += inicio ;
            for (int i = 0; i < expected.size(); i++) {
            	id = (int) expected.get(i);
            	if (i == expected.size() - 1) {
            		System.out.println(token_name_from_id(id));
                        x+= token_name_from_id(id);
            	} else {
            		System.out.print(token_name_from_id(id) + " | ");
                        x+= token_name_from_id(id)+ " | ";
            	}   
            }
            errores.add(x);
        } else { /* do nothing */ }
     }
        
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception {
        System.out.println("No se pudo reparar y continuar el análisis.");
    }
    
    public Function buscaTipo2(String id , boolean returnsArray){
      String tipo = "";
        for (Function iter_list : funciones) {

            if(iter_list.getId().equals(id) && iter_list.isReturnsArray() == returnsArray){
               
                System.out.println(iter_list.toString());
                tipo = iter_list.getTipo();
                return iter_list;
                //isFound= true;
            }
        }
       
        System.err.println("NO EXISTE ESTA FUNCION");
        return new Function("-1","-1",false);
    }

    public Variable buscaTipo(String id, boolean esArray){
        //boolean isFound = false;
        String tipo = "";
        for (Variable iter_list : variables) {
            if(iter_list.getId().equals(id) && iter_list.isArray() == esArray){
                System.out.println("El tipo de la variable es: ");
                System.out.println(iter_list.getTipo());
                tipo= iter_list.getTipo();
                return iter_list;
                //isFound= true;
            }
        }
       
        System.err.println("NO EXISTE ESTA VARIABLE");
        return new Variable("-1","-1");
    }

    //Check if any id is repeated 
    public boolean checkRepeatedID(String id){
        for (Variable iter_list : variables) {
            if(iter_list.getId().equals(id)){
                System.out.println("Esta declaracion ya existe");
                return false;
            }else{
                return true;
            }
        }
        return false;
    }





/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {


    
    

  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= inicio EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Node start_val = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // inicio ::= dec_funcion dec_gen_fun 
            {
              Node RESULT =null;
		int dgleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dgright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Node dg = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int dgfleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dgfright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Node dgf = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    System.err.println("Entra a inicio");
    parser.cont++;
    Node node = new Node();
    node.setEtiqueta("INICIO");
    node.setID(parser.cont);
    node.addHijos((Node) dg);
    node.addHijos((Node) dgf);
    
    parser.Tree = node;
    RESULT = node; 
    
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // dec_gen_fun ::= dec_funcion dec_gen_fun 
            {
              Node RESULT =null;
		int dfleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dfright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Node df = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int dgfleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dgfright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Node dgf = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                System.err.println("Entra a dec_gen_fun");
                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("dec_gen_fun");
                node.setID(parser.cont);
                node.addHijos((Node) df);
                node.addHijos((Node) dgf);  
                
                RESULT = node;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("dec_gen_fun",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // dec_gen_fun ::= 
            {
              Node RESULT =null;
		
                parser.cont++;
                Node nodo = new Node();
				nodo.setEtiqueta("vacio");
				nodo.setID(parser.cont);
				
                RESULT = nodo;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("dec_gen_fun",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // dec_funcion ::= FUNCTION ID L_PAR parametros R_PAR COLON tipo L_KEY dec_general R_KEY 
            {
              Node RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int partsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int partsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Node parts = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int tipleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int tipright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Node tip = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int deGleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int deGright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Node deG = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
               System.err.println("Entra a dec_funcion");
                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("dec_funcion");
                node.setID(parser.cont);

                parser.cont++;
                Node identificador =new Node();
                identificador.setEtiqueta("ID");
                identificador.setID(parser.cont);
                identificador.setValor(id);

                Node n_parts=(Node) parts;
                Node n_tip=(Node) tip;
        
                node.addHijos(identificador);
                node.addHijos(n_parts);
                node.addHijos(n_tip);
                node.addHijos((Node) deG);

                ArrayList<Variable> params = (ArrayList<Variable>) n_parts.getValue();
                Function nueva_funcion=new Function(n_tip.getValor(),id,false);
                nueva_funcion.setParametros(params);
                System.out.println(nueva_funcion.toString());
                funciones.add(nueva_funcion);

                RESULT = node;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("dec_funcion",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // dec_funcion ::= FUNCTION ID L_PAR parametros R_PAR COLON MAIN L_KEY dec_general R_KEY 
            {
              Node RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int partsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int partsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Node parts = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int deGleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int deGright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Node deG = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
               
                System.err.println("Entra a dec_funcion");
            
                parser.contMain++;
                if(parser.contMain>1){
                    parser.errores.add("Error! Se ha encontrado otra declaracion de main.");
                }
               
                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("dec_Funcion");
                node.setID(parser.cont);

                parser.cont++;
                Node identificador =new Node();
                identificador.setEtiqueta("ID");
                identificador.setID(parser.cont);
                identificador.setValor(id);
                parser.cont++;
                Node main =new Node();
                main.setEtiqueta("Main");
                main.setID(parser.cont);
                main.setValor("Main");

                
                node.addHijos(identificador);
                node.addHijos((Node) parts);
                node.addHijos(main);
                node.addHijos((Node) deG);
                RESULT = node;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("dec_funcion",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // parametros ::= VARIABLE ID COLON tipo nuevo_parametro 
            {
              Node RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int tipleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tipright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Node tip = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int nuPleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nuPright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Node nuP = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                System.err.println("Entra a parametros 1");

                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("parametros");
                node.setID(parser.cont);

                parser.cont++;
                Node identificador =new Node();
                identificador.setEtiqueta("ID");
                identificador.setID(parser.cont);
                identificador.setValor(id);

                Node n_nuP=(Node) nuP;
                Node n_tip=(Node) tip;
                node.addHijos(identificador);
                node.addHijos(n_tip);
                node.addHijos(n_nuP);

                ArrayList<Variable> var = (ArrayList<Variable>) n_nuP.getValue();
                Variable tempo=new Variable(n_tip.getValor(),id);
                tempo.setArray(false);
                var.add(tempo);
                node.setValue(var);
                for(Variable lista: var){
                    System.out.println("Parametro: "+lista.getId());
                }
                RESULT = node;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // parametros ::= VARIABLE ID COLON tipo 
            {
              Node RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int tipleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tipright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Node tip = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                System.err.println("Entra a parametros 1");

                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("parametros");
                node.setID(parser.cont);

                parser.cont++;
                Node identificador =new Node();
                identificador.setEtiqueta("ID");
                identificador.setID(parser.cont);
                identificador.setValor(id);
                Node n_tip=(Node) tip;
                node.addHijos(identificador);
                node.addHijos(n_tip);

                ArrayList<Variable> var = new ArrayList();
                Variable tempo=new Variable(n_tip.getValor(),id);
                tempo.setArray(false);
                var.add(tempo);
                node.setValue(var);

                for(Variable lista: var){
                    System.out.println("Parametro solo: "+lista.getId());
                }

                RESULT = node;
               
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // parametros ::= VARIABLE ID L_BRACKET R_BRACKET COLON tipo nuevo_parametro 
            {
              Node RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int tipleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tipright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Node tip = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int nuPleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nuPright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Node nuP = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                System.err.println("Entra a parametros 1");

                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("parametros");
                node.setID(parser.cont);

                parser.cont++;
                Node identificador =new Node();
                identificador.setEtiqueta("ID");
                identificador.setID(parser.cont);
                identificador.setValor(id);

                Node n_nuP=(Node) nuP;
                Node n_tip=(Node) tip;
                node.addHijos(identificador);
                node.addHijos(n_tip);
                node.addHijos(n_nuP);

                ArrayList<Variable> var = (ArrayList<Variable>) n_nuP.getValue();
                Variable tempo=new Variable(n_tip.getValor(),id);
                tempo.setArray(true);
                var.add(tempo);
                node.setValue(var);

                for(Variable lista: var){
                    System.out.println("Parametro: "+lista.getId());
                }
                
                RESULT = node;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // parametros ::= VARIABLE ID L_BRACKET R_BRACKET COLON tipo 
            {
              Node RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int tipleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tipright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Node tip = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                System.err.println("Entra a parametros 1");

                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("parametros");
                node.setID(parser.cont);

                parser.cont++;
                Node identificador =new Node();
                identificador.setEtiqueta("ID");
                identificador.setID(parser.cont);
                identificador.setValor(id);
                Node n_tip=(Node) tip;
                node.addHijos(identificador);
                node.addHijos(n_tip);

                ArrayList<Variable> var = new ArrayList();
                Variable tempo=new Variable(n_tip.getValor(),id);
                tempo.setArray(true);
                var.add(tempo);
                node.setValue(var);

                for(Variable lista: var){
                    System.out.println("Parametro solo: "+lista.getId());
                }

                RESULT = node;
               
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // parametros ::= VARIABLE ID L_BRACKET R_BRACKET L_BRACKET R_BRACKET COLON tipo nuevo_parametro 
            {
              Node RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int tipleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tipright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Node tip = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int nuPleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nuPright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Node nuP = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                System.err.println("Entra a parametros 1");

                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("parametros");
                node.setID(parser.cont);

                parser.cont++;
                Node identificador =new Node();
                identificador.setEtiqueta("ID");
                identificador.setID(parser.cont);
                identificador.setValor(id);

                Node n_nuP=(Node) nuP;
                Node n_tip=(Node) tip;
                node.addHijos(identificador);
                node.addHijos(n_tip);
                node.addHijos(n_nuP);

                ArrayList<Variable> var = (ArrayList<Variable>) n_nuP.getValue();
                Variable tempo=new Variable(n_tip.getValor(),id);
                tempo.setArray(true);
                var.add(tempo);
                node.setValue(var);

                for(Variable lista: var){
                    System.out.println("Parametro: "+lista.getId());
                }

                RESULT = node;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // parametros ::= VARIABLE ID L_BRACKET R_BRACKET L_BRACKET R_BRACKET COLON tipo 
            {
              Node RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int tipleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tipright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Node tip = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                System.err.println("Entra a parametros 1");

                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("parametros");
                node.setID(parser.cont);

                parser.cont++;
                Node identificador =new Node();
                identificador.setEtiqueta("ID");
                identificador.setID(parser.cont);
                identificador.setValor(id);
                Node n_tip=(Node) tip;
                node.addHijos(identificador);
                node.addHijos(n_tip);

                ArrayList<Variable> var = new ArrayList();
                Variable tempo=new Variable(n_tip.getValor(),id);
                tempo.setArray(true);
                var.add(tempo);
                node.setValue(var);

                for(Variable lista: var){
                    System.out.println("Parametro solo: "+lista.getId());
                }

                RESULT = node;
               
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // parametros ::= 
            {
              Node RESULT =null;
		
                System.err.println("Entra a vacio");

                parser.cont++;
                Node nodo = new Node();
				nodo.setEtiqueta("vacio");
				nodo.setID(parser.cont);
                ArrayList<Variable> var = new ArrayList();
                nodo.setValue(var);
                System.out.println("No tiene parametros");
                RESULT = nodo;
               
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // nuevo_parametro ::= COMMA VARIABLE ID COLON tipo nuevo_parametro 
            {
              Node RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int tipleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tipright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Node tip = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int nuPleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nuPright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Node nuP = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                System.err.println("Entra a nuevo_parametro 1");

                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("nuevo_parametro");
                node.setID(parser.cont);

                parser.cont++;
                Node identificador =new Node();
                identificador.setEtiqueta("ID");
                identificador.setID(parser.cont);
                identificador.setValor(id);

                Node n_nuP=(Node) nuP;
                Node n_tip=(Node) tip;
                node.addHijos(identificador);
                node.addHijos(n_tip);
                node.addHijos(n_nuP);

                ArrayList<Variable> var = (ArrayList<Variable>) n_nuP.getValue();
                Variable tempo=new Variable(n_tip.getValor(),id);
                tempo.setArray(false);
                var.add(tempo);
                node.setValue(var);

                RESULT = node;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("nuevo_parametro",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // nuevo_parametro ::= COMMA VARIABLE ID COLON tipo 
            {
              Node RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int tipleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tipright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Node tip = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                System.err.println("Entra a nuevo_parametro 2");
                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("nuevo_parametro");
                node.setID(parser.cont);

                parser.cont++;
                Node identificador =new Node();
                identificador.setEtiqueta("ID");
                identificador.setID(parser.cont);
                identificador.setValor(id);
                Node n_tip=(Node) tip;
                node.addHijos(identificador);
                node.addHijos(n_tip);

                ArrayList<Variable> var = new ArrayList();
                Variable tempo=new Variable(n_tip.getValor(),id);
                tempo.setArray(false);
                var.add(tempo);
                node.setValue(var);

                RESULT = node;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("nuevo_parametro",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // nuevo_parametro ::= COMMA VARIABLE ID L_BRACKET R_BRACKET COLON tipo nuevo_parametro 
            {
              Node RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int tipleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tipright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Node tip = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int nuPleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nuPright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Node nuP = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                System.err.println("Entra a nuevo_parametro 1");

                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("nuevo_parametro");
                node.setID(parser.cont);

                parser.cont++;
                Node identificador =new Node();
                identificador.setEtiqueta("ID");
                identificador.setID(parser.cont);
                identificador.setValor(id);
                Node n_nuP=(Node) nuP;
                Node n_tip=(Node) tip;
                node.addHijos(identificador);
                node.addHijos(n_tip);
                node.addHijos(n_nuP);

                ArrayList<Variable> var = (ArrayList<Variable>) n_nuP.getValue();
                Variable tempo=new Variable(n_tip.getValor(),id);
                tempo.setArray(true);
                var.add(tempo);
                node.setValue(var);

                RESULT = node;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("nuevo_parametro",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // nuevo_parametro ::= COMMA VARIABLE ID L_BRACKET R_BRACKET COLON tipo 
            {
              Node RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int tipleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tipright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Node tip = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                System.err.println("Entra a nuevo_parametro 2");
                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("nuevo_parametro");
                node.setID(parser.cont);

                parser.cont++;
                Node identificador =new Node();
                identificador.setEtiqueta("ID");
                identificador.setID(parser.cont);
                identificador.setValor(id);

                Node n_tip=(Node) tip;
                node.addHijos(identificador);
                node.addHijos(n_tip);

                ArrayList<Variable> var = new ArrayList();
                Variable tempo=new Variable(n_tip.getValor(),id);
                tempo.setArray(true);
                var.add(tempo);
                node.setValue(var);

                RESULT = node;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("nuevo_parametro",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // nuevo_parametro ::= COMMA VARIABLE ID L_BRACKET R_BRACKET L_BRACKET R_BRACKET COLON tipo nuevo_parametro 
            {
              Node RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int tipleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tipright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Node tip = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int nuPleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nuPright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Node nuP = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                System.err.println("Entra a nuevo_parametro 1");

                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("nuevo_parametro");
                node.setID(parser.cont);

                parser.cont++;
                Node identificador =new Node();
                identificador.setEtiqueta("ID");
                identificador.setID(parser.cont);
                identificador.setValor(id);

                Node n_nuP=(Node) nuP;
                Node n_tip=(Node) tip;
                node.addHijos(identificador);
                node.addHijos(n_tip);
                node.addHijos(n_nuP);

                ArrayList<Variable> var = (ArrayList<Variable>) n_nuP.getValue();
                Variable tempo=new Variable(n_tip.getValor(),id);
                tempo.setArray(true);
                var.add(tempo);
                node.setValue(var);

                RESULT = node;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("nuevo_parametro",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // nuevo_parametro ::= COMMA VARIABLE ID L_BRACKET R_BRACKET L_BRACKET R_BRACKET COLON tipo 
            {
              Node RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int tipleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tipright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Node tip = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                System.err.println("Entra a nuevo_parametro 2");
                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("nuevo_parametro");
                node.setID(parser.cont);

                parser.cont++;
                Node identificador =new Node();
                identificador.setEtiqueta("ID");
                identificador.setID(parser.cont);
                identificador.setValor(id);
                Node n_tip=(Node) tip;
                node.addHijos(identificador);
                node.addHijos(n_tip);

                ArrayList<Variable> var = new ArrayList();
                Variable tempo=new Variable(n_tip.getValor(),id);
                tempo.setArray(true);
                var.add(tempo);
                node.setValue(var);

                RESULT = node;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("nuevo_parametro",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // dec_general ::= dec_variable dec_general 
            {
              Node RESULT =null;
		int dvaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dvaright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Node dva = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int dgleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dgright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Node dg = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                System.out.println("ambito: "+contAmbito);
                contAmbito++;
                System.err.println("Entra a dec_general de vairable");
                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("dec_general");
                node.setID(parser.cont);
                node.addHijos((Node) dva);
                node.addHijos((Node) dg);
                RESULT = node;
               
              CUP$parser$result = parser.getSymbolFactory().newSymbol("dec_general",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // dec_general ::= dec_while dec_general 
            {
              Node RESULT =null;
		int dwleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dwright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Node dw = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int dgleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dgright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Node dg = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                System.out.println("ambito: "+contAmbito);
                contAmbito++;
                System.err.println("Entra a dec_general de while");
                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("dec_general");
                node.setID(parser.cont);
                node.addHijos((Node) dw);
                node.addHijos((Node) dg);
                RESULT = node;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("dec_general",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // dec_general ::= dec_for dec_general 
            {
              Node RESULT =null;
		int dfleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dfright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Node df = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int dgleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dgright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Node dg = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                System.out.println("ambito: "+contAmbito);
                contAmbito++;
                System.err.println("Entra a dec_general de for");
                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("dec_general");
                node.setID(parser.cont);
                node.addHijos((Node) df);
                node.addHijos((Node) dg);
                RESULT = node;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("dec_general",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // dec_general ::= dec_switch dec_general 
            {
              Node RESULT =null;
		int dsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Node ds = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int dgleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dgright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Node dg = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                System.out.println("ambito: "+contAmbito);
                contAmbito++;
                System.err.println("Entra a dec_general de switch");
                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("dec_general");
                node.setID(parser.cont);
                node.addHijos((Node) ds);
                node.addHijos((Node) dg);
                RESULT = node;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("dec_general",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // dec_general ::= dec_if dec_general 
            {
              Node RESULT =null;
		int dileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int diright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Node di = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int dgleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dgright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Node dg = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                System.out.println("ambito: "+contAmbito);
                contAmbito++;
                System.err.println("Entra a dec_general de if");
                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("dec_general");
                node.setID(parser.cont);
                node.addHijos((Node) di);
                node.addHijos((Node) dg);
                RESULT = node;
               
              CUP$parser$result = parser.getSymbolFactory().newSymbol("dec_general",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // dec_general ::= dec_llamada_funcion SEMICOLON dec_general 
            {
              Node RESULT =null;
		int dlfleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int dlfright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Node dlf = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int dgleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dgright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Node dg = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                System.out.println("ambito: "+contAmbito);
                contAmbito++;
                System.err.println("Entra a dec_general de llamada_funcion");
                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("dec_general");
                node.setID(parser.cont);
                node.addHijos((Node) dlf);
                node.addHijos((Node) dg);
                RESULT = node;
               
              CUP$parser$result = parser.getSymbolFactory().newSymbol("dec_general",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // dec_general ::= dec_var_inst dec_general 
            {
              Node RESULT =null;
		int dvileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dviright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Node dvi = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int dgleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dgright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Node dg = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                System.out.println("ambito: "+contAmbito);
                contAmbito++;
                System.err.println("Entra a dec_general de dec_var_inst");
                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("dec_general");
                node.setID(parser.cont);
                node.addHijos((Node) dvi);
                node.addHijos((Node) dg);
                RESULT = node;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("dec_general",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // dec_general ::= dec_return SEMICOLON dec_general 
            {
              Node RESULT =null;
		int drleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int drright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Node dr = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int dgleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dgright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Node dg = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                System.out.println("ambito: "+contAmbito);
                contAmbito++;
                System.err.println("Entra a dec_general de dec_return");
                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("dec_general");
                node.setID(parser.cont);
                node.addHijos((Node) dr);
                node.addHijos((Node) dg);
                RESULT = node;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("dec_general",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // dec_general ::= error 
            {
              Node RESULT =null;
		
                System.err.println("Entra a dec_general nos vamos para el error ");
                Node node = new Node();
                RESULT = node;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("dec_general",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // dec_general ::= error SEMICOLON 
            {
              Node RESULT =null;
		
                System.err.println("Entra a dec_general nos vamos para el error ");
                Node node = new Node();
                RESULT = node;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("dec_general",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // dec_general ::= 
            {
              Node RESULT =null;
		
                System.err.println("Entra a dec_general a vacio");
                parser.cont++;
                Node nodo = new Node();
				nodo.setEtiqueta("vacio");
				nodo.setID(parser.cont);
                RESULT = nodo;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("dec_general",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // dec_variable ::= VARIABLE ID COLON tipo dec_var 
            {
              Node RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int tipleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tipright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Node tip = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int dvleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dvright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Node dv = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("dec_variable");
                node.setID(parser.cont);

                parser.cont++;
                Node identificador =new Node();
                identificador.setEtiqueta("ID");
                identificador.setID(parser.cont);
                identificador.setValor(id);
                node.addHijos(identificador);
                
                Node n_tip = (Node)tip;

                Node n_dv = (Node) dv;
                //n_dv.setValor(id);

                node.addHijos(n_tip);
                node.addHijos(n_dv);

                Variable new_var = new Variable(n_tip.getValor(), id);
                new_var.setArray(false);

                String test=n_dv.getValor()+"";
                
                if(test.equals("")){
                    System.out.println("no se hizo asignacion en "+id);
                }else{
                    if(n_tip.getValor().equals(n_dv.getValor())){
                        System.out.println("la asignacion es correcta en "+id);
                        new_var.setValue(n_dv.getValue());
                    }else{
                        System.out.println("la asignacion es incorrecta en "+ id);
                    }
                }
                variables.add(new_var);
                //System.out.println(n_tip.getValor());
                
                RESULT = node;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("dec_variable",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // dec_variable ::= VARIABLE ID L_BRACKET val_posicion R_BRACKET COLON tipo dec_var 
            {
              Node RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int vpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int vpright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Node vp = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int tipleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tipright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Node tip = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int dvleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dvright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Node dv = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("dec_variable");
                node.setID(parser.cont);

                parser.cont++;
                Node identificador =new Node();
                identificador.setEtiqueta("ID");
                identificador.setID(parser.cont);
                identificador.setValor(id);

                Node n_tip = (Node)tip;

                Node n_dv = (Node) dv;

                node.addHijos(n_tip);
                node.addHijos(n_dv);
                node.addHijos(identificador);
                node.addHijos((Node) vp);

                Variable new_var = new Variable(n_tip.getValor(), id);
                new_var.setArray(true);
                String test=n_dv.getValor()+"";
                

                if(test.equals("")){
                    System.out.println("no se hizo asignacion en "+id);
                }else{
                    if(n_tip.getValor().equals(n_dv.getValor())){
                        System.out.println("la asignacion es correcta en "+id);
                        new_var.setValue(n_dv.getValue());
                    }else{
                        System.out.println("la asignacion es incorrecta en "+ id);
                    }
                }
                variables.add(new_var);
                RESULT = node;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("dec_variable",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // dec_variable ::= VARIABLE ID L_BRACKET val_posicion R_BRACKET L_BRACKET val_posicion R_BRACKET COLON tipo dec_var 
            {
              Node RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int vp1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int vp1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Node vp1 = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int vp2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int vp2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Node vp2 = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int tipleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tipright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Node tip = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int dvleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dvright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Node dv = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("dec_variable");
                node.setID(parser.cont);

                parser.cont++;
                Node identificador =new Node();
                identificador.setEtiqueta("ID");
                identificador.setID(parser.cont);
                identificador.setValor(id);

                Node n_tip = (Node)tip;

                Node n_dv = (Node) dv;

                node.addHijos(n_tip);
                node.addHijos(n_dv);
                node.addHijos(identificador);
                node.addHijos((Node) vp1);
                node.addHijos((Node) vp2);

                Variable new_var = new Variable(n_tip.getValor(), id);
                /*if(!n_di.getEtiqueta.equals("vacio")){
                    new_var.setValue(n_di.getValue());
                }*/
                new_var.setArray(true);
                String test=n_dv.getValor()+"";
                

                if(test.equals("")){
                    System.out.println("no se hizo asignacion en "+id);
                }else{
                    if(n_tip.getValor().equals(n_dv.getValor())){
                        System.out.println("la asignacion es correcta en "+id);
                        new_var.setValue(n_dv.getValue());
                    }else{
                        System.out.println("la asignacion es incorrecta en "+ id);
                    }
                }
                variables.add(new_var);
                RESULT = node;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("dec_variable",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // dec_var ::= dec_inst SEMICOLON 
            {
              Node RESULT =null;
		int dileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int diright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Node di = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("dec_var");
                node.setID(parser.cont);
                Node node_di = (Node) di;
                node.addHijos(node_di);
                System.out.println("aqui "+ node_di.getValor() +" aqui");
                node.setValor(node_di.getValor());
                node.setValue(node_di.getValue());
                /*if(node_di.getValor().equals("")){
                    node
                }else{
                    
                }*/
                RESULT = node;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("dec_var",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // dec_var ::= COMMA ID COLON tipo dec_inst dec_var 
            {
              Node RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int tipleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tipright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Node tip = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int dileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int diright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Node di = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int dvleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dvright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Node dv = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("dec_var");
                node.setID(parser.cont);

                parser.cont++;
                Node identificador =new Node();
                identificador.setEtiqueta("ID");
                identificador.setID(parser.cont);
                identificador.setValor(id);
                node.addHijos(identificador);

                Node n_tip =(Node) tip;
                Node n_di=(Node) di;
                Node n_dv=(Node) dv;

                node.addHijos(n_tip);
                node.addHijos(n_di);
                node.addHijos(n_dv);
                
                Variable new_var = new Variable(n_tip.getValor(), id);
                /*if(!n_di.getEtiqueta().equals("vacio")){
                    new_var.setValue(n_di.getValue());
                }*/
                new_var.setArray(false);
                
                String test=n_di.getValor()+"";
                
                if(test.equals("")){
                    System.out.println("no hubo asignacion en "+ id);
                }else{
                    if(n_tip.getValor().equals(n_di.getValor())){
                        System.out.println("la asignacion es correcta en "+ id);
                        new_var.setValue(n_dv.getValue());
                    }else{
                        System.out.println(" # la asignacion es incorrecta en "+ id);
                        System.out.println( n_tip.getValor()+ " =/= "+ id);

                    }
                }
                node.setValor("");
                variables.add(new_var);
                RESULT = node;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("dec_var",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // dec_var ::= COMMA ID L_BRACKET val_posicion R_BRACKET COLON tipo dec_inst dec_var 
            {
              Node RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int vpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int vpright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Node vp = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int tipleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tipright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Node tip = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int dileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int diright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Node di = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int dvleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dvright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Node dv = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("dec_var");
                node.setID(parser.cont);

                parser.cont++;
                Node identificador =new Node();
                identificador.setEtiqueta("ID");
                identificador.setID(parser.cont);
                identificador.setValor(id);

                Node n_tip =(Node) tip;
                Node n_di=(Node) di;
                Node n_dv=(Node) dv;

                node.addHijos(n_dv);
                node.addHijos(identificador);
                node.addHijos((Node) vp);
                node.addHijos(n_tip);
                node.addHijos(n_di);




                Variable new_var = new Variable(n_tip.getValor(), id);
                /*if(!n_di.getEtiqueta().equals("vacio")){
                    new_var.setValue(n_di.getValue());
                }*/
                new_var.setArray(true);
                variables.add(new_var);
                String test=n_di.getValor()+"";
                
                if(test.equals("")){
                    System.out.println("no hubo asignacion en "+ id);
                }else{
                    if(n_tip.getValor().equals(n_di.getValor())){
                        System.out.println("la asignacion es correcta en "+ id);
                        new_var.setValue(n_dv.getValue());
                    }else{
                        System.out.println(" # la asignacion es incorrecta en "+ id);
                        System.out.println( n_tip.getValor()+ " =/= "+ id);

                    }
                }
                node.setValor("");
                variables.add(new_var);
                RESULT = node;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("dec_var",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // dec_var ::= COMMA ID L_BRACKET val_posicion R_BRACKET L_BRACKET val_posicion R_BRACKET COLON tipo dec_inst dec_var 
            {
              Node RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-10)).value;
		int vp1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int vp1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		Node vp1 = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int vp2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int vp2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Node vp2 = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int tipleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tipright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Node tip = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int dileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int diright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Node di = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int dvleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dvright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Node dv = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("dec_var");
                node.setID(parser.cont);

                parser.cont++;
                Node identificador =new Node();
                identificador.setEtiqueta("ID");
                identificador.setID(parser.cont);
                identificador.setValor(id);

                Node n_tip =(Node) tip;
                Node n_di=(Node) di;
                Node n_dv=(Node) dv;
                
                node.addHijos(n_dv);
                node.addHijos(n_tip);
                node.addHijos(n_di);
                node.addHijos(identificador);
                node.addHijos((Node) vp1);
                node.addHijos((Node) vp2);

                Variable new_var = new Variable(n_tip.getValor(), id);
                /*if(!n_di.getEtiqueta().equals("vacio")){
                    new_var.setValue(n_di.getValue());
                }*/
                new_var.setArray(true);
                
                String test=n_di.getValor()+"";
                
                if(test.equals("")){
                    System.out.println("no hubo asignacion en "+ id);
                }else{
                    if(n_tip.getValor().equals(n_di.getValor())){
                        System.out.println("la asignacion es correcta en "+ id);
                        new_var.setValue(n_dv.getValue());
                    }else{
                        System.out.println(" # la asignacion es incorrecta en "+ id);
                        System.out.println( n_tip.getValor()+ " =/= "+ id);

                    }
                }
                variables.add(new_var);
                node.setValor("");
                RESULT = node;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("dec_var",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // dec_inst ::= OPASIGN FLOAT_VAL 
            {
              Node RESULT =null;
		int nmleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nmright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String nm = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("dec_inst");
                node.setID(parser.cont);

                parser.cont++;
                Node num =new Node();
                num.setEtiqueta("float");
                num.setID(parser.cont);
                num.setValor(nm);
                node.addHijos(num);
                RESULT = node;
             
              CUP$parser$result = parser.getSymbolFactory().newSymbol("dec_inst",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // dec_inst ::= OPASIGN CONSTSTRING 
            {
              Node RESULT =null;
		int csleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int csright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String cs = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("dec_inst");
                node.setID(parser.cont);
                node.setValor("string");
                parser.cont++;
                Node const_string =new Node();
                const_string.setEtiqueta("string");
                const_string.setID(parser.cont);
                const_string.setValor(cs.replaceAll("\"",""));
                node.addHijos(const_string);
                node.setValue(cs);
                RESULT = node;
             
              CUP$parser$result = parser.getSymbolFactory().newSymbol("dec_inst",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // dec_inst ::= OPASIGN CONSTCHAR 
            {
              Node RESULT =null;
		int ccleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int ccright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String cc = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("dec_inst");
                node.setID(parser.cont);
                node.setValor("chr");
                parser.cont++;
                Node const_char =new Node();
                const_char.setEtiqueta("const char");
                const_char.setID(parser.cont);
                const_char.setValor(cc.replaceAll("\'",""));
                node.addHijos(const_char);
                node.setValue(cc);
                RESULT = node;
             
              CUP$parser$result = parser.getSymbolFactory().newSymbol("dec_inst",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // dec_inst ::= OPASIGN TRUE 
            {
              Node RESULT =null;
		int truleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int truright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String tru = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("dec_inst");
                node.setID(parser.cont);
                node.setValor("bool");
                parser.cont++;
                Node bool_true =new Node();
                bool_true.setEtiqueta("true");
                bool_true.setID(parser.cont);
                bool_true.setValor(tru);
                node.addHijos(bool_true);
                node.setValue(true);
                RESULT = node;
             
              CUP$parser$result = parser.getSymbolFactory().newSymbol("dec_inst",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // dec_inst ::= OPASIGN FALSE 
            {
              Node RESULT =null;
		int falsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int falsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String fals = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("dec_inst");
                node.setID(parser.cont);
                node.setValor("bool");
                parser.cont++;
                Node bool_false =new Node();
                bool_false.setEtiqueta("false");
                bool_false.setID(parser.cont);
                bool_false.setValor(fals);
                node.addHijos(bool_false);
                node.setValue(false);
                RESULT = node;
             
              CUP$parser$result = parser.getSymbolFactory().newSymbol("dec_inst",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // dec_inst ::= OPASIGN arreglo 
            {
              Node RESULT =null;
		int arrleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int arrright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Node arr = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("dec_inst");
                node.setID(parser.cont);
                Node n_arr=(Node) arr;
                node.addHijos(n_arr);

                node.setValor(n_arr.getValor());
                node.setValue("testing");
                RESULT = node;
             
              CUP$parser$result = parser.getSymbolFactory().newSymbol("dec_inst",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // dec_inst ::= OPASIGN arreglo2d 
            {
              Node RESULT =null;
		int arrleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int arrright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Node arr = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("dec_inst");
                node.setID(parser.cont);
                Node n_arr=(Node) arr;
                node.addHijos(n_arr);

                node.setValor(n_arr.getValor());
                node.setValue("testing2");
                RESULT = node;
             
              CUP$parser$result = parser.getSymbolFactory().newSymbol("dec_inst",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // dec_inst ::= OPASIGN math_op 
            {
              Node RESULT =null;
		int moleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int moright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Node mo = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("dec_inst");
                node.setID(parser.cont);
                
                Node n_mo=(Node) mo;
                node.addHijos(n_mo);
                node.setValue(n_mo.getValue());
                node.setValor(n_mo.isIsInt());
                RESULT = node;
             
              CUP$parser$result = parser.getSymbolFactory().newSymbol("dec_inst",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // dec_inst ::= 
            {
              Node RESULT =null;
		
                parser.cont++;
                Node node = new Node();
				node.setEtiqueta("vacio");
				node.setID(parser.cont);
                node.setValor("");
                node.setValue("vacio");
                RESULT = node;
             
              CUP$parser$result = parser.getSymbolFactory().newSymbol("dec_inst",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // arreglo2d ::= L_KEY arreglo arr2_cont R_KEY 
            {
              Node RESULT =null;
		int arrleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int arrright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Node arr = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int arcleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int arcright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Node arc = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                parser.cont++;
                Node node=new Node();
                node.setEtiqueta("arreglo2d");
                Node n_arr=(Node) arr;
                Node n_arc=(Node) arc;
                node.addHijos(n_arr);
                node.addHijos((Node) arc);

                if(n_arc.getValor().equals("nada")){
                    node.setValor(n_arr.getValor());
                }else if(n_arc.getValor().equals(n_arr.getValor())){
                    node.setValor(n_arr.getValor());
                }else{
                    node.setValor("error");
                }
                RESULT=node;
             
              CUP$parser$result = parser.getSymbolFactory().newSymbol("arreglo2d",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // arreglo2d ::= error R_KEY 
            {
              Node RESULT =null;
		
                System.err.println("arreglo2d error ");
                Node node = new Node();
                RESULT = node;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("arreglo2d",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // arr2_cont ::= COMMA arreglo arr2_cont 
            {
              Node RESULT =null;
		int arrleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int arrright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Node arr = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int arcleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int arcright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Node arc = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                parser.cont++;
                Node node=new Node();
                node.setEtiqueta("arr2_cont");
                node.setID(parser.cont);

                Node n_arr=(Node) arr;
                Node n_arc=(Node) arc;
                node.addHijos(n_arr);
                node.addHijos((Node) arc);

                if(n_arc.getValor().equals("nada")){
                    node.setValor(n_arr.getValor());
                }else if(n_arc.getValor().equals(n_arr.getValor())){
                    node.setValor(n_arr.getValor());
                }else{
                    node.setValor("error");
                }

                RESULT=node;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("arr2_cont",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // arr2_cont ::= 
            {
              Node RESULT =null;
		
                parser.cont++;
                Node nodo = new Node();
				nodo.setEtiqueta("vacio");
				nodo.setID(parser.cont);
                nodo.setValor("nada");
                RESULT = nodo;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("arr2_cont",35, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // arreglo ::= L_KEY valor arr_cont R_KEY 
            {
              Node RESULT =null;
		int valeft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int varight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Node va = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int arcleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int arcright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Node arc = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                parser.cont++;
                Node node=new Node();
                node.setEtiqueta("arreglo");
                node.setID(parser.cont);
                Node n_va=(Node) va;
                Node n_arc=(Node) arc;
                
                node.addHijos(n_va);
                node.addHijos(n_arc);

                if(n_arc.getValor().equals("nada")){
                    node.setValor(n_va.getValor());
                }else if(n_arc.getValor().equals(n_va.getValor())){                   
                    node.setValor(n_va.getValor());
                }else{
                    node.setValor("error");
                }
                RESULT=node;

             
              CUP$parser$result = parser.getSymbolFactory().newSymbol("arreglo",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // arr_cont ::= COMMA valor arr_cont 
            {
              Node RESULT =null;
		int valeft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int varight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Node va = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int arcleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int arcright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Node arc = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("arr_cont");
                node.setID(parser.cont);

                Node n_va=(Node) va;
                Node n_arc=(Node) arc;
                
                node.addHijos(n_va);
                node.addHijos(n_arc);
                if(n_arc.getValor().equals("nada")){
                    node.setValor(n_va.getValor());
                }else if(n_arc.getValor().equals(n_va.getValor())){         
                    node.setValor(n_va.getValor());
                }else{
                    node.setValor("error");
                }
                RESULT = node;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("arr_cont",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // arr_cont ::= 
            {
              Node RESULT =null;
		
                parser.cont++;
                Node nodo = new Node();
				nodo.setEtiqueta("vacio");
				nodo.setID(parser.cont);
                nodo.setValor("nada");
                RESULT = nodo;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("arr_cont",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // dec_var_inst ::= ID OPASIGN valor SEMICOLON 
            {
              Node RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int valeft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int varight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Node va = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("dec_var_inst");
                node.setID(parser.cont);

                parser.cont++;
                Node identificador =new Node();
                identificador.setEtiqueta("ID");
                identificador.setID(parser.cont);
                identificador.setValor(id);

                Node n_va=(Node) va;
                node.addHijos(identificador);
                node.addHijos(n_va);
                
                Variable compare = buscaTipo(identificador.getValor(),false);
                System.out.println("La variable tiene asignado un: "+n_va.getValor());
                
                if(compare.getTipo().equals(n_va.getValor())){
                    System.out.println(" :) la asignacion es correcta en "+ id);
                    System.out.println( compare.getTipo() + " == "+ n_va.getValor());
                }else{
                    System.out.println(" :( la asignacion es incorrecta en "+ id);
                    System.out.println(  compare.getTipo() + " =/= "+ n_va.getValor());
                }

                RESULT = node;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("dec_var_inst",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // dec_var_inst ::= ID DOT AT L_PAR val_posicion R_PAR OPASIGN valor SEMICOLON 
            {
              Node RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int vpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int vpright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Node vp = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int valeft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int varight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Node va = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("dec_var_inst");
                node.setID(parser.cont);

                parser.cont++;
                Node identificador =new Node();
                identificador.setEtiqueta("ID");
                identificador.setID(parser.cont);
                identificador.setValor(id);
                node.addHijos((Node) vp);

                Node n_va=(Node) va;
                node.addHijos(identificador);
                node.addHijos(n_va);
                

                Variable compare = buscaTipo(identificador.getValor(),true);
                System.out.println("La variable tiene asignado un: "+n_va.getValor());
                
                if(compare.getTipo().equals(n_va.getValor())){
                    System.out.println(" :) la asignacion es correcta en "+ id);
                    System.out.println( compare.getTipo() + " == "+ n_va.getValor());
                }else{
                    System.out.println(" :( la asignacion es incorrecta en "+ id);
                    System.out.println(  compare.getTipo() + " =/= "+ n_va.getValor());
                }


                RESULT = node;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("dec_var_inst",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // dec_var_inst ::= ID OPASIGNADD valor SEMICOLON 
            {
              Node RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int valeft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int varight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Node va = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("dec_var_inst");
                node.setID(parser.cont);

                parser.cont++;
                Node identificador =new Node();
                identificador.setEtiqueta("ID");
                identificador.setID(parser.cont);
                identificador.setValor(id);
                node.addHijos(identificador);
                node.addHijos((Node) va);
                RESULT = node;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("dec_var_inst",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // dec_var_inst ::= ID OPASIGNMULT NUM SEMICOLON 
            {
              Node RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int nmleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int nmright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String nm = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("dec_var_inst");
                node.setID(parser.cont);

                parser.cont++;
                Node identificador =new Node();
                identificador.setEtiqueta("ID");
                identificador.setID(parser.cont);
                identificador.setValor(id);
                parser.cont++;
                Node num =new Node();
                num.setEtiqueta("num");
                num.setID(parser.cont);
                num.setValor(nm);
                node.addHijos(identificador);
                node.addHijos(num);
                RESULT = node;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("dec_var_inst",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // dec_var_inst ::= ID OPINC SEMICOLON 
            {
              Node RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("dec_var_inst");
                node.setID(parser.cont);

                parser.cont++;
                Node identificador =new Node();
                identificador.setEtiqueta("ID");
                identificador.setID(parser.cont);
                identificador.setValor(id);
                node.addHijos(identificador);
                RESULT = node;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("dec_var_inst",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // dec_var_inst ::= ID DOT AT L_PAR val_posicion COMMA val_posicion R_PAR OPASIGN valor SEMICOLON 
            {
              Node RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-10)).value;
		int vp1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int vp1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Node vp1 = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int vp2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int vp2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Node vp2 = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int valeft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int varight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Node va = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("dec_var_inst");
                node.setID(parser.cont);

                parser.cont++;
                Node identificador =new Node();
                identificador.setEtiqueta("ID");
                identificador.setID(parser.cont);
                identificador.setValor(id);
                node.addHijos((Node) vp1);
                node.addHijos((Node) vp2);

                Node n_va=(Node) va;
                node.addHijos(identificador);
                node.addHijos(n_va);
                

                Variable compare = buscaTipo(identificador.getValor(),true);
                System.out.println("La variable tiene asignado un: "+n_va.getValor());
                
                if(compare.getTipo().equals(n_va.getValor())){
                    System.out.println(" :) la asignacion es correcta en "+ id);
                    System.out.println( compare.getTipo() + " == "+ n_va.getValor());
                }else{
                    System.out.println(" :( la asignacion es incorrecta en "+ id);
                    System.out.println(  compare.getTipo() + " =/= "+ n_va.getValor());
                }

                RESULT = node;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("dec_var_inst",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // valor ::= CONSTSTRING 
            {
              Node RESULT =null;
		int csleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int csright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String cs = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("valor");
                node.setID(parser.cont);
                node.setValor("string");
                node.setValue(cs);
                parser.cont++;
                
                /********************
                    REVISAR ESTO
                *********************/
                Node const_string = new Node();
                const_string.setEtiqueta("const string");
                const_string.setID(parser.cont);
                
                if(cs.equals("")){
                    const_string.setValor("empty");
                }else{
                    const_string.setValor(cs);
                }    
                //node.setValor(const_string.getValor().replaceAll("\"",""));

                RESULT = node;
           
              CUP$parser$result = parser.getSymbolFactory().newSymbol("valor",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // valor ::= CONSTCHAR 
            {
              Node RESULT =null;
		int ccleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int ccright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String cc = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("valor");
                node.setID(parser.cont);
                node.setValor("chr");
                node.setValue(cc);

                parser.cont++;
                Node const_char = new Node();
                const_char.setEtiqueta("const char");
                const_char.setID(parser.cont);
                const_char.setValor(cc);

                //node.setValor(const_char.getValor());
                RESULT = node;
           
              CUP$parser$result = parser.getSymbolFactory().newSymbol("valor",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // valor ::= TRUE 
            {
              Node RESULT =null;
		int truleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int truright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String tru = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("valor");
                node.setID(parser.cont);
                node.setValor("bool");
                node.setValue(true);

                parser.cont++;
                Node bool_true = new Node();
                bool_true.setEtiqueta("true");
                bool_true.setID(parser.cont);
                bool_true.setValor(tru);

                //node.setValor(bool_true.getValor());
                RESULT = node;
           
              CUP$parser$result = parser.getSymbolFactory().newSymbol("valor",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // valor ::= FALSE 
            {
              Node RESULT =null;
		int falsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int falsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String fals = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("valor");
                node.setID(parser.cont);
                node.setValor("bool");
                node.setValue(false);
                parser.cont++;
                Node bool_false = new Node();
                bool_false.setEtiqueta("false");
                bool_false.setID(parser.cont);
                bool_false.setValor(fals);

                //node.setValor(bool_false.getValor());
                RESULT = node;
           
              CUP$parser$result = parser.getSymbolFactory().newSymbol("valor",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // valor ::= FLOAT_VAL 
            {
              Node RESULT =null;
		int fltleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fltright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String flt = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("valor");
                node.setID(parser.cont);
                
                parser.cont++;
                Node num_flt = new Node();
                num_flt.setEtiqueta("FLOAT");
                num_flt.setID(parser.cont);
                num_flt.setValor(flt);

                node.setValor(num_flt.getValor());
                RESULT = node;
           
              CUP$parser$result = parser.getSymbolFactory().newSymbol("valor",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // valor ::= math_op 
            {
              Node RESULT =null;
		int mopleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int mopright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Node mop = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("valor");
                node.setID(parser.cont);
                Node n_mop=(Node) mop;
                node.addHijos(n_mop);
                node.setValor(n_mop.isIsInt());
                node.setValue(n_mop.getValue());
                RESULT = node;
           
              CUP$parser$result = parser.getSymbolFactory().newSymbol("valor",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // math_op ::= m_op sum_op 
            {
              Node RESULT =null;
		int multleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int multright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Node mult = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int sumleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sumright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Node sum = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("math_op");
                node.setID(parser.cont);

                Node n_mult=(Node) mult;
                Node n_sum=(Node) sum;

                if(n_sum.getEtiqueta().equals("vacio")  ){
                    node.setValue(n_mult.getValue());
                    node.setIsInt(n_mult.isIsInt());
                }else if(n_mult.isIsInt().equals("int")){
                    node.setValue((int)n_mult.getValue() + (int)n_sum.getValue());
                    node.setIsInt("int");
                }else {
                    System.err.println("OPERACIONES INCOMPATIBLES");
                    node.setIsInt("error");
                }
                node.addHijos(n_mult);
                node.addHijos(n_sum);
                RESULT = node;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("math_op",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // sum_op ::= OPSUM m_op sum_op 
            {
              Node RESULT =null;
		int multleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int multright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Node mult = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int sumleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sumright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Node sum = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("math_op +");
                Node n_mult=(Node) mult;
                Node n_sum=(Node) sum;
                if(n_mult.isIsInt().equals("int") && n_sum.isIsInt().equals("int")){
                    node.setValue((int)n_mult.getValue() + (int)n_sum.getValue());
                    node.setIsInt("int");
                }else {
                    System.err.println("OPERACIONES INCOMPATIBLES");
                    node.setIsInt("error");
                }
                node.setID(parser.cont);
                node.addHijos(n_mult);
                node.addHijos(n_sum);
                RESULT = node;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sum_op",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // sum_op ::= 
            {
              Node RESULT =null;
		
                parser.cont++;
                Node nodo = new Node();
				nodo.setEtiqueta("vacio");
				nodo.setID(parser.cont);
                nodo.setValue(0);
                nodo.setIsInt("int");
                RESULT = nodo;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sum_op",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // m_op ::= val mult_op 
            {
              Node RESULT =null;
		int vlleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int vlright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Node vl = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int multleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int multright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Node mult = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("math_op");
                node.setID(parser.cont);
                Node n_vl=(Node) vl;
                Node n_mult=(Node) mult;

                if(n_mult.getEtiqueta().equals("vacio")){
                    node.setValue(n_vl.getValue());
                    node.setIsInt(n_vl.isIsInt());

                }else if( n_vl.isIsInt().equals("int")){
                    node.setValue((int)n_vl.getValue() * (int)n_mult.getValue());
                    node.setIsInt("int");
                }else {
                    System.err.println("OPERACIONES INCOMPATIBLES");
                    node.setIsInt("error");
                }
                node.addHijos(n_vl);
                node.addHijos(n_mult);

                RESULT = node;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("m_op",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // mult_op ::= OPMULT val mult_op 
            {
              Node RESULT =null;
		int vlleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int vlright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Node vl = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int multleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int multright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Node mult = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("math_op *");
                node.setID(parser.cont);
                Node n_vl=(Node) vl;
                Node n_mult=(Node) mult;
                if(n_vl.isIsInt().equals("int") && n_mult.isIsInt().equals("int")){
                    node.setValue((int)n_vl.getValue() * (int)n_mult.getValue());
                    node.setIsInt("int");
                }else {
                    System.err.println("OPERACIONES INCOMPATIBLES");
                    node.setIsInt("error");
                }
                node.addHijos(n_vl);
                node.addHijos(n_mult);
                RESULT = node;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("mult_op",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // mult_op ::= 
            {
              Node RESULT =null;
		
                parser.cont++;
                Node nodo = new Node();
				nodo.setEtiqueta("vacio");
                nodo.setValue(1);
				nodo.setID(parser.cont);
                nodo.setIsInt("int");
                RESULT = nodo;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("mult_op",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // val ::= ID 
            {
              Node RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                /*
                *** !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
                SE DEBE DISTINGUIR ENTRE STRINGS E 
                INTEGERS, YA QUE PODEMOS CONCATENAR CADENAS
                ***!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
                */

                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("val");
                node.setID(parser.cont);
                
                Variable temp = buscaTipo(id,false);

                if(temp.getTipo().equals("int")){
                    int valor_temp = (int)temp.getValue();
                    node.setValue(valor_temp);
                    node.setIsInt("int");
                }else if(temp.getTipo().equals("string")){
                    String valor_temp = (String)temp.getValue();
                    node.setValue(valor_temp);
                    node.setIsInt("string");
                }
                else if(temp.getTipo().equals("chr")){
                    char valor_temp = (char)temp.getValue();
                    node.setValue(valor_temp);
                    node.setIsInt("chr");
                }
                else if(temp.getTipo().equals("bool")){
                    boolean valor_temp;
                    if((boolean)temp.getValue()){
                        valor_temp = true;
                    }else{
                        valor_temp = false;
                    }
                    node.setValue(valor_temp);
                    node.setIsInt("bool");
                }
                
                parser.cont++;

                Node identificador = new Node();
                identificador.setEtiqueta("ID");
                identificador.setID(parser.cont);
                identificador.setValor(id);

                node.setValor(identificador.getValor());
                RESULT = node;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("val",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // val ::= ID DOT AT L_PAR val_posicion R_PAR 
            {
              Node RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int vpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int vpright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Node vp = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("val");
                node.setID(parser.cont);
                
                Variable temp = buscaTipo(id,true);
                Node n_vp = (Node)vp;

                if(temp.getTipo().equals("int")){
                    ArrayList valor_temp = (ArrayList)temp.getValue();
                    int pos =(int)valor_temp.get( (int)n_vp.getValue() );
                    node.setValue(pos);
                    node.setIsInt("int");
                    
                }else if(temp.getTipo().equals("string")){
                    ArrayList<String> valor_temp = (ArrayList<String>)temp.getValue();
                    node.setValue(valor_temp.get( (int)n_vp.getValue() ) );
                    node.setIsInt("string");
                }
                else if(temp.getTipo().equals("chr")){
                    ArrayList valor_temp = (ArrayList)temp.getValue();
                    char pos =(char)valor_temp.get( (int)n_vp.getValue() );
                    node.setValue(pos);
                    node.setIsInt("chr");
                }
                else if(temp.getTipo().equals("bool")){
                    ArrayList valor_temp = (ArrayList)temp.getValue();
                    boolean pos =(boolean)valor_temp.get( (int)n_vp.getValue() );
                    node.setValue(pos);
                    node.setIsInt("bool");
                }


                parser.cont++;
                Node identificador = new Node();
                identificador.setEtiqueta("ID");
                identificador.setID(parser.cont);
                identificador.setValor(id);
                node.addHijos(identificador);
                node.addHijos((Node) vp);
                node.setValor("");

                RESULT = node;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("val",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // val ::= ID DOT AT L_PAR val_posicion COMMA val_posicion R_PAR 
            {
              Node RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int vp1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int vp1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Node vp1 = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int vp2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int vp2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Node vp2 = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("val");
                node.setID(parser.cont);
                
                parser.cont++;
                Node identificador = new Node();
                identificador.setEtiqueta("ID");
                identificador.setID(parser.cont);
                identificador.setValor(id);
                node.addHijos(identificador);
                node.addHijos((Node) vp1);
                node.addHijos((Node) vp2);
                node.setValor("");

                RESULT = node;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("val",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // val ::= NUM 
            {
              Node RESULT =null;
		int nmleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nmright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String nm = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("val");
                node.setID(parser.cont);
                node.setValue(Integer.parseInt(nm));
                parser.cont++;
                Node num = new Node();
                num.setEtiqueta("num");
                num.setID(parser.cont);
                num.setValor(nm);

                node.setValor(num.getValor());
                node.setIsInt("int");
                RESULT = node;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("val",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // val ::= dec_llamada_funcion 
            {
              Node RESULT =null;
		int dlfleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dlfright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Node dlf = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("val");
                node.setID(parser.cont);
                node.addHijos((Node) dlf);
                RESULT = node;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("val",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // val ::= L_PAR math_op R_PAR 
            {
              Node RESULT =null;
		int moleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int moright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Node mo = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("val");
                node.setID(parser.cont);
                Node n_mo=(Node) mo;
                node.addHijos(n_mo);
                node.setValue(n_mo.getValue());
                node.setIsInt(n_mo.isIsInt());
                RESULT = node;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("val",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // dec_while ::= WHILE L_PAR condicion R_PAR L_KEY dec_general R_KEY 
            {
              Node RESULT =null;
		int condleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int condright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Node cond = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int dgleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dgright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Node dg = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("dec_while");
                node.setID(parser.cont);
                node.addHijos((Node) cond);
                node.addHijos((Node) dg);
                RESULT = node;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("dec_while",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // dec_for ::= FOR L_PAR ID COMMA val_posicion UPTO val_posicion COMMA STEP L_PAR val_posicion R_PAR R_PAR L_KEY dec_general R_KEY 
            {
              Node RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-13)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-13)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-13)).value;
		int nm1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).left;
		int nm1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).right;
		Node nm1 = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-11)).value;
		int nm2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int nm2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		Node nm2 = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int nm3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int nm3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Node nm3 = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int dgleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dgright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Node dg = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                System.err.println("Entra a dec_for 1");
                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("dec_for");
                node.setID(parser.cont);

                parser.cont++;
                Node identificador = new Node();
                identificador.setEtiqueta("ID");
                identificador.setID(parser.cont);
                identificador.setValor(id);
                /*parser.cont++;
                Node num1 =new Node();
                num1.setEtiqueta("num");
                num1.setID(parser.cont);
                num1.setValor(nm1);
                parser.cont++;
                Node num2 =new Node();
                num2.setEtiqueta("num");
                num2.setID(parser.cont);
                num2.setValor(nm2);
                parser.cont++;
                Node num3 =new Node();
                num3.setEtiqueta("num");
                num3.setID(parser.cont);
                num3.setValor(nm3);*/     
                node.addHijos(identificador);
                node.addHijos((Node) nm1);
                node.addHijos((Node) nm2);
                node.addHijos((Node) nm3);
                node.addHijos((Node) dg);
                RESULT = node;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("dec_for",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-15)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // dec_for ::= FOR L_PAR ID COMMA val_posicion DOWNTO val_posicion COMMA STEP L_PAR val_posicion R_PAR R_PAR L_KEY dec_general R_KEY 
            {
              Node RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-13)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-13)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-13)).value;
		int nm1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).left;
		int nm1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).right;
		Node nm1 = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-11)).value;
		int nm2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int nm2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		Node nm2 = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int nm3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int nm3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Node nm3 = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int dgleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dgright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Node dg = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                System.err.println("Entra a dec_for 2");
                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("dec_for");
                node.setID(parser.cont);

                parser.cont++;
                Node identificador = new Node();
                identificador.setEtiqueta("ID");
                identificador.setID(parser.cont);
                identificador.setValor(id);
                /*parser.cont++;
                Node num1 =new Node();
                num1.setEtiqueta("num");
                num1.setID(parser.cont);
                num1.setValor(nm1);
                parser.cont++;
                Node num2 =new Node();
                num2.setEtiqueta("num");
                num2.setID(parser.cont);
                num2.setValor(nm2);
                parser.cont++;
                Node num3 =new Node();
                num3.setEtiqueta("num");
                num3.setID(parser.cont);
                num3.setValor(nm3);*/     
                node.addHijos(identificador);
                node.addHijos((Node) nm1);
                node.addHijos((Node) nm2);
                node.addHijos((Node) nm3);
                node.addHijos((Node) dg);
                RESULT = node;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("dec_for",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-15)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // dec_for ::= FOR L_PAR VARIABLE ID COLON INTEGER COMMA val_posicion UPTO val_posicion COMMA STEP L_PAR val_posicion R_PAR R_PAR L_KEY dec_general R_KEY 
            {
              Node RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-15)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-15)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-15)).value;
		int nm1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).left;
		int nm1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).right;
		Node nm1 = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-11)).value;
		int nm2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int nm2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		Node nm2 = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int nm3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int nm3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Node nm3 = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int dgleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dgright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Node dg = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                System.err.println("Entra a dec_for 3");
                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("dec_for");
                node.setID(parser.cont);

                parser.cont++;
                Node identificador = new Node();
                identificador.setEtiqueta("ID");
                identificador.setID(parser.cont);
                identificador.setValor(id);
                /*parser.cont++;
                Node num1 =new Node();
                num1.setEtiqueta("num");
                num1.setID(parser.cont);
                num1.setValor(nm1);
                parser.cont++;
                Node num2 =new Node();
                num2.setEtiqueta("num");
                num2.setID(parser.cont);
                num2.setValor(nm2);
                parser.cont++;
                Node num3 =new Node();
                num3.setEtiqueta("num");
                num3.setID(parser.cont);
                num3.setValor(nm3); */    
                node.addHijos(identificador);
                node.addHijos((Node) nm1);
                node.addHijos((Node) nm2);
                node.addHijos((Node) nm3);
                node.addHijos((Node) dg);
                RESULT = node;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("dec_for",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-18)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // dec_for ::= FOR L_PAR VARIABLE ID COLON INTEGER COMMA val_posicion DOWNTO val_posicion COMMA STEP L_PAR val_posicion R_PAR R_PAR L_KEY dec_general R_KEY 
            {
              Node RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-15)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-15)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-15)).value;
		int nm1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).left;
		int nm1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).right;
		Node nm1 = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-11)).value;
		int nm2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int nm2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		Node nm2 = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int nm3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int nm3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Node nm3 = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int dgleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dgright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Node dg = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                System.err.println("Entra a dec_for 4");
                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("dec_for");
                node.setID(parser.cont);

                parser.cont++;
                Node identificador = new Node();
                identificador.setEtiqueta("ID");
                identificador.setID(parser.cont);
                identificador.setValor(id);
               /* parser.cont++;
                Node num1 =new Node();
                num1.setEtiqueta("num");
                num1.setID(parser.cont);
                num1.setValor(nm1);
                parser.cont++;
                Node num2 =new Node();
                num2.setEtiqueta("num");
                num2.setID(parser.cont);
                num2.setValor(nm2);
                parser.cont++;
                Node num3 =new Node();
                num3.setEtiqueta("num");
                num3.setID(parser.cont);
                num3.setValor(nm3);*/     
                node.addHijos(identificador);
                node.addHijos((Node) nm1);
                node.addHijos((Node) nm2);
                node.addHijos((Node) nm3);
                node.addHijos((Node) dg);
                RESULT = node;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("dec_for",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-18)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // dec_switch ::= SWITCH L_PAR ID R_PAR L_KEY list_op R_KEY 
            {
              Node RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int loleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int loright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Node lo = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                System.err.println("Entra a dec_switch");
                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("dec_switch");
                node.setID(parser.cont);

                parser.cont++;
                Node identificador = new Node();
                identificador.setEtiqueta("ID");
                identificador.setID(parser.cont);
                identificador.setValor(id);
                node.addHijos(identificador);
                node.addHijos((Node) lo);
                RESULT = node;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("dec_switch",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // list_op ::= OPTION valor COLON dec_general new_op 
            {
              Node RESULT =null;
		int vlleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int vlright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Node vl = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int dgleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dgright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Node dg = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int nwoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nworight = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Node nwo = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                System.err.println("Entra a list_op");
                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("list_op");
                node.setID(parser.cont);
                node.addHijos((Node) vl);
                node.addHijos((Node) dg);
                node.addHijos((Node) nwo);
                RESULT = node;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("list_op",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // new_op ::= BREAK SEMICOLON list_op 
            {
              Node RESULT =null;
		int loleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int loright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Node lo = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                System.err.println("Entra a new_op 1");
                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("option");
                node.setID(parser.cont);
                node.addHijos((Node) lo);
                RESULT = node;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("new_op",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // new_op ::= BREAK SEMICOLON DEFAULT COLON dec_general 
            {
              Node RESULT =null;
		int dgleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dgright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Node dg = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                System.err.println("Entra a new_op 2");
                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("default");
                node.setID(parser.cont);
                node.addHijos((Node) dg);
                RESULT = node;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("new_op",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // new_op ::= BREAK SEMICOLON 
            {
              Node RESULT =null;
		
                System.err.println("Entra a new_op 3");
                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("new_op");
                node.setID(parser.cont);
                RESULT = node;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("new_op",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // dec_if ::= IF L_PAR condicion R_PAR L_KEY dec_general R_KEY dec_else 
            {
              Node RESULT =null;
		int condleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int condright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Node cond = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int dgleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int dgright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Node dg = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int delleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int delright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Node del = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                System.err.println("Entra a dec_if");
                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("dec_if");
                node.setID(parser.cont);
                node.addHijos((Node) cond);
                node.addHijos((Node) dg);
                node.addHijos((Node) del);
                RESULT = node;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("dec_if",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // dec_else ::= ELIF L_PAR condicion R_PAR L_KEY dec_general R_KEY dec_else 
            {
              Node RESULT =null;
		int condleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int condright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Node cond = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int dgleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int dgright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Node dg = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int delleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int delright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Node del = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                System.err.println("Entra a dec_else elif");
                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("dec_elif");
                node.setID(parser.cont);
                node.addHijos((Node) cond);
                node.addHijos((Node) dg);
                node.addHijos((Node) del);
                RESULT = node;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("dec_else",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // dec_else ::= ELSE L_KEY dec_general R_KEY 
            {
              Node RESULT =null;
		int dgleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dgright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Node dg = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                System.err.println("Entra a dec_else else");
                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("dec_else");
                node.setID(parser.cont);
                node.addHijos((Node) dg);
                RESULT = node;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("dec_else",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // dec_else ::= 
            {
              Node RESULT =null;
		
                parser.cont++;
                Node nodo = new Node();
				nodo.setEtiqueta("vacio");
				nodo.setID(parser.cont);
                RESULT = nodo;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("dec_else",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // dec_llamada_funcion ::= ID L_PAR llamada_parametros R_PAR 
            {
              Node RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int llpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int llpright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Node llp = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                System.err.println("Entra a dec_llamada_funcion");
                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("dec_llamada_funcion");
                node.setValor(id);
                node.setID(parser.cont);
                Node n_llp=(Node) llp;
                node.addHijos(n_llp);
                ArrayList<String> tipos =(ArrayList<String>)n_llp.getValue();
                Function tempo=buscaTipo2(id,false);
                ArrayList<Variable> var =(ArrayList<Variable>) tempo.getParametros();
                boolean bandera=true;

                if(tipos.size()==var.size() && !tempo.getId().equals("-1")){
                    for (int i = 0; i < var.size(); i++) {
                        if(!tipos.get(i).equals(var.get(i).getTipo())){
                            bandera=false;
                        }
                    }
                    if(bandera){
                        System.out.println("LLAMADA CORRECTA");
                    }else{
                        System.out.println("INCOMPATIBILIDAD DE TIPOS");
                    }
                }else{
                    System.out.println("diferente cantidad de parametros o no existe");
                }
                


                RESULT = node;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("dec_llamada_funcion",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // dec_llamada_funcion ::= INPUT L_PAR ID COMMA tipo R_PAR 
            {
              Node RESULT =null;
		int inleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int inright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String in = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int tipleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tipright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Node tip = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                System.err.println("Entra a func_input");
                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("func_input");
                node.setID(parser.cont);
                parser.cont++;
                Node identificador =new Node();
                identificador.setEtiqueta("ID");
                identificador.setID(parser.cont);
                identificador.setValor(id);
                node.addHijos(identificador);
                node.addHijos((Node) tip);
                RESULT = node;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("dec_llamada_funcion",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // dec_llamada_funcion ::= OUTPUT L_PAR params_output R_PAR 
            {
              Node RESULT =null;
		int outleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int outright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String out = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int llpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int llpright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Node llp = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                System.err.println("Entra a func_output ");
                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("func_output");
                node.setValor(out);
                node.setID(parser.cont);
                node.addHijos((Node) llp);
                RESULT = node;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("dec_llamada_funcion",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // dec_llamada_funcion ::= error R_PAR 
            {
              Node RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("dec_llamada_funcion",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // llamada_parametros ::= valor lista_valores 
            {
              Node RESULT =null;
		int vlleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int vlright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Node vl = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int lvleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lvright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Node lv = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                System.err.println("Entra a llamada_parametros 1");
                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("llamada_parametros");
                node.setID(parser.cont);
                Node n_vl=(Node) vl;
                Node n_lv=(Node) lv;
                node.addHijos(n_vl);
                node.addHijos(n_lv);
                ArrayList<String> tipos=(ArrayList<String>) n_lv.getValue();
                tipos.add(n_vl.getValor());
                for(String tips: tipos){
                    System.out.println(tips);
                }
                node.setValue(tipos);
                RESULT = node;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("llamada_parametros",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // llamada_parametros ::= valor 
            {
              Node RESULT =null;
		int vlleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vlright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Node vl = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                System.err.println("Entra a llamada_parametros 2");
                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("llamada_parametros");
                node.setID(parser.cont);
                Node n_vl=(Node) vl;
                node.addHijos(n_vl);
                ArrayList<String> tipos=new ArrayList();
                tipos.add(n_vl.getValor());
                for(String tips: tipos){
                    System.out.println("solo: "+tips);
                }
                node.setValue(tipos);
                RESULT = node;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("llamada_parametros",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // llamada_parametros ::= 
            {
              Node RESULT =null;
		
                System.err.println("Entra a vacio");
                parser.cont++;
                Node nodo = new Node();
				nodo.setEtiqueta("vacio");
				nodo.setID(parser.cont);
                ArrayList<String> tipos=new ArrayList();
                nodo.setValue(tipos);
                System.out.println("no llama nada");
                RESULT = nodo;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("llamada_parametros",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // params_output ::= valor lista_valores 
            {
              Node RESULT =null;
		int vlleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int vlright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Node vl = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int lvleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lvright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Node lv = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                System.err.println("Entra a llamada_parametros 1");
                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("params_output");
                node.setID(parser.cont);
                node.addHijos((Node) vl);
                node.addHijos((Node) lv);
                RESULT = node;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("params_output",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // params_output ::= valor 
            {
              Node RESULT =null;
		int vlleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vlright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Node vl = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                System.err.println("Entra a llamada_parametros 2");
                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("params_output");
                node.setID(parser.cont);
                node.addHijos((Node) vl);
                RESULT = node;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("params_output",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // lista_valores ::= COMMA valor lista_valores 
            {
              Node RESULT =null;
		int vlleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int vlright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Node vl = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int lvleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lvright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Node lv = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                System.err.println("Entra a lista_valores 1");
                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("lista_valores");
                node.setID(parser.cont);
                Node n_vl=(Node) vl;
                Node n_lv=(Node) lv;
                node.addHijos(n_vl);
                node.addHijos(n_lv);
                ArrayList<String> tipos=(ArrayList<String>) n_lv.getValue();
                tipos.add(n_vl.getValor());
                node.setValue(tipos);
                RESULT = node;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_valores",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // lista_valores ::= COMMA valor 
            {
              Node RESULT =null;
		int vlleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vlright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Node vl = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                System.err.println("Entra a lista_valores 2");
                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("lista_valores");
                node.setID(parser.cont);
                Node n_vl=(Node) vl;
                node.addHijos(n_vl);
                ArrayList<String> tipos=new ArrayList();
                tipos.add(n_vl.getValor());
                node.setValue(tipos);
                RESULT = node;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_valores",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // lista_valores ::= error COMMA 
            {
              Node RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_valores",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // condicion ::= valor_cond mas_condicion otra_condicion 
            {
              Node RESULT =null;
		int vcleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int vcright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Node vc = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int mascleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int mascright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Node masc = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int otracleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int otracright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Node otrac = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    parser.cont++;
                    Node node = new Node();
                    node.setEtiqueta("inicio_condiciones");
                    //node.setValor(vc.getValor());
                    node.setID(parser.cont);
                    node.addHijos((Node) vc);
                    node.addHijos((Node) masc);
                    node.addHijos((Node) otrac);
                    RESULT = node;
                
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("condicion",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // mas_condicion ::= OPREL valor_cond mas_condicion 
            {
              Node RESULT =null;
		int opreleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int opreright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String opre = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int vcleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int vcright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Node vc = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int mascleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int mascright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Node masc = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    parser.cont++;
                    Node node = new Node();
                    node.setEtiqueta("mas_condicion");
                    node.setID(parser.cont);
                    node.setValor(opre);
                    node.addHijos((Node) vc);
                    node.addHijos((Node) masc);
                    RESULT = node;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("mas_condicion",37, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // mas_condicion ::= 
            {
              Node RESULT =null;
		
                    parser.cont++;
                    Node nodo = new Node();
				    nodo.setEtiqueta("vacio");
				    nodo.setID(parser.cont);
                    RESULT = nodo;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("mas_condicion",37, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // otra_condicion ::= OPLOG valor_cond mas_condicion otra_condicion 
            {
              Node RESULT =null;
		int oplgleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int oplgright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String oplg = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int vcleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int vcright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Node vc = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int mascleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int mascright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Node masc = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int otracleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int otracright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Node otrac = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    parser.cont++;
                    Node node = new Node();
                    node.setEtiqueta("otra_condicion");
                    node.setID(parser.cont);
                    node.setValor(oplg);
                    node.addHijos((Node) vc);
                    node.addHijos((Node) masc);
                    node.addHijos((Node) otrac);
                    RESULT = node;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("otra_condicion",38, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // otra_condicion ::= 
            {
              Node RESULT =null;
		
                    parser.cont++;
                    Node nodo = new Node();
				    nodo.setEtiqueta("vacio");
				    nodo.setID(parser.cont);
                    RESULT = nodo;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("otra_condicion",38, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // valor_cond ::= TRUE 
            {
              Node RESULT =null;
		int truleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int truright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String tru = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                System.err.println("Entra a valor_cond 3");
                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("valor_cond");
                node.setID(parser.cont);
                
                parser.cont++;
                Node bool_true = new Node();
                bool_true.setEtiqueta("true");
                bool_true.setID(parser.cont);
                bool_true.setValor(tru);

                node.setValor(bool_true.getValor());
                RESULT = node;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("valor_cond",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // valor_cond ::= FALSE 
            {
              Node RESULT =null;
		int falsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int falsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String fals = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                System.err.println("Entra a valor_cond 4");
                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("valor");
                node.setID(parser.cont);
                
                parser.cont++;
                Node bool_false = new Node();
                bool_false.setEtiqueta("false");
                bool_false.setID(parser.cont);
                bool_false.setValor(fals);

                node.setValor(bool_false.getValor());
                RESULT = node;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("valor_cond",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // valor_cond ::= math_op 
            {
              Node RESULT =null;
		int mopleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int mopright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Node mop = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("valor");
                node.setID(parser.cont);
                node.addHijos((Node) mop);
                RESULT = node;
           
              CUP$parser$result = parser.getSymbolFactory().newSymbol("valor_cond",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // dec_return ::= RETURN valor 
            {
              Node RESULT =null;
		int vlleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vlright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Node vl = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                System.err.println("Entra a dec_return 1");
                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("dec_return");
                node.setID(parser.cont);
                node.addHijos(vl);
                RESULT = node;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("dec_return",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // dec_return ::= RETURN 
            {
              Node RESULT =null;
		
                System.err.println("Entra a dec_return 2");  
                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("dec_return");
                node.setID(parser.cont);
                RESULT = node;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("dec_return",31, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // tipo ::= BOOLEAN 
            {
              Node RESULT =null;
		
                System.err.println("Entra a tipo 1");
                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("tipo");
                node.setID(parser.cont);
                node.setValor("bool");
                RESULT = node;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo",32, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // tipo ::= CHARACTER 
            {
              Node RESULT =null;
		
                System.err.println("Entra a tipo 2");
                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("tipo");
                node.setID(parser.cont);
                node.setValor("chr");
                RESULT = node;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo",32, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // tipo ::= INTEGER 
            {
              Node RESULT =null;
		
                System.err.println("Entra a tipo 3");
                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("tipo");
                node.setID(parser.cont);
                node.setValor("int");
                RESULT = node;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo",32, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // tipo ::= VOID 
            {
              Node RESULT =null;
		
                System.err.println("Entra a tipo 4");
                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("tipo");
                node.setID(parser.cont);
                node.setValor("Void");
                RESULT = node;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo",32, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // tipo ::= STRING 
            {
              Node RESULT =null;
		  
                System.err.println("Entra a tipo 5");
                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("tipo");
                node.setID(parser.cont);
                node.setValor("string");
                RESULT = node;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo",32, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // tipo ::= FLOAT 
            {
              Node RESULT =null;
		  
                System.err.println("Entra a tipo 5");
                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("tipo");
                node.setID(parser.cont);
                node.setValor("FLOAT");
                RESULT = node;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo",32, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // val_posicion ::= math_op 
            {
              Node RESULT =null;
		int moleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int moright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Node mo = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("posicion");
                node.setID(parser.cont);
                node.addHijos((Node) mo);
                node.setValue( ((Node)mo).getValue() );
                RESULT = node;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("val_posicion",36, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
