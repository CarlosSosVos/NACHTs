
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package nachts;

import java_cup.runtime.*;
import java.util.ArrayList;
import java.util.LinkedList;
import java.util.List;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return Sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\155\000\002\002\004\000\002\002\004\000\002\003" +
    "\004\000\002\003\002\000\002\004\013\000\002\004\013" +
    "\000\002\005\010\000\002\005\007\000\002\005\003\000" +
    "\002\006\010\000\002\006\007\000\002\007\003\000\002" +
    "\007\003\000\002\010\010\000\002\011\006\000\002\011" +
    "\006\000\002\011\006\000\002\012\004\000\002\012\004" +
    "\000\002\012\004\000\002\012\004\000\002\012\004\000" +
    "\002\012\004\000\002\012\005\000\002\012\004\000\002" +
    "\012\005\000\002\012\004\000\002\012\004\000\002\012" +
    "\002\000\002\013\007\000\002\013\013\000\002\014\004" +
    "\000\002\014\010\000\002\014\013\000\002\015\004\000" +
    "\002\015\011\000\002\015\004\000\002\015\004\000\002" +
    "\015\004\000\002\015\004\000\002\015\004\000\002\015" +
    "\004\000\002\015\007\000\002\015\002\000\002\016\005" +
    "\000\002\016\002\000\002\017\006\000\002\017\013\000" +
    "\002\017\006\000\002\017\006\000\002\017\005\000\002" +
    "\020\003\000\002\020\003\000\002\020\003\000\002\020" +
    "\003\000\002\020\003\000\002\020\003\000\002\020\003" +
    "\000\002\020\010\000\002\021\003\000\002\021\003\000" +
    "\002\022\004\000\002\023\005\000\002\023\005\000\002" +
    "\023\004\000\002\024\004\000\002\025\005\000\002\025" +
    "\005\000\002\025\004\000\002\026\003\000\002\026\003" +
    "\000\002\026\003\000\002\026\005\000\002\027\011\000" +
    "\002\030\021\000\002\030\022\000\002\030\025\000\002" +
    "\030\025\000\002\031\011\000\002\032\007\000\002\033" +
    "\005\000\002\033\007\000\002\033\004\000\002\034\012" +
    "\000\002\035\004\000\002\035\006\000\002\035\002\000" +
    "\002\036\005\000\002\037\005\000\002\037\004\000\002" +
    "\037\003\000\002\040\005\000\002\040\004\000\002\042" +
    "\005\000\002\042\007\000\002\042\003\000\002\042\003" +
    "\000\002\042\005\000\002\043\003\000\002\043\003\000" +
    "\002\043\003\000\002\043\003\000\002\044\004\000\002" +
    "\044\003\000\002\045\003\000\002\045\003\000\002\045" +
    "\003\000\002\045\003\000\002\045\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0125\000\004\004\005\001\002\000\006\002\ufffe\004" +
    "\005\001\002\000\004\040\010\001\002\000\004\002\007" +
    "\001\002\000\004\002\001\001\002\000\004\057\011\001" +
    "\002\000\006\011\014\060\012\001\002\000\004\063\ufff9" +
    "\001\002\000\004\063\036\001\002\000\004\040\015\001" +
    "\002\000\004\063\016\001\002\000\014\012\020\015\017" +
    "\016\022\017\023\025\024\001\002\000\014\050\uff97\053" +
    "\uff97\060\uff97\061\uff97\062\uff97\001\002\000\014\050\uff95" +
    "\053\uff95\060\uff95\061\uff95\062\uff95\001\002\000\006\060" +
    "\026\061\025\001\002\000\014\050\uff98\053\uff98\060\uff98" +
    "\061\uff98\062\uff98\001\002\000\014\050\uff99\053\uff99\060" +
    "\uff99\061\uff99\062\uff99\001\002\000\014\050\uff96\053\uff96" +
    "\060\uff96\061\uff96\062\uff96\001\002\000\004\011\031\001" +
    "\002\000\004\063\ufffa\001\002\000\004\060\030\001\002" +
    "\000\004\063\ufffb\001\002\000\004\040\032\001\002\000" +
    "\004\063\033\001\002\000\014\012\020\015\017\016\022" +
    "\017\023\025\024\001\002\000\006\060\ufff7\061\025\001" +
    "\002\000\004\060\ufff8\001\002\000\016\012\020\015\017" +
    "\016\022\017\023\025\024\066\040\001\002\000\004\053" +
    "\u0122\001\002\000\004\053\041\001\002\000\036\003\066" +
    "\011\053\020\054\022\047\023\071\024\050\032\043\033" +
    "\072\034\052\040\056\050\073\054\uffe5\061\062\062\uffd6" +
    "\001\002\000\004\062\u0120\001\002\000\004\057\u011b\001" +
    "\002\000\042\003\066\011\053\020\054\022\047\023\071" +
    "\024\050\030\uffe5\032\043\033\072\034\052\040\056\050" +
    "\073\054\uffe5\056\uffe5\061\062\062\uffd6\001\002\000\004" +
    "\062\ufff5\001\002\000\004\062\ufff6\001\002\000\004\057" +
    "\u0114\001\002\000\022\005\104\013\116\014\111\026\112" +
    "\027\113\040\114\057\117\062\uff9a\001\002\000\042\003" +
    "\066\011\053\020\054\022\047\023\071\024\050\030\uffe5" +
    "\032\043\033\072\034\052\040\056\050\073\054\uffe5\056" +
    "\uffe5\061\062\062\uffd6\001\002\000\004\057\u0101\001\002" +
    "\000\004\040\366\001\002\000\004\057\336\001\002\000" +
    "\042\003\066\011\053\020\054\022\047\023\071\024\050" +
    "\030\uffe5\032\043\033\072\034\052\040\056\050\073\054" +
    "\uffe5\056\uffe5\061\062\062\uffd6\001\002\000\016\047\315" +
    "\050\312\051\314\052\313\057\125\065\316\001\002\000" +
    "\042\003\066\011\053\020\054\022\047\023\071\024\050" +
    "\030\uffe5\032\043\033\072\034\052\040\056\050\073\054" +
    "\uffe5\056\uffe5\061\062\062\uffd6\001\002\000\004\062\307" +
    "\001\002\000\042\003\066\011\053\020\054\022\047\023" +
    "\071\024\050\030\uffe5\032\043\033\072\034\052\040\056" +
    "\050\073\054\uffe5\056\uffe5\061\062\062\uffd6\001\002\000" +
    "\004\040\272\001\002\000\004\062\271\001\002\000\004" +
    "\054\270\001\002\000\042\003\066\011\053\020\054\022" +
    "\047\023\071\024\050\030\uffe5\032\043\033\072\034\052" +
    "\040\056\050\073\054\uffe5\056\uffe5\061\062\062\uffd6\001" +
    "\002\000\004\054\266\001\002\000\004\062\265\001\002" +
    "\000\042\003\066\011\053\020\054\022\047\023\071\024" +
    "\050\030\uffe5\032\043\033\072\034\052\040\056\050\073" +
    "\054\uffe5\056\uffe5\061\062\062\uffd6\001\002\000\004\057" +
    "\177\001\002\000\004\057\170\001\002\000\020\005\074" +
    "\013\076\014\100\026\077\027\101\040\075\053\102\001" +
    "\002\000\010\050\uffdd\061\uffdd\062\uffdd\001\002\000\014" +
    "\050\uffdf\057\125\061\uffdf\062\uffdf\065\163\001\002\000" +
    "\010\050\uffdc\061\uffdc\062\uffdc\001\002\000\010\050\uffda" +
    "\061\uffda\062\uffda\001\002\000\010\050\uffdb\061\uffdb\062" +
    "\uffdb\001\002\000\010\050\uffd9\061\uffd9\062\uffd9\001\002" +
    "\000\020\005\104\013\116\014\111\026\112\027\113\040" +
    "\114\057\117\001\002\000\010\050\uffd8\061\uffd8\062\uffd8" +
    "\001\002\000\020\045\uffbb\046\uffbb\054\uffbb\060\uffbb\061" +
    "\uffbb\062\uffbb\063\uffbb\001\002\000\020\045\uffba\046\uffba" +
    "\054\uffc9\060\uffc9\061\uffc9\062\uffc9\063\uffc9\001\002\000" +
    "\014\054\uffc6\060\uffc6\061\uffc6\062\uffc6\063\uffc6\001\002" +
    "\000\006\045\154\046\153\001\002\000\006\054\uffd4\061" +
    "\144\001\002\000\014\054\uffcd\060\uffcd\061\uffcd\062\uffcd" +
    "\063\uffcd\001\002\000\014\054\uffcc\060\uffcc\061\uffcc\062" +
    "\uffcc\063\uffcc\001\002\000\014\054\uffcb\060\uffcb\061\uffcb" +
    "\062\uffcb\063\uffcb\001\002\000\024\045\uffbc\046\uffbc\054" +
    "\uffc8\057\125\060\uffc8\061\uffc8\062\uffc8\063\uffc8\065\137" +
    "\001\002\000\014\054\uffc5\060\uffc5\061\uffc5\062\uffc5\063" +
    "\uffc5\001\002\000\014\054\uffce\060\uffce\061\uffce\062\uffce" +
    "\063\uffce\001\002\000\010\005\104\040\121\057\117\001" +
    "\002\000\014\054\uffca\060\uffca\061\uffca\062\uffca\063\uffca" +
    "\001\002\000\022\045\uffbc\046\uffbc\054\uffbc\057\125\060" +
    "\uffbc\061\uffbc\062\uffbc\063\uffbc\001\002\000\004\060\124" +
    "\001\002\000\020\045\uffba\046\uffba\054\uffba\060\uffba\061" +
    "\uffba\062\uffba\063\uffba\001\002\000\020\045\uffb9\046\uffb9" +
    "\054\uffb9\060\uffb9\061\uffb9\062\uffb9\063\uffb9\001\002\000" +
    "\022\005\104\013\116\014\111\026\112\027\113\040\114" +
    "\057\117\060\126\001\002\000\022\045\uffa7\046\uffa7\050" +
    "\uffa7\054\uffa7\060\uffa7\061\uffa7\062\uffa7\063\uffa7\001\002" +
    "\000\006\060\131\061\132\001\002\000\022\045\uffaa\046" +
    "\uffaa\050\uffaa\054\uffaa\060\uffaa\061\uffaa\062\uffaa\063\uffaa" +
    "\001\002\000\022\045\uffa8\046\uffa8\050\uffa8\054\uffa8\060" +
    "\uffa8\061\uffa8\062\uffa8\063\uffa8\001\002\000\020\005\104" +
    "\013\116\014\111\026\112\027\113\040\114\057\117\001" +
    "\002\000\004\060\134\001\002\000\022\045\uffa9\046\uffa9" +
    "\050\uffa9\054\uffa9\060\uffa9\061\uffa9\062\uffa9\063\uffa9\001" +
    "\002\000\006\060\uffa5\061\132\001\002\000\004\060\uffa6" +
    "\001\002\000\004\064\140\001\002\000\004\057\141\001" +
    "\002\000\004\005\142\001\002\000\004\060\143\001\002" +
    "\000\014\054\uffc7\060\uffc7\061\uffc7\062\uffc7\063\uffc7\001" +
    "\002\000\020\005\104\013\116\014\111\026\112\027\113" +
    "\040\114\057\117\001\002\000\004\054\146\001\002\000" +
    "\010\050\uffd7\061\uffd7\062\uffd7\001\002\000\006\054\uffd4" +
    "\061\144\001\002\000\004\054\uffd5\001\002\000\014\054" +
    "\uffc4\060\uffc4\061\uffc4\062\uffc4\063\uffc4\001\002\000\014" +
    "\054\uffc0\060\uffc0\061\uffc0\062\uffc0\063\uffc0\001\002\000" +
    "\010\005\104\040\121\057\117\001\002\000\010\005\104" +
    "\040\121\057\117\001\002\000\020\045\154\046\153\054" +
    "\uffbd\060\uffbd\061\uffbd\062\uffbd\063\uffbd\001\002\000\014" +
    "\054\uffbf\060\uffbf\061\uffbf\062\uffbf\063\uffbf\001\002\000" +
    "\014\054\uffbe\060\uffbe\061\uffbe\062\uffbe\063\uffbe\001\002" +
    "\000\020\045\154\046\153\054\uffc1\060\uffc1\061\uffc1\062" +
    "\uffc1\063\uffc1\001\002\000\014\054\uffc2\060\uffc2\061\uffc2" +
    "\062\uffc2\063\uffc2\001\002\000\014\054\uffc3\060\uffc3\061" +
    "\uffc3\062\uffc3\063\uffc3\001\002\000\004\064\164\001\002" +
    "\000\004\057\165\001\002\000\004\005\166\001\002\000" +
    "\004\060\167\001\002\000\010\050\uffde\061\uffde\062\uffde" +
    "\001\002\000\010\005\172\013\173\040\171\001\002\000" +
    "\004\060\176\001\002\000\004\060\175\001\002\000\004" +
    "\060\174\001\002\000\004\062\ufff3\001\002\000\004\062" +
    "\ufff2\001\002\000\004\062\ufff1\001\002\000\006\011\201" +
    "\040\200\001\002\000\004\061\235\001\002\000\004\040" +
    "\202\001\002\000\004\063\203\001\002\000\004\015\204" +
    "\001\002\000\004\061\205\001\002\000\004\005\206\001" +
    "\002\000\006\006\207\007\210\001\002\000\004\005\223" +
    "\001\002\000\004\005\211\001\002\000\004\061\212\001" +
    "\002\000\004\010\213\001\002\000\004\057\214\001\002" +
    "\000\004\005\215\001\002\000\004\060\216\001\002\000" +
    "\004\060\217\001\002\000\004\053\220\001\002\000\036" +
    "\003\066\011\053\020\054\022\047\023\071\024\050\032" +
    "\043\033\072\034\052\040\056\050\073\054\uffe5\061\062" +
    "\062\uffd6\001\002\000\004\054\222\001\002\000\042\003" +
    "\uffb4\011\uffb4\020\uffb4\022\uffb4\023\uffb4\024\uffb4\030\uffb4" +
    "\032\uffb4\033\uffb4\034\uffb4\040\uffb4\050\uffb4\054\uffb4\056" +
    "\uffb4\061\uffb4\062\uffb4\001\002\000\004\061\224\001\002" +
    "\000\004\010\225\001\002\000\004\057\226\001\002\000" +
    "\004\005\227\001\002\000\004\060\230\001\002\000\004" +
    "\060\231\001\002\000\004\053\232\001\002\000\036\003" +
    "\066\011\053\020\054\022\047\023\071\024\050\032\043" +
    "\033\072\034\052\040\056\050\073\054\uffe5\061\062\062" +
    "\uffd6\001\002\000\004\054\234\001\002\000\042\003\uffb5" +
    "\011\uffb5\020\uffb5\022\uffb5\023\uffb5\024\uffb5\030\uffb5\032" +
    "\uffb5\033\uffb5\034\uffb5\040\uffb5\050\uffb5\054\uffb5\056\uffb5" +
    "\061\uffb5\062\uffb5\001\002\000\004\005\236\001\002\000" +
    "\006\006\237\007\240\001\002\000\004\061\253\001\002" +
    "\000\004\005\241\001\002\000\004\061\242\001\002\000" +
    "\004\010\243\001\002\000\004\057\244\001\002\000\004" +
    "\005\245\001\002\000\004\060\246\001\002\000\004\060" +
    "\247\001\002\000\004\053\250\001\002\000\036\003\066" +
    "\011\053\020\054\022\047\023\071\024\050\032\043\033" +
    "\072\034\052\040\056\050\073\054\uffe5\061\062\062\uffd6" +
    "\001\002\000\004\054\252\001\002\000\042\003\uffb6\011" +
    "\uffb6\020\uffb6\022\uffb6\023\uffb6\024\uffb6\030\uffb6\032\uffb6" +
    "\033\uffb6\034\uffb6\040\uffb6\050\uffb6\054\uffb6\056\uffb6\061" +
    "\uffb6\062\uffb6\001\002\000\004\010\254\001\002\000\004" +
    "\057\255\001\002\000\004\005\256\001\002\000\004\060" +
    "\257\001\002\000\004\060\260\001\002\000\004\053\261" +
    "\001\002\000\036\003\066\011\053\020\054\022\047\023" +
    "\071\024\050\032\043\033\072\034\052\040\056\050\073" +
    "\054\uffe5\061\062\062\uffd6\001\002\000\004\054\263\001" +
    "\002\000\042\003\uffb7\011\uffb7\020\uffb7\022\uffb7\023\uffb7" +
    "\024\uffb7\030\uffb7\032\uffb7\033\uffb7\034\uffb7\040\uffb7\050" +
    "\uffb7\054\uffb7\056\uffb7\061\uffb7\062\uffb7\001\002\000\010" +
    "\030\uffe9\054\uffe9\056\uffe9\001\002\000\042\003\uffe2\011" +
    "\uffe2\020\uffe2\022\uffe2\023\uffe2\024\uffe2\030\uffe2\032\uffe2" +
    "\033\uffe2\034\uffe2\040\uffe2\050\uffe2\054\uffe2\056\uffe2\061" +
    "\uffe2\062\uffe2\001\002\000\010\030\uffe6\054\uffe6\056\uffe6" +
    "\001\002\000\010\030\uffec\054\uffec\056\uffec\001\002\000" +
    "\006\002\ufffc\004\ufffc\001\002\000\010\030\uffe7\054\uffe7" +
    "\056\uffe7\001\002\000\006\055\273\063\274\001\002\000" +
    "\004\005\300\001\002\000\014\012\020\015\017\016\022" +
    "\017\023\025\024\001\002\000\010\050\073\061\uffd6\062" +
    "\uffd6\001\002\000\010\050\073\061\062\062\uffd6\001\002" +
    "\000\042\003\uffe1\011\uffe1\020\uffe1\022\uffe1\023\uffe1\024" +
    "\uffe1\030\uffe1\032\uffe1\033\uffe1\034\uffe1\040\uffe1\050\uffe1" +
    "\054\uffe1\056\uffe1\061\uffe1\062\uffe1\001\002\000\004\056" +
    "\301\001\002\000\004\063\302\001\002\000\014\012\020" +
    "\015\017\016\022\017\023\025\024\001\002\000\010\050" +
    "\073\061\uffd6\062\uffd6\001\002\000\010\050\073\061\062" +
    "\062\uffd6\001\002\000\042\003\uffe0\011\uffe0\020\uffe0\022" +
    "\uffe0\023\uffe0\024\uffe0\030\uffe0\032\uffe0\033\uffe0\034\uffe0" +
    "\040\uffe0\050\uffe0\054\uffe0\056\uffe0\061\uffe0\062\uffe0\001" +
    "\002\000\010\030\uffef\054\uffef\056\uffef\001\002\000\042" +
    "\003\066\011\053\020\054\022\047\023\071\024\050\030" +
    "\uffe5\032\043\033\072\034\052\040\056\050\073\054\uffe5" +
    "\056\uffe5\061\062\062\uffd6\001\002\000\010\030\uffe8\054" +
    "\uffe8\056\uffe8\001\002\000\010\030\uffed\054\uffed\056\uffed" +
    "\001\002\000\020\005\104\013\116\014\111\026\112\027" +
    "\113\040\114\057\117\001\002\000\004\005\331\001\002" +
    "\000\020\005\104\013\116\014\111\026\112\027\113\040" +
    "\114\057\117\001\002\000\004\062\326\001\002\000\004" +
    "\064\317\001\002\000\004\057\320\001\002\000\004\005" +
    "\321\001\002\000\004\060\322\001\002\000\004\050\323" +
    "\001\002\000\020\005\104\013\116\014\111\026\112\027" +
    "\113\040\114\057\117\001\002\000\004\062\325\001\002" +
    "\000\042\003\uffd2\011\uffd2\020\uffd2\022\uffd2\023\uffd2\024" +
    "\uffd2\030\uffd2\032\uffd2\033\uffd2\034\uffd2\040\uffd2\050\uffd2" +
    "\054\uffd2\056\uffd2\061\uffd2\062\uffd2\001\002\000\042\003" +
    "\uffcf\011\uffcf\020\uffcf\022\uffcf\023\uffcf\024\uffcf\030\uffcf" +
    "\032\uffcf\033\uffcf\034\uffcf\040\uffcf\050\uffcf\054\uffcf\056" +
    "\uffcf\061\uffcf\062\uffcf\001\002\000\004\062\330\001\002" +
    "\000\042\003\uffd1\011\uffd1\020\uffd1\022\uffd1\023\uffd1\024" +
    "\uffd1\030\uffd1\032\uffd1\033\uffd1\034\uffd1\040\uffd1\050\uffd1" +
    "\054\uffd1\056\uffd1\061\uffd1\062\uffd1\001\002\000\004\062" +
    "\332\001\002\000\042\003\uffd0\011\uffd0\020\uffd0\022\uffd0" +
    "\023\uffd0\024\uffd0\030\uffd0\032\uffd0\033\uffd0\034\uffd0\040" +
    "\uffd0\050\uffd0\054\uffd0\056\uffd0\061\uffd0\062\uffd0\001\002" +
    "\000\004\062\334\001\002\000\042\003\uffd3\011\uffd3\020" +
    "\uffd3\022\uffd3\023\uffd3\024\uffd3\030\uffd3\032\uffd3\033\uffd3" +
    "\034\uffd3\040\uffd3\050\uffd3\054\uffd3\056\uffd3\061\uffd3\062" +
    "\uffd3\001\002\000\010\030\uffeb\054\uffeb\056\uffeb\001\002" +
    "\000\014\005\337\026\341\027\342\031\344\040\340\001" +
    "\002\000\010\041\uff9f\043\uff9f\060\uff9f\001\002\000\010" +
    "\041\uff9e\043\uff9e\060\uff9e\001\002\000\010\041\uff9d\043" +
    "\uff9d\060\uff9d\001\002\000\010\041\uff9c\043\uff9c\060\uff9c" +
    "\001\002\000\004\060\354\001\002\000\004\060\uffa1\001" +
    "\002\000\010\041\346\043\347\060\uffa2\001\002\000\012" +
    "\005\337\026\341\027\342\040\340\001\002\000\014\005" +
    "\337\026\341\027\342\031\344\040\340\001\002\000\004" +
    "\060\uffa0\001\002\000\006\043\352\060\uffa4\001\002\000" +
    "\014\005\337\026\341\027\342\031\344\040\340\001\002" +
    "\000\004\060\uffa3\001\002\000\004\053\355\001\002\000" +
    "\036\003\066\011\053\020\054\022\047\023\071\024\050" +
    "\032\043\033\072\034\052\040\056\050\073\054\uffe5\061" +
    "\062\062\uffd6\001\002\000\004\054\357\001\002\000\044" +
    "\003\uffab\011\uffab\020\uffab\021\360\022\uffab\023\uffab\024" +
    "\uffab\030\uffab\032\uffab\033\uffab\034\uffab\040\uffab\050\uffab" +
    "\054\uffab\056\uffab\061\uffab\062\uffab\001\002\000\006\020" +
    "\054\053\363\001\002\000\042\003\uffae\011\uffae\020\uffae" +
    "\022\uffae\023\uffae\024\uffae\030\uffae\032\uffae\033\uffae\034" +
    "\uffae\040\uffae\050\uffae\054\uffae\056\uffae\061\uffae\062\uffae" +
    "\001\002\000\042\003\uffad\011\uffad\020\uffad\022\uffad\023" +
    "\uffad\024\uffad\030\uffad\032\uffad\033\uffad\034\uffad\040\uffad" +
    "\050\uffad\054\uffad\056\uffad\061\uffad\062\uffad\001\002\000" +
    "\036\003\066\011\053\020\054\022\047\023\071\024\050" +
    "\032\043\033\072\034\052\040\056\050\073\054\uffe5\061" +
    "\062\062\uffd6\001\002\000\004\054\365\001\002\000\042" +
    "\003\uffac\011\uffac\020\uffac\022\uffac\023\uffac\024\uffac\030" +
    "\uffac\032\uffac\033\uffac\034\uffac\040\uffac\050\uffac\054\uffac" +
    "\056\uffac\061\uffac\062\uffac\001\002\000\006\055\367\063" +
    "\370\001\002\000\004\005\373\001\002\000\014\012\020" +
    "\015\017\016\022\017\023\025\024\001\002\000\010\050" +
    "\073\061\062\062\uffd6\001\002\000\042\003\uffe4\011\uffe4" +
    "\020\uffe4\022\uffe4\023\uffe4\024\uffe4\030\uffe4\032\uffe4\033" +
    "\uffe4\034\uffe4\040\uffe4\050\uffe4\054\uffe4\056\uffe4\061\uffe4" +
    "\062\uffe4\001\002\000\004\056\374\001\002\000\004\063" +
    "\375\001\002\000\014\012\020\015\017\016\022\017\023" +
    "\025\024\001\002\000\010\050\073\061\uffd6\062\uffd6\001" +
    "\002\000\010\050\073\061\062\062\uffd6\001\002\000\042" +
    "\003\uffe3\011\uffe3\020\uffe3\022\uffe3\023\uffe3\024\uffe3\030" +
    "\uffe3\032\uffe3\033\uffe3\034\uffe3\040\uffe3\050\uffe3\054\uffe3" +
    "\056\uffe3\061\uffe3\062\uffe3\001\002\000\004\040\u0102\001" +
    "\002\000\004\060\u0103\001\002\000\004\055\u0104\001\002" +
    "\000\004\036\u0105\001\002\000\020\005\104\013\116\014" +
    "\111\026\112\027\113\040\114\057\117\001\002\000\004" +
    "\056\u0107\001\002\000\042\003\uffb3\011\uffb3\020\uffb3\022" +
    "\uffb3\023\uffb3\024\uffb3\030\uffb3\032\uffb3\033\uffb3\034\uffb3" +
    "\040\uffb3\050\uffb3\054\uffb3\056\uffb3\061\uffb3\062\uffb3\001" +
    "\002\000\004\063\u0109\001\002\000\036\003\066\011\053" +
    "\020\054\022\047\023\071\024\050\030\uffe5\032\043\033" +
    "\072\034\052\040\056\050\073\061\062\062\uffd6\001\002" +
    "\000\004\030\u010c\001\002\000\004\056\uffb2\001\002\000" +
    "\004\062\u010d\001\002\000\010\036\u0105\037\u010e\056\uffaf" +
    "\001\002\000\004\063\u0110\001\002\000\004\056\uffb1\001" +
    "\002\000\036\003\066\011\053\020\054\022\047\023\071" +
    "\024\050\032\043\033\072\034\052\040\056\050\073\056" +
    "\uffe5\061\062\062\uffd6\001\002\000\004\056\uffb0\001\002" +
    "\000\010\030\uffee\054\uffee\056\uffee\001\002\000\004\062" +
    "\uff9b\001\002\000\014\005\337\026\341\027\342\031\344" +
    "\040\340\001\002\000\004\060\u0116\001\002\000\004\053" +
    "\u0117\001\002\000\036\003\066\011\053\020\054\022\047" +
    "\023\071\024\050\032\043\033\072\034\052\040\056\050" +
    "\073\054\uffe5\061\062\062\uffd6\001\002\000\004\054\u0119" +
    "\001\002\000\042\003\uffb8\011\uffb8\020\uffb8\022\uffb8\023" +
    "\uffb8\024\uffb8\030\uffb8\032\uffb8\033\uffb8\034\uffb8\040\uffb8" +
    "\050\uffb8\054\uffb8\056\uffb8\061\uffb8\062\uffb8\001\002\000" +
    "\010\030\ufff0\054\ufff0\056\ufff0\001\002\000\004\040\u011c" +
    "\001\002\000\004\061\u011d\001\002\000\014\012\020\015" +
    "\017\016\022\017\023\025\024\001\002\000\004\060\u011f" +
    "\001\002\000\004\062\ufff4\001\002\000\042\003\066\011" +
    "\053\020\054\022\047\023\071\024\050\030\uffe5\032\043" +
    "\033\072\034\052\040\056\050\073\054\uffe5\056\uffe5\061" +
    "\062\062\uffd6\001\002\000\010\030\uffea\054\uffea\056\uffea" +
    "\001\002\000\036\003\066\011\053\020\054\022\047\023" +
    "\071\024\050\032\043\033\072\034\052\040\056\050\073" +
    "\054\uffe5\061\062\062\uffd6\001\002\000\004\054\u0124\001" +
    "\002\000\006\002\ufffd\004\ufffd\001\002\000\006\002\ufffe" +
    "\004\005\001\002\000\004\002\000\001\002\000\004\002" +
    "\uffff\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0125\000\006\002\005\004\003\001\001\000\006\003" +
    "\u0125\004\u0124\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\005\012\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\045\020\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\006\026\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\045\033\001" +
    "\001\000\004\006\034\001\001\000\002\001\001\000\004" +
    "\045\036\001\001\000\002\001\001\000\002\001\001\000" +
    "\036\007\057\010\045\011\044\012\063\013\043\014\060" +
    "\015\066\017\067\027\050\030\056\031\064\034\054\036" +
    "\041\044\062\001\001\000\002\001\001\000\002\001\001" +
    "\000\036\007\057\010\045\011\044\012\u0119\013\043\014" +
    "\060\015\066\017\067\027\050\030\056\031\064\034\054" +
    "\036\041\044\062\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\016\020\u0112\021\117\022\105" +
    "\024\114\026\106\036\104\001\001\000\036\007\057\010" +
    "\045\011\044\012\u0111\013\043\014\060\015\066\017\067" +
    "\027\050\030\056\031\064\034\054\036\041\044\062\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\036\007\057\010\045\011\044\012\334\013\043\014" +
    "\060\015\066\017\067\027\050\030\056\031\064\034\054" +
    "\036\041\044\062\001\001\000\002\001\001\000\036\007" +
    "\057\010\045\011\044\012\310\013\043\014\060\015\066" +
    "\017\067\027\050\030\056\031\064\034\054\036\041\044" +
    "\062\001\001\000\002\001\001\000\036\007\057\010\045" +
    "\011\044\012\305\013\043\014\060\015\066\017\067\027" +
    "\050\030\056\031\064\034\054\036\041\044\062\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\036\007\057\010\045\011\044\012\266\013\043\014\060" +
    "\015\066\017\067\027\050\030\056\031\064\034\054\036" +
    "\041\044\062\001\001\000\002\001\001\000\002\001\001" +
    "\000\036\007\057\010\045\011\044\012\263\013\043\014" +
    "\060\015\066\017\067\027\050\030\056\031\064\034\054" +
    "\036\041\044\062\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\036\102\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\016\020\107\021\117\022\105" +
    "\024\114\026\106\036\104\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\023\150\025\151\001\001\000\004\016\144\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\014\021" +
    "\121\022\105\024\114\026\106\036\122\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\020\020\126\021\117\022\105" +
    "\024\114\026\106\036\104\037\127\001\001\000\002\001" +
    "\001\000\004\040\132\001\001\000\002\001\001\000\002" +
    "\001\001\000\016\020\134\021\117\022\105\024\114\026" +
    "\106\036\104\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\040\135\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\016\020\146\021\117\022\105\024" +
    "\114\026\106\036\104\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\016\147\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\026\157\036\122" +
    "\001\001\000\006\026\154\036\122\001\001\000\006\023" +
    "\156\025\155\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\023\161\025\160\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\036\007\057\010\045\011\044\012\220\013" +
    "\043\014\060\015\066\017\067\027\050\030\056\031\064" +
    "\034\054\036\041\044\062\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\036\007\057\010\045\011\044" +
    "\012\232\013\043\014\060\015\066\017\067\027\050\030" +
    "\056\031\064\034\054\036\041\044\062\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\036" +
    "\007\057\010\045\011\044\012\250\013\043\014\060\015" +
    "\066\017\067\027\050\030\056\031\064\034\054\036\041" +
    "\044\062\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\036\007" +
    "\057\010\045\011\044\012\261\013\043\014\060\015\066" +
    "\017\067\027\050\030\056\031\064\034\054\036\041\044" +
    "\062\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\045\274\001\001\000\004\015" +
    "\275\001\001\000\006\014\276\015\066\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\045" +
    "\302\001\001\000\004\015\303\001\001\000\006\014\304" +
    "\015\066\001\001\000\002\001\001\000\002\001\001\000" +
    "\036\007\057\010\045\011\044\012\307\013\043\014\060" +
    "\015\066\017\067\027\050\030\056\031\064\034\054\036" +
    "\041\044\062\001\001\000\002\001\001\000\002\001\001" +
    "\000\016\020\332\021\117\022\105\024\114\026\106\036" +
    "\104\001\001\000\002\001\001\000\016\020\326\021\117" +
    "\022\105\024\114\026\106\036\104\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\016\020\323\021" +
    "\117\022\105\024\114\026\106\036\104\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\042\342\043\344\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\043\350" +
    "\001\001\000\006\042\347\043\344\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\042\352\043\344\001\001" +
    "\000\002\001\001\000\002\001\001\000\036\007\057\010" +
    "\045\011\044\012\355\013\043\014\060\015\066\017\067" +
    "\027\050\030\056\031\064\034\054\036\041\044\062\001" +
    "\001\000\002\001\001\000\004\035\360\001\001\000\004" +
    "\034\361\001\001\000\002\001\001\000\002\001\001\000" +
    "\036\007\057\010\045\011\044\012\363\013\043\014\060" +
    "\015\066\017\067\027\050\030\056\031\064\034\054\036" +
    "\041\044\062\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\045\370\001" +
    "\001\000\006\014\371\015\066\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\045\375\001" +
    "\001\000\004\015\376\001\001\000\006\014\377\015\066" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\032\u0105\001\001\000\016" +
    "\020\u0107\021\117\022\105\024\114\026\106\036\104\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\036\007\057\010\045\011\044\012\u0109\013\043\014" +
    "\060\015\066\017\067\027\050\030\056\031\064\034\054" +
    "\036\041\044\062\001\001\000\004\033\u010a\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\032\u010e\001\001" +
    "\000\002\001\001\000\002\001\001\000\036\007\057\010" +
    "\045\011\044\012\u0110\013\043\014\060\015\066\017\067" +
    "\027\050\030\056\031\064\034\054\036\041\044\062\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\042\u0114\043\344\001\001\000\002\001\001\000" +
    "\002\001\001\000\036\007\057\010\045\011\044\012\u0117" +
    "\013\043\014\060\015\066\017\067\027\050\030\056\031" +
    "\064\034\054\036\041\044\062\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\045\u011d\001\001\000\002\001\001" +
    "\000\002\001\001\000\036\007\057\010\045\011\044\012" +
    "\u0120\013\043\014\060\015\066\017\067\027\050\030\056" +
    "\031\064\034\054\036\041\044\062\001\001\000\002\001" +
    "\001\000\036\007\057\010\045\011\044\012\u0122\013\043" +
    "\014\060\015\066\017\067\027\050\030\056\031\064\034" +
    "\054\036\041\044\062\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\003\u0126\004\u0124\001\001\000\002\001" +
    "\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



   ArrayList<String> errores = new ArrayList();
   public static Node root;
   public int cont = 1;
    public void report_error(String message,Object info){
                StringBuffer m=new StringBuffer("Error ");
                if(info instanceof Symbol){
                        Symbol s=((Symbol)info);

                        if(s.left>=0){
                                m.append("en linea "+(s.right+1));
                        if(s.right>=0)
                                m.append(", columna "+(s.left+1));
                        }
                }
                m.append(": "+message);
                System.err.println(m);
                errores.add(m+"");
        }

        public void report_fatal_error(String message, Object info){
                report_error("fatal"+ message, info);
                //System.exit(1);
        }

        public void unrecovered_syntax_error(Symbol cur_token){
                System.out.println(cur_token.toString());
                System.err.println("CRITICO: At line "+(cur_token.right)+", column "+cur_token.left);
                errores.add("CRITICO: At line "+(cur_token.right)+", column "+cur_token.left);
                //System.exit(1);
        }

        protected void report_expected_token_ids() {
	        List<Integer> ids = expected_token_ids();
	        LinkedList<String> list = new LinkedList<String>();
	        for (Integer expected : ids)
		        list.add(symbl_name_from_id(expected));
                System.err.println("Se esperaba cualquiera de estas: "+list);
                errores.add("Se esperaba cualquiera de estas: "+list);
	}
    



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= inicio EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Node start_val = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // inicio ::= dec_funcion dec_gen_fun 
            {
              Node RESULT =null;
		int dgleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dgright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Node dg = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int dgfleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dgfright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Node dgf = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    System.err.println("Entra a inicio");

    Node node = new Node();
    node.setEtiqueta("INICIO");
    node.setID(parser.cont);
    node.addHijos((Node) dg);
    node.addHijos((Node) dgf);
    
    parser.root = node;
    RESULT = node; 
    
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // dec_gen_fun ::= dec_funcion dec_gen_fun 
            {
              Node RESULT =null;
		int dfleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dfright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Node df = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int dgfleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dgfright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Node dgf = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                System.err.println("Entra a dec_gen_fun");

                Node node = new Node();
                RESULT = node;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("dec_gen_fun",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // dec_gen_fun ::= 
            {
              Node RESULT =null;
		
                Node node = new Node();
                RESULT = node;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("dec_gen_fun",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // dec_funcion ::= FUNCTION ID L_PAR parametros COLON tipo L_KEY dec_general R_KEY 
            {
              Node RESULT =null;
		
               System.err.println("Entra a dec_funcion");

                Node node = new Node();
                RESULT = node;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("dec_funcion",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // dec_funcion ::= FUNCTION ID L_PAR parametros COLON MAIN L_KEY dec_general R_KEY 
            {
              Node RESULT =null;
		
               System.err.println("Entra a dec_funcion");

                Node node = new Node();
                RESULT = node;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("dec_funcion",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // parametros ::= VARIABLE ID COLON tipo nuevo_parametro R_PAR 
            {
              Node RESULT =null;
		
                System.err.println("Entra a parametros 1");
                
                Node node = new Node();
                RESULT = node;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // parametros ::= VARIABLE ID COLON tipo R_PAR 
            {
              Node RESULT =null;
		
                System.err.println("Entra a parametros 1");
                Node node = new Node();
                RESULT = node;
               
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // parametros ::= R_PAR 
            {
              Node RESULT =null;
		
                System.err.println("Entra a parametros 1");
                Node node = new Node();
                RESULT = node;
               
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // nuevo_parametro ::= COMMA VARIABLE ID COLON tipo nuevo_parametro 
            {
              Node RESULT =null;
		
                System.err.println("Entra a nuevo_parametro 1");
                Node node = new Node();
                RESULT = node;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("nuevo_parametro",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // nuevo_parametro ::= COMMA VARIABLE ID COLON tipo 
            {
              Node RESULT =null;
		
                System.err.println("Entra a nuevo_parametro 2");
                Node node = new Node();
                RESULT = node;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("nuevo_parametro",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // func_lenguaje ::= func_input 
            {
              Node RESULT =null;
		
                    System.err.println("Entra a func_lenguaje 1");
                    Node node = new Node();
                    RESULT = node;
                  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("func_lenguaje",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // func_lenguaje ::= func_output 
            {
              Node RESULT =null;
		
                    System.err.println("Entra a func_lenguaje 2");
                    Node node = new Node();
                    RESULT = node;
                  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("func_lenguaje",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // func_input ::= INPUT L_PAR ID COMMA tipo R_PAR 
            {
              Node RESULT =null;
		
                System.err.println("Entra a func_input");
                Node node = new Node();
                RESULT = node;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("func_input",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // func_output ::= OUTPUT L_PAR CONSTSTRING R_PAR 
            {
              Node RESULT =null;
		
                System.err.println("Entra a func_output 1");
                Node node = new Node();
                RESULT = node;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("func_output",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // func_output ::= OUTPUT L_PAR NUM R_PAR 
            {
              Node RESULT =null;
		
                System.err.println("Entra a func_output 2");
                Node node = new Node();
                RESULT = node;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("func_output",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // func_output ::= OUTPUT L_PAR ID R_PAR 
            {
              Node RESULT =null;
		
                System.err.println("Entra a func_output 3");
                Node node = new Node();
                RESULT = node;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("func_output",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // dec_general ::= dec_variable dec_general 
            {
              Node RESULT =null;
		int dgleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dgright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Node dg = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                System.err.println("Entra a dec_general de vairable");
                Node node = new Node();
                RESULT = node;
               
              CUP$parser$result = parser.getSymbolFactory().newSymbol("dec_general",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // dec_general ::= dec_var dec_general 
            {
              Node RESULT =null;
		
                System.err.println("Entra a dec_general de vairable2");

                Node node = new Node();
                RESULT = node;
               
              CUP$parser$result = parser.getSymbolFactory().newSymbol("dec_general",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // dec_general ::= dec_while dec_general 
            {
              Node RESULT =null;
		
                System.err.println("Entra a dec_general de while");

                Node node = new Node();
                RESULT = node;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("dec_general",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // dec_general ::= dec_for dec_general 
            {
              Node RESULT =null;
		
                System.err.println("Entra a dec_general de for");
                Node node = new Node();
                RESULT = node;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("dec_general",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // dec_general ::= dec_switch dec_general 
            {
              Node RESULT =null;
		
                System.err.println("Entra a dec_general de switch");
                Node node = new Node();
                RESULT = node;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("dec_general",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // dec_general ::= dec_if dec_general 
            {
              Node RESULT =null;
		
               System.err.println("Entra a dec_general de if");
                Node node = new Node();
                RESULT = node;
               
              CUP$parser$result = parser.getSymbolFactory().newSymbol("dec_general",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // dec_general ::= dec_llamada_funcion SEMICOLON dec_general 
            {
              Node RESULT =null;
		
                System.err.println("Entra a dec_general de llamada_funcion");
                Node node = new Node();
                RESULT = node;
               
              CUP$parser$result = parser.getSymbolFactory().newSymbol("dec_general",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // dec_general ::= dec_var_inst dec_general 
            {
              Node RESULT =null;
		
                System.err.println("Entra a dec_general de dec_var_inst");
                Node node = new Node();
                RESULT = node;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("dec_general",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // dec_general ::= func_lenguaje SEMICOLON dec_general 
            {
              Node RESULT =null;
		
                System.err.println("Entra a dec_general de func_lenguaje");
                Node node = new Node();
                RESULT = node;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("dec_general",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // dec_general ::= dec_return SEMICOLON 
            {
              Node RESULT =null;
		
                System.err.println("Entra a dec_general de dec_return");
                Node node = new Node();
                RESULT = node;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("dec_general",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // dec_general ::= error R_KEY 
            {
              Node RESULT =null;
		
                System.err.println("Entra a dec_general nos vamos para el error ");
                Node node = new Node();
                RESULT = node;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("dec_general",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // dec_general ::= 
            {
              Node RESULT =null;
		
                System.err.println("Entra a dec_general a vacio");
                Node node = new Node();
                RESULT = node;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("dec_general",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // dec_variable ::= VARIABLE ID COLON tipo dec_var 
            {
              Node RESULT =null;
		
                Node node = new Node();
                RESULT = node;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("dec_variable",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // dec_variable ::= VARIABLE ID L_BRACKET NUM R_BRACKET COLON tipo dec_inst dec_var 
            {
              Node RESULT =null;
		
                Node node = new Node();
                RESULT = node;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("dec_variable",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // dec_var ::= dec_inst SEMICOLON 
            {
              Node RESULT =null;
		
                Node node = new Node();
                RESULT = node;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("dec_var",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // dec_var ::= COMMA ID COLON tipo dec_inst dec_var 
            {
              Node RESULT =null;
		
                Node node = new Node();
                RESULT = node;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("dec_var",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // dec_var ::= COMMA ID L_BRACKET NUM R_BRACKET COLON tipo dec_inst dec_var 
            {
              Node RESULT =null;
		
                Node node = new Node();
                RESULT = node;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("dec_var",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // dec_inst ::= OPASIGN ID 
            {
              Node RESULT =null;
		
                Node node = new Node();
                RESULT = node;
             
              CUP$parser$result = parser.getSymbolFactory().newSymbol("dec_inst",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // dec_inst ::= OPASIGN ID DOT AT L_PAR NUM R_PAR 
            {
              Node RESULT =null;
		
                Node node = new Node();
                RESULT = node;
             
              CUP$parser$result = parser.getSymbolFactory().newSymbol("dec_inst",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // dec_inst ::= OPASIGN NUM 
            {
              Node RESULT =null;
		
                Node node = new Node();
                RESULT = node;
             
              CUP$parser$result = parser.getSymbolFactory().newSymbol("dec_inst",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // dec_inst ::= OPASIGN CONSTSTRING 
            {
              Node RESULT =null;
		
                Node node = new Node();
                RESULT = node;
             
              CUP$parser$result = parser.getSymbolFactory().newSymbol("dec_inst",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // dec_inst ::= OPASIGN CONSTCHAR 
            {
              Node RESULT =null;
		
                Node node = new Node();
                RESULT = node;
             
              CUP$parser$result = parser.getSymbolFactory().newSymbol("dec_inst",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // dec_inst ::= OPASIGN TRUE 
            {
              Node RESULT =null;
		
                Node node = new Node();
                RESULT = node;
             
              CUP$parser$result = parser.getSymbolFactory().newSymbol("dec_inst",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // dec_inst ::= OPASIGN FALSE 
            {
              Node RESULT =null;
		
                Node node = new Node();
                RESULT = node;
             
              CUP$parser$result = parser.getSymbolFactory().newSymbol("dec_inst",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // dec_inst ::= OPASIGN dec_llamada_funcion 
            {
              Node RESULT =null;
		
                Node node = new Node();
                RESULT = node;
             
              CUP$parser$result = parser.getSymbolFactory().newSymbol("dec_inst",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // dec_inst ::= OPASIGN L_KEY valor arr_cont R_KEY 
            {
              Node RESULT =null;
		
                Node node = new Node();
                RESULT = node;
             
              CUP$parser$result = parser.getSymbolFactory().newSymbol("dec_inst",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // dec_inst ::= 
            {
              Node RESULT =null;
		
                Node node = new Node();
                RESULT = node;
             
              CUP$parser$result = parser.getSymbolFactory().newSymbol("dec_inst",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // arr_cont ::= COMMA valor arr_cont 
            {
              Node RESULT =null;
		
                Node node = new Node();
                RESULT = node;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("arr_cont",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // arr_cont ::= 
            {
              Node RESULT =null;
		
                Node node = new Node();
                RESULT = node;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("arr_cont",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // dec_var_inst ::= ID OPASIGN valor SEMICOLON 
            {
              Node RESULT =null;
		
                Node node = new Node();
                RESULT = node;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("dec_var_inst",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // dec_var_inst ::= ID DOT AT L_PAR NUM R_PAR OPASIGN valor SEMICOLON 
            {
              Node RESULT =null;
		
                Node node = new Node();
                RESULT = node;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("dec_var_inst",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // dec_var_inst ::= ID OPASIGNADD valor SEMICOLON 
            {
              Node RESULT =null;
		
                Node node = new Node();
                RESULT = node;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("dec_var_inst",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // dec_var_inst ::= ID OPASIGNMULT NUM SEMICOLON 
            {
              Node RESULT =null;
		
                Node node = new Node();
                RESULT = node;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("dec_var_inst",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // dec_var_inst ::= ID OPINC SEMICOLON 
            {
              Node RESULT =null;
		
                Node node = new Node();
                RESULT = node;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("dec_var_inst",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // valor ::= CONSTSTRING 
            {
              Node RESULT =null;
		
                Node node = new Node();
                RESULT = node;
           
              CUP$parser$result = parser.getSymbolFactory().newSymbol("valor",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // valor ::= CONSTCHAR 
            {
              Node RESULT =null;
		
                Node node = new Node();
                RESULT = node;
           
              CUP$parser$result = parser.getSymbolFactory().newSymbol("valor",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // valor ::= TRUE 
            {
              Node RESULT =null;
		
                Node node = new Node();
                RESULT = node;
           
              CUP$parser$result = parser.getSymbolFactory().newSymbol("valor",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // valor ::= FALSE 
            {
              Node RESULT =null;
		
                Node node = new Node();
                RESULT = node;
           
              CUP$parser$result = parser.getSymbolFactory().newSymbol("valor",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // valor ::= math_op 
            {
              Node RESULT =null;
		
                Node node = new Node();
                RESULT = node;
           
              CUP$parser$result = parser.getSymbolFactory().newSymbol("valor",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // valor ::= dec_llamada_funcion 
            {
              Node RESULT =null;
		
                Node node = new Node();
                RESULT = node;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("valor",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // valor ::= ID 
            {
              Node RESULT =null;
		
                Node node = new Node();
                RESULT = node;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("valor",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // valor ::= ID DOT AT L_PAR NUM R_PAR 
            {
              Node RESULT =null;
		
                Node node = new Node();
                RESULT = node;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("valor",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // math_op ::= s_op 
            {
              Node RESULT =null;
		
                Node node = new Node();
                RESULT = node;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("math_op",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // math_op ::= m_op 
            {
              Node RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("math_op",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // s_op ::= val sum_op 
            {
              Node RESULT =null;
		
                Node node = new Node();
                RESULT = node;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("s_op",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // sum_op ::= OPSUM val sum_op 
            {
              Node RESULT =null;
		
                Node node = new Node();
                RESULT = node;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sum_op",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // sum_op ::= OPSUM val mult_op 
            {
              Node RESULT =null;
		
                Node node = new Node();
                RESULT = node;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sum_op",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // sum_op ::= OPSUM val 
            {
              Node RESULT =null;
		
                Node node = new Node();
                RESULT = node;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sum_op",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // m_op ::= val mult_op 
            {
              Node RESULT =null;
		
                Node node = new Node();
                RESULT = node;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("m_op",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // mult_op ::= OPMULT val mult_op 
            {
              Node RESULT =null;
		
                Node node = new Node();
                RESULT = node;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("mult_op",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // mult_op ::= OPMULT val sum_op 
            {
              Node RESULT =null;
		
                Node node = new Node();
                RESULT = node;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("mult_op",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // mult_op ::= OPMULT val 
            {
              Node RESULT =null;
		
                Node node = new Node();
                RESULT = node;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("mult_op",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // val ::= ID 
            {
              Node RESULT =null;
		
                Node node = new Node();
                RESULT = node;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("val",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // val ::= NUM 
            {
              Node RESULT =null;
		
                Node node = new Node();
                RESULT = node;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("val",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // val ::= dec_llamada_funcion 
            {
              Node RESULT =null;
		
                Node node = new Node();
                RESULT = node;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("val",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // val ::= L_PAR math_op R_PAR 
            {
              Node RESULT =null;
		
                Node node = new Node();
                RESULT = node;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("val",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // dec_while ::= WHILE L_PAR condicion R_PAR L_KEY dec_general R_KEY 
            {
              Node RESULT =null;
		
                System.err.println("Entra a dec_while");
                Node node = new Node();
                RESULT = node;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("dec_while",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // dec_for ::= FOR L_PAR ID COMMA NUM UPTO COMMA STEP L_PAR NUM R_PAR R_PAR L_KEY dec_general R_KEY 
            {
              Node RESULT =null;
		
                System.err.println("Entra a dec_for 1");
                Node node = new Node();
                RESULT = node;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("dec_for",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-14)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // dec_for ::= FOR L_PAR ID COMMA NUM DOWNTO NUM COMMA STEP L_PAR NUM R_PAR R_PAR L_KEY dec_general R_KEY 
            {
              Node RESULT =null;
		
                System.err.println("Entra a dec_for 2");
                Node node = new Node();
                RESULT = node;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("dec_for",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-15)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // dec_for ::= FOR L_PAR VARIABLE ID COLON INTEGER COMMA NUM UPTO NUM COMMA STEP L_PAR NUM R_PAR R_PAR L_KEY dec_general R_KEY 
            {
              Node RESULT =null;
		
                System.err.println("Entra a dec_for 3");
                Node node = new Node();
                RESULT = node;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("dec_for",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-18)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // dec_for ::= FOR L_PAR VARIABLE ID COLON INTEGER COMMA NUM DOWNTO NUM COMMA STEP L_PAR NUM R_PAR R_PAR L_KEY dec_general R_KEY 
            {
              Node RESULT =null;
		
                System.err.println("Entra a dec_for 4");
                Node node = new Node();
                RESULT = node;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("dec_for",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-18)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // dec_switch ::= SWITCH L_PAR ID R_PAR L_BRACKET list_op R_BRACKET 
            {
              Node RESULT =null;
		
                System.err.println("Entra a dec_switch");
                Node node = new Node();
                RESULT = node;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("dec_switch",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // list_op ::= OPTION valor COLON dec_general new_op 
            {
              Node RESULT =null;
		
                System.err.println("Entra a list_op");
                Node node = new Node();
                RESULT = node;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("list_op",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // new_op ::= BREAK SEMICOLON list_op 
            {
              Node RESULT =null;
		
                System.err.println("Entra a new_op 1");
                Node node = new Node();
                RESULT = node;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("new_op",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // new_op ::= BREAK SEMICOLON DEFAULT COLON dec_general 
            {
              Node RESULT =null;
		
                System.err.println("Entra a new_op 2");

                Node node = new Node();
                RESULT = node;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("new_op",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // new_op ::= BREAK SEMICOLON 
            {
              Node RESULT =null;
		
                System.err.println("Entra a new_op 3");

                Node node = new Node();
                RESULT = node;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("new_op",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // dec_if ::= IF L_PAR condicion R_PAR L_KEY dec_general R_KEY dec_else 
            {
              Node RESULT =null;
		
                System.err.println("Entra a dec_if");

                Node node = new Node();
                RESULT = node;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("dec_if",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // dec_else ::= ELSE dec_if 
            {
              Node RESULT =null;
		
                System.err.println("Entra a dec_else elsif");

                Node node = new Node();
                RESULT = node;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("dec_else",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // dec_else ::= ELSE L_KEY dec_general R_KEY 
            {
              Node RESULT =null;
		
                System.err.println("Entra a dec_else else");
                Node node = new Node();
                RESULT = node;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("dec_else",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // dec_else ::= 
            {
              Node RESULT =null;
		
                System.err.println("Entra a dec_else vacio");
                Node node = new Node();
                RESULT = node;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("dec_else",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // dec_llamada_funcion ::= ID L_PAR llamada_parametros 
            {
              Node RESULT =null;
		
                System.err.println("Entra a dec_llamada_funcion");
                Node node = new Node();
                RESULT = node;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("dec_llamada_funcion",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // llamada_parametros ::= valor lista_valores R_PAR 
            {
              Node RESULT =null;
		
                System.err.println("Entra a llamada_parametros 1");
                Node node = new Node();
                RESULT = node;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("llamada_parametros",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // llamada_parametros ::= valor R_PAR 
            {
              Node RESULT =null;
		
                System.err.println("Entra a llamada_parametros 2");
                Node node = new Node();
                RESULT = node;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("llamada_parametros",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // llamada_parametros ::= R_PAR 
            {
              Node RESULT =null;
		
                System.err.println("Entra a llamada_parametros 3");
                Node node = new Node();
                RESULT = node;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("llamada_parametros",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // lista_valores ::= COMMA valor lista_valores 
            {
              Node RESULT =null;
		
                System.err.println("Entra a lista_valores 1");
                Node node = new Node();
                RESULT = node;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_valores",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // lista_valores ::= COMMA valor 
            {
              Node RESULT =null;
		
                System.err.println("Entra a lista_valores 2");

                Node node = new Node();
                RESULT = node;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_valores",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // condicion ::= valor_cond OPREL valor_cond 
            {
              Node RESULT =null;
		
                Node node = new Node();
                RESULT = node;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("condicion",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // condicion ::= valor_cond OPREL valor_cond OPLOG condicion 
            {
              Node RESULT =null;
		
                Node node = new Node();
                RESULT = node;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("condicion",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // condicion ::= valor_cond 
            {
              Node RESULT =null;
		
                Node node = new Node();
                RESULT = node;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("condicion",32, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // condicion ::= NULL 
            {
              Node RESULT =null;
		
                Node node = new Node();
                RESULT = node;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("condicion",32, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // condicion ::= valor_cond OPLOG condicion 
            {
              Node RESULT =null;
		
                Node node = new Node();
                RESULT = node;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("condicion",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // valor_cond ::= NUM 
            {
              Node RESULT =null;
		
                System.err.println("Entra a valor_cond 1");
                Node node = new Node();
                RESULT = node;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("valor_cond",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // valor_cond ::= ID 
            {
              Node RESULT =null;
		
                System.err.println("Entra a valor_cond 2");
                Node node = new Node();
                RESULT = node;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("valor_cond",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // valor_cond ::= TRUE 
            {
              Node RESULT =null;
		
                System.err.println("Entra a valor_cond 3");
                Node node = new Node();
                RESULT = node;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("valor_cond",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // valor_cond ::= FALSE 
            {
              Node RESULT =null;
		
                System.err.println("Entra a valor_cond 4");
                Node node = new Node();
                RESULT = node;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("valor_cond",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // dec_return ::= RETURN valor 
            {
              Node RESULT =null;
		
                System.err.println("Entra a dec_return 1");

                Node node = new Node();
                RESULT = node;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("dec_return",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // dec_return ::= RETURN 
            {
              Node RESULT =null;
		
                System.err.println("Entra a dec_return 2");  
                Node node = new Node();
                RESULT = node;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("dec_return",34, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // tipo ::= BOOLEAN 
            {
              Node RESULT =null;
		
                System.err.println("Entra a tipo 1");
                Node node = new Node();
                RESULT = node;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo",35, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // tipo ::= CHARACTER 
            {
              Node RESULT =null;
		
                System.err.println("Entra a tipo 2");
                Node node = new Node();
                RESULT = node;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo",35, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // tipo ::= INTEGER 
            {
              Node RESULT =null;
		
                System.err.println("Entra a tipo 3");
                Node node = new Node();
                RESULT = node;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo",35, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // tipo ::= VOID 
            {
              Node RESULT =null;
		
                System.err.println("Entra a tipo 4");
                Node node = new Node();
                RESULT = node;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo",35, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // tipo ::= STRING 
            {
              Node RESULT =null;
		  
                System.err.println("Entra a tipo 5");
                Node node = new Node();
                RESULT = node;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo",35, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
