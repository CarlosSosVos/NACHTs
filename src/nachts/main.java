/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package nachts;

import java.awt.Desktop;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.io.PrintWriter;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.filechooser.FileNameExtensionFilter;

import java.util.*;

/**
 *
 * @author k_k_r
 */
public class main extends javax.swing.JFrame {

    /**
     * Creates new form NewJFrame
     */
    public main() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated
    // <editor-fold defaultstate="collapsed" desc="Generated
    // Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        New_file_JF = new javax.swing.JFrame();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        txt_Ncode = new javax.swing.JTextArea();
        Ok_BT = new javax.swing.JButton();
        Cancel_BT = new javax.swing.JButton();
        name_tf = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        txt_code = new javax.swing.JTextArea();
        jScrollPane2 = new javax.swing.JScrollPane();
        txt_result = new javax.swing.JTextArea();
        btn_run = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        Save_BT = new javax.swing.JButton();
        btn_show_mips = new javax.swing.JButton();
        btn_show_tree = new javax.swing.JButton();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        menu_new = new javax.swing.JMenuItem();
        menu_openFile = new javax.swing.JMenuItem();
        menu_genFlex = new javax.swing.JMenuItem();
        menu_genCup = new javax.swing.JMenuItem();
        menu_lenguaje = new javax.swing.JMenuItem();

        New_file_JF.setBackground(new java.awt.Color(0, 0, 0));
        New_file_JF.addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosed(java.awt.event.WindowEvent evt) {
                New_file_JFWindowClosed(evt);
            }
        });

        jPanel2.setBackground(new java.awt.Color(0, 0, 0));

        txt_Ncode.setColumns(20);
        txt_Ncode.setRows(5);
        jScrollPane3.setViewportView(txt_Ncode);

        Ok_BT.setText("Ok");
        Ok_BT.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Ok_BTActionPerformed(evt);
            }
        });

        Cancel_BT.setText("Cancel");
        Cancel_BT.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Cancel_BTActionPerformed(evt);
            }
        });

        name_tf.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                name_tfActionPerformed(evt);
            }
        });

        jLabel3.setForeground(new java.awt.Color(255, 255, 255));
        jLabel3.setText("Nombre");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel2Layout.createSequentialGroup().addGap(29, 29, 29).addGroup(jPanel2Layout
                        .createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(jPanel2Layout.createSequentialGroup().addComponent(jLabel3)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(name_tf, javax.swing.GroupLayout.PREFERRED_SIZE, 157,
                                        javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED,
                                        javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(Cancel_BT)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED).addComponent(Ok_BT)
                                .addGap(30, 30, 30))
                        .addGroup(jPanel2Layout.createSequentialGroup()
                                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 578,
                                        javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addContainerGap(27, Short.MAX_VALUE)))));
        jPanel2Layout.setVerticalGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel2Layout.createSequentialGroup().addGap(27, 27, 27)
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 419,
                                javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(Ok_BT).addComponent(Cancel_BT)
                                .addComponent(name_tf, javax.swing.GroupLayout.PREFERRED_SIZE,
                                        javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jLabel3))
                        .addContainerGap(17, Short.MAX_VALUE)));

        javax.swing.GroupLayout New_file_JFLayout = new javax.swing.GroupLayout(New_file_JF.getContentPane());
        New_file_JF.getContentPane().setLayout(New_file_JFLayout);
        New_file_JFLayout.setHorizontalGroup(
                New_file_JFLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addComponent(jPanel2,
                        javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE));
        New_file_JFLayout.setVerticalGroup(
                New_file_JFLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addComponent(jPanel2,
                        javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE,
                        javax.swing.GroupLayout.PREFERRED_SIZE));

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(0, 0, 0));

        txt_code.setColumns(20);
        txt_code.setRows(5);
        jScrollPane1.setViewportView(txt_code);

        txt_result.setEditable(false);
        txt_result.setColumns(20);
        txt_result.setRows(5);
        jScrollPane2.setViewportView(txt_result);

        btn_run.setText("RUN");
        btn_run.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_runActionPerformed(evt);
            }
        });

        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setText("Texto de Entrada");

        jLabel2.setForeground(new java.awt.Color(255, 255, 255));
        jLabel2.setText("Salida");

        Save_BT.setText("Guardar");
        Save_BT.setEnabled(false);
        Save_BT.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Save_BTActionPerformed(evt);
            }
        });

        btn_show_mips.setText("Ver MIPS");
        btn_show_mips.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_show_mipsActionPerformed(evt);
            }
        });

        btn_show_tree.setText("Ver Arbol");
        btn_show_tree.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_show_treeActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel1Layout.createSequentialGroup().addGap(29, 29, 29).addGroup(jPanel1Layout
                        .createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 664,
                                        javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addContainerGap(22, Short.MAX_VALUE))
                        .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout
                                        .createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                        .addGroup(jPanel1Layout.createSequentialGroup()
                                                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 62,
                                                        javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED,
                                                        javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                .addComponent(Save_BT)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                                .addComponent(btn_run)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                                .addComponent(btn_show_tree)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                                .addComponent(btn_show_mips).addGap(10, 10, 10))
                                        .addGroup(jPanel1Layout
                                                .createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                .addComponent(jLabel1).addComponent(jScrollPane1,
                                                        javax.swing.GroupLayout.PREFERRED_SIZE, 664,
                                                        javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addGap(0, 0, Short.MAX_VALUE)))));
        jPanel1Layout.setVerticalGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel1Layout.createSequentialGroup().addGap(14, 14, 14).addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 446,
                                javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(Save_BT).addComponent(btn_run)
                                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 16,
                                        javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(btn_show_mips).addComponent(btn_show_tree))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 243,
                                javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)));

        jMenu1.setText("OPCIONES");
        jMenu1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenu1ActionPerformed(evt);
            }
        });

        menu_new.setAccelerator(
                javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_N, java.awt.event.InputEvent.CTRL_MASK));
        menu_new.setText("Nuevo Archivo");
        menu_new.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menu_newActionPerformed(evt);
            }
        });
        jMenu1.add(menu_new);

        menu_openFile.setAccelerator(
                javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_O, java.awt.event.InputEvent.CTRL_MASK));
        menu_openFile.setText("Abrir archivo");
        menu_openFile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menu_openFileActionPerformed(evt);
            }
        });
        jMenu1.add(menu_openFile);

        menu_genFlex.setAccelerator(
                javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_J, java.awt.event.InputEvent.CTRL_MASK));
        menu_genFlex.setText("Generar Flex");
        menu_genFlex.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menu_genFlexActionPerformed(evt);
            }
        });
        jMenu1.add(menu_genFlex);

        menu_genCup.setAccelerator(
                javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_P, java.awt.event.InputEvent.CTRL_MASK));
        menu_genCup.setText("Generar Cup");
        menu_genCup.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menu_genCupActionPerformed(evt);
            }
        });
        jMenu1.add(menu_genCup);

        menu_lenguaje.setAccelerator(
                javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_H, java.awt.event.InputEvent.CTRL_MASK));
        menu_lenguaje.setText("Manual NACHTs");
        menu_lenguaje.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menu_lenguajeActionPerformed(evt);
            }
        });
        jMenu1.add(menu_lenguaje);

        jMenuBar1.add(jMenu1);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addComponent(
                jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE));
        layout.setVerticalGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addComponent(
                jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btn_show_treeActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_btn_show_treeActionPerformed
        int ver_arbol;
        ver_arbol = JOptionPane.showOptionDialog(this, "Desea visualizar el arbol generado?", "Visualizar Arbol", 1, 2,
                null, null, null);

        if (ver_arbol == JOptionPane.OK_OPTION) {
            try {
                File imagen = new File("fotoAST.png");
                if (imagen.exists()) {
                    Desktop.getDesktop().open(imagen);
                } else {
                    JOptionPane.showMessageDialog(this, "No se ha generado ningun archivo!");
                }
            } catch (IOException ex) {
                Logger.getLogger(main.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }// GEN-LAST:event_btn_show_treeActionPerformed

    private void btn_show_mipsActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_btn_show_mipsActionPerformed
        // TODO add your handling code here:
        JOptionPane.showMessageDialog(this, "Esto aun no funciona , que te pasa!? ");
    }// GEN-LAST:event_btn_show_mipsActionPerformed

    private String getText(File file) throws FileNotFoundException, IOException {
        String out = "";

        if (file != null) {
            clear();
            BufferedReader br = new BufferedReader(new FileReader(file));
            String st;
            while ((st = br.readLine()) != null) {
                out += st + "\n";
            }
            br.close();
            this.Save_BT.setEnabled(true);
        } else {
            JOptionPane.showMessageDialog(this, "No se cargo ningun archivo");
        }
        return out;
    }

    void clear() {
        this.txt_code.setText("");
        this.txt_result.setText("");
    }

    public void generateLexer() {

        String parametros[] = { "-d", "./src/nachts/", "./src/tools/nachts.flex" };
        try {
            jflex.Main.generate(parametros);
        } catch (Exception e) {
            System.out.println(e);
        }
    }

    public void generateCup() {

        String parametros[] = { "-destdir", "src/nachts/", "-parser", "parser", "-symbols", "Sym",
                "src/tools/parser.cup" };

        try {
            java_cup.Main.main(parametros);
        } catch (Exception e) {
            System.out.println(e);
        }
    }

    private void menu_openFileActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_menu_openFileActionPerformed
        JFileChooser jfc = new JFileChooser("./test_files/");
        FileNameExtensionFilter filter = new FileNameExtensionFilter("NACHTs", "ncht");
        jfc.setFileFilter(filter);

        int op = jfc.showOpenDialog(this);
        if (op == 0) {
            this.input_file = jfc.getSelectedFile();
        }

        try {
            this.txt_code.setText(this.getText(input_file));
        } catch (FileNotFoundException ex) {
            Logger.getLogger(main.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(main.class.getName()).log(Level.SEVERE, null, ex);
        }

    }// GEN-LAST:event_menu_openFileActionPerformed

    private void menu_genFlexActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_menu_genFlexActionPerformed
        this.generateLexer();
    }// GEN-LAST:event_menu_genFlexActionPerformed

    private void jMenu1ActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_jMenu1ActionPerformed
        // TODO add your handling code here:
    }// GEN-LAST:event_jMenu1ActionPerformed

    private void btn_runActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_btn_runActionPerformed
        if (this.input_file != null) {
            BufferedReader br;
            try {
                br = new BufferedReader(new FileReader(this.input_file));
                Lexer lex2 = new Lexer(new FileReader(this.input_file));
                parser p = new parser(lex2);
                p.parse();
                // this.txt_result.setEditable(true);

                errors = "";
                this.txt_result.setText("");

                if (p.contMain == 0) {
                    errors += "NO SE DEFINIO UNA FUNCION MAIN !\n";
                }

                for (String error : lex2.errors) {
                    System.out.println(errors);
                    errors += error + "\n";
                }

                for (String error : p.errores) {
                    System.out.println(errors);
                    errors += error + "\n";
                }

                variables = p.variables;
                miArbol = p.Tree;
                funciones = p.funciones;
                Ambito = -1;
                AmbitoActual = 0;
                this.AmbitoActualR = new ArrayList();
                this.AmbitoActualR.add(0);
                this.offset = 0;
                if (errors.isEmpty()) {
                    ambito(miArbol);
                    if (errors.isEmpty()) {
                        this.bool_splitting=new ArrayList();
                        generar_cuadruplos(miArbol);
                        System.out.println(this.bool_splitting.toString());
                        this.temporales = 0;
                    }
                }

                for (int i = 0; i < variables.size(); i++) {
                    for (int j = i + 1; j < variables.size(); j++) {
                        int iguales = 0;
                        if (variables.get(i).getId().equals(variables.get(j).getId()) && variables.get(i).getAmbitos().size() == variables.get(j).getAmbitos().size()) {
                            for (int k = 0; k < variables.get(i).getAmbitos().size(); k++) {
                                if (variables.get(i).getAmbitos().get(k) == variables.get(j).getAmbitos().get(k)) {
                                    iguales++;
                                }
                            }
                            if (iguales == variables.get(i).getAmbitos().size()) {
                                System.out.println("ERROR,variable " + variables.get(i).getId() + " ya declarada");
                            }
                        }
                    }
                }
                if (!errors.isEmpty()) {
                    this.txt_result.setText(errors);
                } else {
                    this.txt_result.setText("Su codigo esta libre de errores! :D");
                }
                Graficar(recorrido(miArbol));

                for (Variable variable : variables) {
                    System.out.println(variable.toString());
                }

                for (Cuadruplo iter : cuadruplos) {
                    System.out.println(iter.toString());
                }
                cuadruplos = new ArrayList<Cuadruplo>();

            } catch (FileNotFoundException ex) {
                Logger.getLogger(main.class.getName()).log(Level.SEVERE, null, ex);
            } catch (IOException ex) {
                Logger.getLogger(main.class.getName()).log(Level.SEVERE, null, ex);
            } catch (Exception ex) {
                Logger.getLogger(main.class.getName()).log(Level.SEVERE, null, ex);
            }
        } else {
            JOptionPane.showMessageDialog(this, "Por favor, abra un archivo.", "ERROR", JOptionPane.ERROR_MESSAGE);

        }

    }// GEN-LAST:event_btn_runActionPerformed

    private void menu_newActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_menu_newActionPerformed
        // this.setVisible(false);
        this.New_file_JF.pack();
        this.New_file_JF.setVisible(true);
    }// GEN-LAST:event_menu_newActionPerformed

    private void Ok_BTActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_Ok_BTActionPerformed
        if (!name_tf.getText().equals("")) {
            Path path = Paths.get("./test_files/" + this.name_tf.getText() + ".ncht");
            try {
                Files.createDirectories(path.getParent());
                Files.createFile(path);
                PrintWriter writer = new PrintWriter(new FileWriter(path.toString(), true));
                writer.append(this.txt_Ncode.getText());
                writer.close();
                System.out.println("se creo");
                this.New_file_JF.setVisible(false);
                this.input_file = new File("./test_files/" + this.name_tf.getText() + ".ncht");
                this.txt_Ncode.setText("");
                this.name_tf.setText("");
                this.txt_code.setText(this.getText(input_file));
                this.Save_BT.setEnabled(true);
            } catch (FileNotFoundException ex) {
                Logger.getLogger(main.class.getName()).log(Level.SEVERE, null, ex);
            } catch (IOException ex) {
                Logger.getLogger(main.class.getName()).log(Level.SEVERE, null, ex);
            }

        } else {
            System.out.println("Elija un nombre valido para el archivo");
        }
    }// GEN-LAST:event_Ok_BTActionPerformed

    private void New_file_JFWindowClosed(java.awt.event.WindowEvent evt) {// GEN-FIRST:event_New_file_JFWindowClosed

    }// GEN-LAST:event_New_file_JFWindowClosed

    private void Save_BTActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_Save_BTActionPerformed
        try {
            String temp = this.txt_code.getText();
            // System.out.println("-----"+this.txt_code.getText().equals(this.getText(input_file)));
            FileOutputStream archivo = new FileOutputStream(this.input_file);
            byte[] bytesTxt = this.txt_code.getText().getBytes();
            archivo.write(bytesTxt);
            this.txt_code.setText(temp);
            System.out.println("se Modifico");
        } catch (Exception ex) {
            Logger.getLogger(main.class.getName()).log(Level.SEVERE, null, ex);
        }

    }// GEN-LAST:event_Save_BTActionPerformed

    private void Cancel_BTActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_Cancel_BTActionPerformed
        this.New_file_JF.setVisible(false);
        this.txt_Ncode.setText("");
        this.name_tf.setText("");
    }// GEN-LAST:event_Cancel_BTActionPerformed

    private void name_tfActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_name_tfActionPerformed
        // TODO add your handling code here:
    }// GEN-LAST:event_name_tfActionPerformed

    private void menu_genCupActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_menu_genCupActionPerformed
        this.generateCup();
        // TODO add your handling code here:
    }// GEN-LAST:event_menu_genCupActionPerformed

    private void menu_lenguajeActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_menu_lenguajeActionPerformed
        try {

            File htmlFile = null;
            htmlFile = new File("principal.html");
            Desktop.getDesktop().browse(htmlFile.toURI());
        } catch (IOException ex) {
            Logger.getLogger(main.class.getName()).log(Level.SEVERE, null, ex);
        }
    }// GEN-LAST:event_menu_lenguajeActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        // <editor-fold defaultstate="collapsed" desc=" Look and feel setting code
        // (optional) ">
        /*
         * If Nimbus (introduced in Java SE 6) is not available, stay with the default
         * look and feel. For details see
         * http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Windows".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        // </editor-fold>
        // </editor-fold>
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new main().setVisible(true);
            }
        });
    }

    private static String recorrido(Node raiz) {
        String cuerpo = "";
        if (raiz != null) {
            for (Node child : raiz.hijos) {
                // System.out.println("hola");
                if (child != null && child.getEtiqueta() != null) {
                    if (!(child.getEtiqueta().equals("vacio"))) {

                        cuerpo += "\"" + raiz.getID() + ". " + raiz.getEtiqueta() + " = " + raiz.getValor() + "\"->\""
                                + child.getID() + ". " + child.getEtiqueta() + " = " + child.getValor() + "\"" + "\n";

                        cuerpo += recorrido(child);
                    }
                }
            }
        }
        return cuerpo;
    }

    private static void Graficar(String cadena) {
        FileWriter fw = null;
        PrintWriter pw = null;
        String archivo = "AST.dot";
        try {
            fw = new FileWriter(archivo);
            pw = new PrintWriter(fw);
            pw.println("digraph G {");
            pw.println(cadena);
            pw.println("\n}");
            fw.close();
        } catch (Exception e) {
            System.out.println(e);
        }
        try {
            String cmd = "dot -Tpng AST.dot -o fotoAST.png";
            Runtime.getRuntime().exec(cmd);
        } catch (IOException ioe) {
            System.out.println(ioe);
        }
    }

    private void ambito(Node arbol) {

        if (arbol.getPadre() == null) {
            System.out.println(":'v");
            arbol.setAmbito(-1);
        }

        for (Node hijo : arbol.getHijos()) {
            hijo.setPadre(arbol);
            // System.out.println(hijo.getPadre().toString());
            if (hijo.getEtiqueta().equals("dec_funcion") || hijo.getEtiqueta().equals("dec_Funcion")) {
                AmbitoActual = Ambito + 1;
                Ambito = AmbitoActual;
                hijo.setAmbito(AmbitoActual);
                ArrayList<Integer> temp = new ArrayList();

                temp.add(AmbitoActual);

                // hijo.setAmbitos(AmbitoActualR);
                this.AmbitoActualR = temp;

                // this.AmbitoActualR.add(AmbitoActual);
            }
            if (hijo.getEtiqueta().equals("dec_general")) {
                ArrayList<Integer> temp = new ArrayList();

                for (Integer index : AmbitoActualR) {
                    temp.add(index);
                }

                hijo.setAmbito(AmbitoActual);
                hijo.setAmbitos(temp);
            }
            if (hijo.getEtiqueta().equals("dec_switch")) {
                ArrayList<Integer> temp = new ArrayList();
                for (Integer index : AmbitoActualR) {
                    temp.add(index);
                }

                hijo.setAmbito(AmbitoActual);
                hijo.setAmbitos(temp);

            }
            if (hijo.getEtiqueta().equals("option")) {
                hijo.setAmbito(hijo.getPadre().getAmbito());
                hijo.setAmbitos(hijo.getPadre().getAmbitos());
            }
            if (hijo.getEtiqueta().equals("dec_llamada_funcion")) {
                Comprobacion_Funciones(hijo.getValor(), (ArrayList<String>) hijo.getHijos().get(0).getValue(),
                        hijo.getLine(), hijo.getColummn());
            }
            // esto se tendra que hacer en otro metodo, esto es solo para pruebas
            if (hijo.getEtiqueta().equals("dec_var_inst")) {
                Variable temp = new Variable("-1", "-1");
                for (Variable variable : variables) {
                    if (hijo.getHijos().get(0).getValor().equals(variable.getId())) {
                        temp = variable;
                    }
                }

                boolean flag;
                int temp_ambitos;
                if (temp.getAmbitos().size() <= this.AmbitoActualR.size()) {
                    for (int i = 0; i < temp.getAmbitos().size(); i++) {
                        if (temp.getAmbitos().get(i) != this.AmbitoActualR.get(i)) {
                            flag = false;
                            System.out.println("Acceso a variables erroneo, conflicto de ambito");
                            errors += "\nAcceso a variables erroneo, conflicto de ambito | Position: " + "linea: "
                                    + hijo.getLine() + " columna: " + hijo.getColummn();
                        }
                    }
                } else {
                    System.out.println("Acceso a variables erroneo, conflicto de ambito");
                    errors += "\nAcceso a variables erroneo, conflicto de ambito | Position: " + "linea: "
                            + hijo.getLine() + " columna: " + hijo.getColummn();
                }
                /*
                 * if (hijo.getHijos().size()>1) { if (hijo.getHijos().get(1).isAritmetica()) {
                 * String tem=(String)hijo.getHijos().get(1).getValue(); String
                 * asignacion=aritmetica(tem); } }
                 */

            }

            // Agregando funcion para procesar relacionales
            // ------------------------------------------------------------------
            if (hijo.getEtiqueta().equals("val")) {

                if (hijo.isValueIsID()) {
                    // System.out.println("Entra a val " + hijo.getValor());
                    Variable temp = new Variable("-1", "-1");
                    for (Variable variable : variables) {
                        if (hijo.getValor().equals(variable.getId())) {
                            temp = variable;
                        }
                    }

                    boolean flag;
                    int temp_ambitos;
                    // System.out.println(temp.toString());
                    if (temp.getAmbitos().size() <= this.AmbitoActualR.size()) {

                        for (int i = 0; i < temp.getAmbitos().size(); i++) {
                            if (temp.getAmbitos().get(i) != this.AmbitoActualR.get(i)) {
                                flag = false;
                                System.out.println("Acceso a variables erroneo, conflicto de ambito");
                                errors += "\nAcceso a variables erroneo, conflicto de ambito | Position: " + "linea: "
                                        + hijo.getLine() + " columna: " + hijo.getColummn();
                            }
                        }
                    } else {
                        System.out.println("Acceso a variables erroneo, conflicto de ambito");
                        errors += "\nAcceso a variables erroneo, conflicto de ambito | Position: " + "linea: "
                                + hijo.getLine() + " columna: " + hijo.getColummn();
                    }

                }

            }

            if (hijo.getEtiqueta().equals("dec_variable") || hijo.getEtiqueta().equals("dec_var")) {

                // System.out.println("test " + this.AmbitoActualR.toString());
                int cont_e = 0;
                for (Variable var : variables) {
                    if (var.getId().equals(hijo.getHijos().get(0).getValor())) {

                        // System.out.println(AmbitoActual+":"+var.getId()+":"+Ambito);
                        ArrayList<Integer> temp = new ArrayList();
                        for (Integer index : AmbitoActualR) {
                            temp.add(index);
                        }

                        if (var.getAmbitos().get(0) == -1 && cont_e == 0) {
                            // System.out.println(temp);
                            var.setAmbito(AmbitoActual + "");
                            var.setAmbitos(temp);
                            cont_e = 1;
                            if (var.getTipo().equals("int")) {
                                var.setOffset(this.offset);
                                this.offset = this.offset + 4;
                                // System.out.println("entra comparacion int: " + this.offset);

                            } else if (var.getTipo().equals("chr")) {
                                var.setOffset(this.offset);
                                this.offset = this.offset + 1;
                            } else if (var.getTipo().equals("bool")) {
                                var.setOffset(this.offset);
                                this.offset = this.offset + 4;
                            } else if (var.getTipo().equals("string")) {
                                var.setOffset(this.offset);
                                this.offset = this.offset + 4;
                            }
                        }

                    }
                    if (hijo.getHijos().size() > 2) {

                        if (hijo.getHijos().get(2).getEtiqueta().equals("ID")) {
                            if (var.getId().equals(hijo.getHijos().get(2).getValor())) {

                                // System.out.println(AmbitoActual+":"+var.getId()+":"+Ambito);
                                ArrayList<Integer> temp = new ArrayList();
                                for (Integer index : AmbitoActualR) {
                                    temp.add(index);
                                }

                                if (var.getAmbitos().get(0) == -1 && cont_e == 0) {
                                    // System.out.println(temp);
                                    var.setAmbito(AmbitoActual + "");
                                    var.setAmbitos(temp);
                                    cont_e = 1;
                                    if (var.getTipo().equals("int")) {
                                        var.setOffset(this.offset);
                                        this.offset = this.offset + 4;
                                        // System.out.println("entra comparacion int: " + this.offset);

                                    } else if (var.getTipo().equals("chr")) {
                                        var.setOffset(this.offset);
                                        this.offset = this.offset + 1;
                                    } else if (var.getTipo().equals("bool")) {
                                        var.setOffset(this.offset);
                                        this.offset = this.offset + 4;
                                    } else if (var.getTipo().equals("string")) {
                                        var.setOffset(this.offset);
                                        this.offset = this.offset + 4;
                                    }
                                }
                            }
                        }
                    }
                }

            }

            String rgx = "dec_if dec_elif dec_else dec_while dec_for list_op default";
            Pattern p = Pattern.compile(hijo.getEtiqueta());
            Matcher m = p.matcher(rgx);

            if (m.find()) {
                Ambito = Ambito + 1;
                AmbitoActual = Ambito;
                hijo.setAmbito(hijo.getPadre().getAmbito());
                if (hijo.getEtiqueta().equals("dec_else") || hijo.getEtiqueta().equals("dec_elif")
                        || hijo.getEtiqueta().equals("list_op") || hijo.getEtiqueta().equals("default")) {
                    ArrayList<Integer> temp = new ArrayList();
                    for (Integer index : hijo.getPadre().getAmbitos()) {
                        temp.add(index);
                    }
                    temp.add(Ambito);
                    this.AmbitoActualR = temp;
                } else {
                    this.AmbitoActualR.add(Ambito);
                }
                hijo.setAmbitos(hijo.getPadre().getAmbitos());
            }
            if (hijo.getEtiqueta().equals("dec_return")) {
                retornos.add(hijo.getHijos().get(0).getValor());
            }

            ambito(hijo);// apartir de aqui se cierra el bloque actual y vuelve al bloque anterior

            p = Pattern.compile(hijo.getEtiqueta());
            m = p.matcher(rgx);

            if (m.find()) {
                AmbitoActual = hijo.getPadre().getAmbito();
                ArrayList<Integer> temp = new ArrayList();

                for (Integer index : hijo.getPadre().getAmbitos()) {
                    temp.add(index);
                }
                this.AmbitoActualR = temp;
            }
            if (hijo.getEtiqueta().equals("dec_funcion") || hijo.getEtiqueta().equals("dec_Funcion")) {
                boolean esMain=false;
                for (Node iter : hijo.getHijos()) {
                    if (iter.getEtiqueta().equals("Main")) {
                        esMain=true;
                    }
                }
                if (!esMain) {
                    for (String ret : retornos) {
                        if (!hijo.getHijos().get(2).getValor().equals(ret)) {
                            errors+="\nRetorno erroneo de la funcion "+hijo.getHijos().get(0).getValor();
                            retornos=new ArrayList<String>();
                        }
                    }
                }
            }
        }
    }

    private String aritmetica(String cadena) {
        boolean flag1 = true;
        boolean flag2 = true;
        boolean flag3 = true;
        int control = 0;
        String envio = "";
        for (int i = 0; i < cadena.length(); i++) {
            if (cadena.charAt(i) == '(') {
                String temp = cadena.substring(i + 1, cadena.length());
                int t = 0;
                for (int j = 0; j < temp.length(); j++) {
                    if (temp.charAt(j) == '(') {
                        control++;
                        // System.out.println("A"+i);
                    } else if (temp.charAt(j) == ')' && control == 0) {
                        envio = temp.substring(0, j);
                        t = j;
                        j = temp.length();
                        flag1 = false;
                        flag2 = false;
                        flag3 = false;
                        // System.out.println("C");
                    } else if (temp.charAt(j) == ')') {
                        control--;
                        // System.out.println("B");
                    }
                }

                String temp2 = cadena.substring(0, i);
                String temp3 = temp.substring(t + 1, temp.length());
                String retorno = aritmetica(envio);
                String temp4 = temp2 + retorno + temp3;
                i = cadena.length();
                cadena = temp4;

            }
        }
        if (flag1) {
            // System.out.println("divi");
            for (int i = 0; i < cadena.length(); i++) {
                if (cadena.charAt(i) == '/') {
                    int tempA = i - 1;
                    int p1 = 0, p2 = 0;
                    String temp1 = "";
                    if (tempA == 0) {
                        temp1 = cadena.substring(0, i);
                        p1 = 0;
                    }
                    while (tempA > -1) {
                        if (cadena.charAt(tempA) != '+' && cadena.charAt(tempA) != '*' && cadena.charAt(tempA) != '-'
                                && cadena.charAt(tempA) != '/' && tempA != 0) {
                            tempA--;
                        } else {
                            if (tempA == 0) {
                                temp1 = cadena.substring(tempA, i);
                                p1 = tempA;
                            } else {
                                temp1 = cadena.substring(tempA + 1, i);
                                p1 = tempA + 1;
                            }

                            tempA = -1;
                        }
                    }
                    int tempB = i + 1;
                    String temp2 = "";
                    if (tempB == cadena.length() - 1) {
                        temp2 = cadena.substring(i + 1, cadena.length());
                        p2 = cadena.length();
                    }
                    while (tempB < cadena.length()) {
                        if (cadena.charAt(tempB) != '+' && cadena.charAt(tempB) != '*' && cadena.charAt(tempB) != '-'
                                && cadena.charAt(tempB) != '/' && tempB != cadena.length() - 1) {
                            tempB++;
                        } else {
                            if (tempB == cadena.length() - 1) {
                                temp2 = cadena.substring(i + 1, tempB + 1);
                                p2 = tempB + 1;
                            } else {
                                temp2 = cadena.substring(i + 1, tempB);
                                p2 = tempB;
                            }

                            tempB = cadena.length();
                        }
                    }
                    i = cadena.length();
                    System.out.println(temp1 + "/" + temp2);
                    String temporal = "T" + temporales;
                    temporales++;
                    this.cuadruplos.add(new Cuadruplo("/", temp1, temp2, temporal));
                    cadena = cadena.substring(0, p1) + temporal + cadena.substring(p2, cadena.length());
                    flag2 = false;
                    flag3 = false;
                }
            }
        }
        if (flag2) {
            // System.out.println("multi");
            for (int i = 0; i < cadena.length(); i++) {
                if (cadena.charAt(i) == '*') {
                    int tempA = i - 1;
                    int p1 = 0, p2 = 0;
                    String temp1 = "";
                    if (tempA == 0) {
                        temp1 = cadena.substring(0, i);
                        p1 = 0;
                    }
                    while (tempA > -1) {
                        if (cadena.charAt(tempA) != '+' && cadena.charAt(tempA) != '*' && cadena.charAt(tempA) != '-'
                                && tempA != 0) {
                            tempA--;
                        } else {
                            if (tempA == 0) {
                                temp1 = cadena.substring(tempA, i);
                                p1 = tempA;
                            } else {
                                temp1 = cadena.substring(tempA + 1, i);
                                p1 = tempA + 1;
                            }

                            tempA = -1;
                        }
                    }
                    int tempB = i + 1;
                    String temp2 = "";
                    if (tempB == cadena.length() - 1) {
                        temp2 = cadena.substring(i + 1, cadena.length());
                        p2 = cadena.length();
                    }
                    while (tempB < cadena.length()) {
                        if (cadena.charAt(tempB) != '+' && cadena.charAt(tempB) != '*' && cadena.charAt(tempB) != '-'
                                && tempB != cadena.length() - 1) {
                            tempB++;
                        } else {
                            if (tempB == cadena.length() - 1) {
                                temp2 = cadena.substring(i + 1, tempB + 1);
                                p2 = tempB + 1;
                            } else {
                                temp2 = cadena.substring(i + 1, tempB);
                                p2 = tempB;
                            }

                            tempB = cadena.length();
                        }
                    }
                    i = cadena.length();
                    System.out.println(temp1 + "*" + temp2);
                    String temporal = "T" + temporales;
                    temporales++;
                    this.cuadruplos.add(new Cuadruplo("*", temp1, temp2, temporal));
                    cadena = cadena.substring(0, p1) + temporal + cadena.substring(p2, cadena.length());
                    flag3 = false;
                }
            }

        }
        if (flag3) {
            // System.out.println("Suma resta");
            for (int i = 0; i < cadena.length(); i++) {
                if (cadena.charAt(i) == '+' || cadena.charAt(i) == '-') {
                    String operador = "" + cadena.charAt(i);
                    int tempA = i - 1;
                    int p1 = 0, p2 = 0;
                    String temp1 = "";
                    if (tempA == 0) {
                        temp1 = cadena.substring(0, i);
                        p1 = 0;
                    }
                    while (tempA > -1) {
                        if (cadena.charAt(tempA) != '+' && cadena.charAt(tempA) != '-' && tempA != 0) {
                            tempA--;
                        } else {
                            if (tempA == 0) {
                                temp1 = cadena.substring(tempA, i);
                                p1 = tempA;
                            } else {
                                temp1 = cadena.substring(tempA + 1, i);
                                p1 = tempA + 1;
                            }

                            tempA = -1;
                        }
                    }
                    int tempB = i + 1;
                    String temp2 = "";
                    if (tempB == cadena.length() - 1) {
                        temp2 = cadena.substring(i + 1, cadena.length());
                        p2 = cadena.length();
                    }
                    while (tempB < cadena.length()) {
                        if (cadena.charAt(tempB) != '+' && cadena.charAt(tempB) != '-'
                                && tempB != cadena.length() - 1) {
                            tempB++;
                        } else {
                            if (tempB == cadena.length() - 1) {
                                temp2 = cadena.substring(i + 1, tempB + 1);
                                p2 = tempB + 1;
                            } else {
                                temp2 = cadena.substring(i + 1, tempB);
                                p2 = tempB;
                            }

                            tempB = cadena.length();
                        }
                    }
                    i = cadena.length();
                    System.out.println(temp1 + operador + temp2);
                    String temporal = "T" + temporales;
                    temporales++;
                    this.cuadruplos.add(new Cuadruplo(operador, temp1, temp2, temporal));
                    cadena = cadena.substring(0, p1) + temporal + cadena.substring(p2, cadena.length());
                    // flag3=false;
                }
            }

        }

        System.out.println("YO SOY:" + cadena);
        if (cadena.equals("T" + (temporales - 1))) {
            return cadena;
        } else {
            return aritmetica(cadena);
            // return "";
        }

    }

    public void Comprobacion_Funciones(String id, ArrayList<String> tipos, int line, int colummn) {
        System.out.println("SI, ingrese");
        boolean name = false;
        boolean total = false;
        int veces = 0;
        for (Function iter : funciones) {
            if (iter.getId().equals(id)) {
                System.out.println("SI, ingreseA");
                name = true;
                boolean bandera = false;
                if (tipos.size() == iter.getParametros().size()) {
                    System.out.println("SI, ingreseB");
                    for (int i = 0; i < tipos.size(); i++) {
                        if (!tipos.get(i).equals(iter.getParametros().get(i).getTipo())) {
                            System.out.println("SI, ingreseC");
                            bandera = true;
                        }
                    }
                } else {
                    bandera = true;
                }
                if (!bandera) {
                    System.out.println("SI, ingreseD");
                    total = true;
                    veces++;
                }
            }
        }
        if (veces > 1) {
            System.out.println("error1");
            this.errors += "\nAcceso Perdido, existen dos funciones iguales | Position: " + "linea: " + line
                    + " columna: " + colummn;
        } else if (!name && !total) {
            System.out.println("error2");
            this.errors += "\nLa llamada se hace a una funcion que no existe | Position: " + "linea: " + line
                    + " columna: " + colummn;
        } else if (name && !total) {
            System.out.println("error3");
            this.errors += "\nError en el ingreso de parametros | Position: " + "linea: " + line + " columna: "
                    + colummn;
        }
    }

    public String boolExpressions(String expression){
        String variables_substring = "";
        String symbols_substring = "";
        int labels = 1;
        int or_counter = 0;
        for (int i = 0; i< expression.length(); i++){
            char temporal_string = expression.charAt(i);
            if (temporal_string == '&' || temporal_string == '|'){
                if(expression.charAt(i+1) == '&' || expression.charAt(i+1) == '|'){
                    String temp_symbol =""+temporal_string + expression.charAt(i+1) + ",";
                    symbols_substring += temp_symbol;
                    variables_substring += ";";
                    if(temporal_string == '|'){
                        or_counter += 1;
                    }
                }
            }
            else{
                variables_substring += expression.charAt(i);
            }
        }

        String[] list_symbols = symbols_substring.split(",");
        String[] list_variables = variables_substring.split(";");
        int or_positions [];
        int or_temp = 0;
        
        for(int i = 0; i < list_variables.length; i++){

            if (i < list_variables.length -1 ){
                if(list_symbols[i].equals("&&")){
                    System.out.println("Etiqueta" + labels);
                    System.out.println("If " + list_variables[i] + " GOTO: Etiqueta" + (labels+1));
                    labels +=1;
                    if (or_counter > 0){
                        if(or_temp == 0){
                            or_temp = getNextOR(list_symbols, i);
                        }
                        System.out.println("GOTO Etiqueta" + or_temp);
                        or_temp = 0;
                    }
                    else{
                        System.out.println("GOTO EtiquetaSalida");
                    }
                }else{
                    System.out.println("Etiqueta" + labels);
                    System.out.println("If " + list_variables[i] + " GOTO: EtiquetaCodigo");
                    if (or_counter > 0){
                        if(or_temp == 0){
                            or_temp = labels + 1;
                        }
                        System.out.println("GOTO Etiqueta" + or_temp);
                        or_temp = 0;
                    }else{
                        System.out.println("GOTO EtiquetaSalida");
                    }
                    labels +=1;
                    or_counter = or_counter - 1;
                }
            }else{
                System.out.println("Etiqueta" + labels);
                System.out.println("If " + list_variables[i] + "GOTO: EtiquetaCodigo");
                System.out.println("GOTO EtiquetaSalida");
            }

        }

        return "";
    }

    public Integer getNextOR(String [] symbols, int current_position){
        int position = 1;
        for (int i=current_position; i < symbols.length; i++ ){
            if (symbols[i].equals("||")){
                position = i + 2;
                break;
            }
        }
        return position;
    }

    public String relationalExpressions(String expression) {
        int temporals = 0;
        String variables_substring = "";
        String symbols_substring = "";
        for (int i = 0; i < expression.length(); i++) {
            char temporal_string = expression.charAt(i);
            if (temporal_string == '>' || temporal_string == '<' || temporal_string == '!') {
                if (expression.charAt(i + 1) == '=') {
                    symbols_substring += (expression.charAt(i) + "=,");
                } else {
                    symbols_substring += (expression.charAt(i) + ",");
                }
                variables_substring += ";";
            } else if (temporal_string == '=') {
                if (expression.charAt(i - 1) != '>' && expression.charAt(i - 1) != '<'
                        && expression.charAt(i - 1) != '!') {
                    symbols_substring += (expression.charAt(i) + ",");
                }
                variables_substring += ";";
            } else {
                variables_substring += expression.charAt(i);
            }
        }

        String[] list_symbols = symbols_substring.split(",");
        String[] list_variables = variables_substring.split(";");

        String quad = "";
        String new_temporal = "";

        // Process any arthimetic expressions
        for (int i = 0; i < list_variables.length; i++) {
            String substring = list_variables[i];
            if (substring.contains("+") || substring.contains("-") || substring.contains("/")
                    || substring.contains("*")) {
                new_temporal = aritmetica(substring);
                list_variables[i] = new_temporal;
            }
        }
        String temporal_temp = "";
        // Process the Quads
        for (int i = 0; i < list_variables.length; i++) {
            if (i != list_variables.length - 1) {
                String op = "if" + list_symbols[i];
                String arg1 = list_variables[i];
                String arg2 = list_variables[i + 1];
                temporal_temp = "T" + Integer.toString(temporales);
                temporales += 1;
                System.out.println(op + ", " + arg1 + ", " + arg2 + ", " + temporal_temp);
                cuadruplos.add(new Cuadruplo(op, arg1, arg2, temporal_temp));
                cuadruplos.add(new Cuadruplo("GOTO", "", "", temporal_temp));
            }
            new_temporal = "";
        }
        return temporal_temp;
    }

    public String bool_expression(String expression) {
        String temp = expression;
        temp = temp.replace(" ", "");
        this.bool_splitting.add(temp);

        String retval = "";
        if (temp.contains("&&") && temp.contains("||")) {
            if (temp.indexOf("&&") > temp.indexOf("||")) {
                String etiq = "Etiq" + this.etiquetas;

                boolean revision = false;
                for (Cuadruplo iter : cuadruplos) {
                    if (iter.getResult().contains("espera")) {
                        iter.setResult(etiq);
                        revision = true;
                    }
                }
                if (revision) {
                    this.etiquetas++;
                    cuadruplos.add(new Cuadruplo(etiq, "", "", ""));
                }
            } else {
                System.out.println("que pedos de que u");
                System.out.println(cuadruplos.get(cuadruplos.size()-1).toString());
                System.out.println(etiquetas);
                
            }
        }else{
            boolean or = false;
            int check_symbol = temp.indexOf("&&");
            
            if(check_symbol == -1){
                or = true;
                check_symbol = temp.indexOf("||");
            }else if(check_symbol == -1){
                return temp;
            }
            
            if(or){
                System.out.println("ON HOLD");
                for( Cuadruplo item : cuadruplos){
                    if(item.getResult().contains("espera")){
                        System.out.println(item.toString());
                        System.out.println(cuadruplos.indexOf(item));
                    }
                }
                System.out.println("ON HOLD");

            }
            

            
            System.out.println("que pedos de que u");
            System.out.println(cuadruplos.get(cuadruplos.size()-1).toString());
            System.out.println(etiquetas);
        }

        if (temp.contains("&&")) {
            int pos_symbol = temp.indexOf("&&");
            String symbol_izq = temp.charAt(pos_symbol - 1) + "";
            String expresion_izq = "";
            String symbol_der = temp.charAt(pos_symbol + 2) + "";
            System.out.println("valor a la derecha del symbol: " + temp);
            System.out.println("valor a la derecha del symbol: " + symbol_der);
            String expresion_der = "";
            int last_index_left = 0;
            int last_index_right = 0;
            // primero encontramos los valores a la izquierda

            if (symbol_izq.equals(")")) {
                System.out.println("entro aqui: " + temp);
                int pos_open_par = findOpeningParen(temp.toCharArray(), pos_symbol - 1);
                expresion_izq = temp.substring(pos_open_par, pos_symbol - 2);
                expresion_izq.replace(" ", "");

                if (temp.charAt(pos_open_par - 1) == '!' && temp.charAt(pos_open_par + 1) == 'T') {
                    String negacion = temp.substring(pos_open_par - 1, pos_symbol);
                    System.out.println("la negacion: " + negacion);
                    expresion_izq = bool_expression(negacion);

                    System.out.println("despues de negarse: " + expresion_izq);
                    temp = temp.replace(negacion, expresion_izq);
                    System.out.println("asi queda temp: " + temp);
                    // System.exit(0);
                }

                //
            } else {
                String expr_izq = temp.substring(0, pos_symbol);
                int i = expr_izq.length() - 1;
                while (i >= 0) {

                    if (expr_izq.charAt(i) != '!' && expr_izq.charAt(i) != '|' && expr_izq.charAt(i) != '&'
                            && expr_izq.charAt(i) != '(') {
                        expresion_izq += expr_izq.charAt(i);
                    } else {
                        last_index_left = i;
                        break;
                    }
                    i--;
                }
                StringBuilder reverso = new StringBuilder(expresion_izq);
                reverso.reverse();
                expresion_izq = reverso.toString();
                expresion_izq.replace(" ", "");
                String anotador = expresion_izq;
                if (!expresion_izq.contains("T")) {
                    anotador = relationalExpressions(expresion_izq);
                }
                String etiq = "Etiq" + this.etiquetas;
                this.etiquetas++;
                cuadruplos.add(new Cuadruplo(etiq, "", "", ""));
                int veces = 0;
                for (int j = 0; j < cuadruplos.size(); j++) {
                    if (cuadruplos.get(j).getResult().equals(anotador)) {
                        if (veces == 0) {
                            cuadruplos.get(j).setResult(etiq);
                            veces++;
                        } else {
                            cuadruplos.get(j).setResult(anotador + "espera");
                        }
                    }
                }

                System.out.println("el substring joy yo: " + expresion_izq);

            }

            // luego los valores a la derecha
            if (symbol_der.equals("!")) {
                int pos_closing_par = findClosingParen(temp.toCharArray(), pos_symbol + 3);
                String negacion = temp.substring(pos_symbol + 2, pos_closing_par + 1);
                System.out.println("negacion derecha: " + negacion);

                expresion_der = bool_expression(negacion);
                temp = temp.replace(negacion, expresion_der);

            } else if (symbol_der.equals("(")) {
                int pos_closing_par = findClosingParen(temp.toCharArray(), pos_symbol + 1);
                expresion_der = temp.substring(pos_symbol + 2, pos_closing_par);

            } else {
                pos_symbol = temp.indexOf("&&");

                System.out.println("asi llega: " + temp);
                String expr_der = temp.substring(pos_symbol + 2, temp.length());

                System.out.println("asi comienza: " + expr_der);
                int i = 0;
                while (i < expr_der.length()) {
                    if (expr_der.charAt(i) != '!' && expr_der.charAt(i) != '|' && expr_der.charAt(i) != '&'
                            && expr_der.charAt(i) != ')') {
                        expresion_der += expr_der.charAt(i);
                    } else {
                        last_index_right = i;
                        break;
                    }
                    i++;
                    last_index_right = i;
                }

            }

            System.out.println("no joy yo soy: " + expresion_der);
            String anotador = relationalExpressions(expresion_der);
            System.out.println("YO SOY EL ANOTADOR2:" + anotador);
            int veces = 0;
            for (int i = 0; i < cuadruplos.size(); i++) {
                if (cuadruplos.get(i).getResult().equals(anotador)) {
                    if (veces == 0) {
                        veces++;
                    } else {
                        cuadruplos.get(i).setResult(anotador + "espera");
                    }
                }
            }
            retval = expresion_izq + "&&" + expresion_der;

            System.out.println("antes de: " + retval);
            retval = temp.replace(retval, anotador);
            System.out.println("despues de: " + retval);

            return bool_expression(retval);

            // OR
        } else if (temp.contains("||")) {
            int pos_symbol = temp.indexOf("||");
            String symbol_izq = temp.charAt(pos_symbol - 1) + "";
            String expresion_izq = "";
            String symbol_der = temp.charAt(pos_symbol + 2) + "";
            String expresion_der = "";
            int last_index_left = 0;
            int last_index_right = 0;

            // primero encontramos los valores a la izquierda
            if (symbol_izq.equals(")")) {
                System.out.println("entro aqui: " + temp);
                int pos_open_par = findOpeningParen(temp.toCharArray(), pos_symbol - 1);
                expresion_izq = temp.substring(pos_open_par, pos_symbol - 2);
                expresion_izq.replace(" ", "");

                if (temp.charAt(pos_open_par - 1) == '!' && temp.charAt(pos_open_par + 1) == 'T') {
                    String negacion = temp.substring(pos_open_par - 1, pos_symbol);
                    System.out.println("la negacion: " + negacion);
                    expresion_izq = bool_expression(negacion);

                    System.out.println("despues de negarse: " + expresion_izq);
                    temp = temp.replace(negacion, expresion_izq);
                    System.out.println("asi queda temp: " + temp);
                }

            } else {
                String expr_izq = temp.substring(0, pos_symbol);
                int i = expr_izq.length() - 1;
                while (i >= 0) {

                    if (expr_izq.charAt(i) != '!' && expr_izq.charAt(i) != '|' && expr_izq.charAt(i) != '&'
                            && expr_izq.charAt(i) != '(') {
                        expresion_izq += expr_izq.charAt(i);
                    } else {
                        last_index_left = i;
                        break;
                    }
                    i--;
                }
                StringBuilder reverso = new StringBuilder(expresion_izq);
                reverso.reverse();
                expresion_izq = reverso.toString();
                expresion_izq.replace(" ", "");
                String anotador = expresion_izq;
                if (!expresion_izq.contains("T")) {
                    anotador = relationalExpressions(expresion_izq);
                }
                String etiq = "Etiq" + this.etiquetas;
                this.etiquetas++;
                cuadruplos.add(new Cuadruplo(etiq, "", "", ""));
                int veces = 0;
                for (int j = 0; j < cuadruplos.size(); j++) {
                    if (cuadruplos.get(j).getResult().equals(anotador)) {
                        if (veces == 0 && !cuadruplos.get(j).getOperator().equals("GOTO")) {
                            cuadruplos.get(j).setResult("Etiqueta de entrada");
                            veces++;
                        } else {
                            cuadruplos.get(j).setResult(etiq);
                        }
                    }
                }
                System.out.println("el substring joy yo: " + expresion_izq);

            }

            // luego los valores a la derecha
            if (symbol_der.equals("!")) {
                int pos_closing_par = findClosingParen(temp.toCharArray(), pos_symbol + 3);
                String negacion = temp.substring(pos_symbol + 2, pos_closing_par + 1);
                System.out.println("negacion derecha: " + negacion);

                expresion_der = bool_expression(negacion);
                temp = temp.replace(negacion, expresion_der);

            } else if (symbol_der.equals("(")) {
                int pos_closing_par = findClosingParen(temp.toCharArray(), pos_symbol + 1);
                expresion_der = temp.substring(pos_symbol + 1, pos_closing_par);

            } else {
                String expr_der = temp.substring(pos_symbol + 2, temp.length());
                int i = 0;
                while (i < expr_der.length()) {
                    if (expr_der.charAt(i) != '!' && expr_der.charAt(i) != '|' && expr_der.charAt(i) != '&'
                            && expr_der.charAt(i) != ')') {
                        expresion_der += expr_der.charAt(i);
                    } else {
                        last_index_right = i;
                        break;
                    }
                    i++;
                    last_index_right = i;
                }
            }
            System.out.println("no joy yo soy: " + expresion_der);
            String anotador = expresion_der;
            if (!expresion_der.contains("T")) {
                anotador = relationalExpressions(expresion_der);
            }
            String etiq = "Etiq" + this.etiquetas;
            int veces = 0;
            for (int j = 0; j < cuadruplos.size(); j++) {
                if (cuadruplos.get(j).getResult().equals(anotador)) {
                    if (veces == 0 && !cuadruplos.get(j).getOperator().equals("GOTO")) {
                        cuadruplos.get(j).setResult("Etiqueta de entrada");
                        veces++;
                    }
                }
            }

            retval = expresion_izq + "||" + expresion_der;

            System.out.println("antes de: " + retval);
            retval = temp.replace(retval, anotador);
            System.out.println("despues de: " + retval);

            return bool_expression(retval);

        } else if (temp.contains("!")) {
            int pos_closing_par = -1;
            int pos_symbol = temp.lastIndexOf("!");
            char validator = temp.charAt(pos_symbol + 1);

            if (validator != '=') {

                int pos_open_par = pos_symbol + 1;
                if (validator == '(') {
                    System.out.println("entra al validator");
                    pos_open_par = temp.lastIndexOf("!") + 1;
                }

                System.out.println("que pedos: " + pos_symbol);
                System.out.println("que pedos con la string lol: " + temp);

                if (pos_open_par >= 0) {
                    pos_closing_par = findClosingParen(temp.toCharArray(), pos_open_par);
                }
                System.out.println(pos_closing_par);

                if (pos_closing_par >= 0) {
                    retval = temp.substring(pos_symbol, pos_closing_par + 1);
                } else {
                    retval = temp.substring(pos_symbol, pos_symbol + 2);
                }
                System.out.println("antes de reemplazar la negada: " + retval);
                retval = temp.replace(retval, "T3");
                System.out.println(retval);
                System.out.println("SE ENCONTRO UN NOT");
                System.out.println("retorno negacion: " + retval);
                bool_expression(retval);
            }

        } else {
            return temp;
        }
        return retval;
    }

    public static int findClosingParen(char[] text, int openPos) {
        int closePos = openPos;
        int counter = 1;
        while (counter > 0) {
            char c = text[++closePos];
            if (c == '(') {
                counter++;
            } else if (c == ')') {
                counter--;
            }
        }
        return closePos;
    }

    public static int findOpeningParen(char[] text, int closePos) {
        int openPos = closePos;
        int counter = 1;
        while (counter > 0) {
            char c = text[--openPos];
            if (c == '(') {
                counter--;
            } else if (c == ')') {
                counter++;
            }
        }
        return openPos;
    }

    public void generar_cuadruplos(Node arbol) {
        for (Node hijo : arbol.getHijos()) {

            if (hijo.getEtiqueta().equals("dec_var_inst")) {
                String asignacion = "";
                if (hijo.getHijos().size() > 1) {
                    if (hijo.getHijos().get(1).isAritmetica()) {
                        String tem = (String) hijo.getHijos().get(1).getValue();
                        asignacion = aritmetica(tem);
                    } else {
                        asignacion = "" + hijo.getHijos().get(1).getValue();
                        ;
                    }
                } else {
                    String t = "T" + temporales;
                    cuadruplos.add(new Cuadruplo("+", hijo.getHijos().get(0).getValor(), "1", t));
                    asignacion = t;
                }
                if (!asignacion.isEmpty()) {

                    String t = hijo.getHijos().get(0).getValor();
                    cuadruplos.add(new Cuadruplo("=", asignacion, "", t));
                }

            }
            if (hijo.getEtiqueta().equals("dec_inst")) {
                String asignacion = "";
                if (hijo.getValor().equals("int")) {
                    if (hijo.getHijos().get(0).isAritmetica()) {
                        String tem = (String) hijo.getHijos().get(0).getValue();
                        asignacion = aritmetica(tem);
                    } else {
                        asignacion = "" + hijo.getHijos().get(0).getValue();
                    }
                } else {
                    asignacion = "" + hijo.getValue();
                }
                if (!asignacion.isEmpty()) {
                    String t = hijo.getPadre().getPadre().getHijos().get(0).getValor();
                    cuadruplos.add(new Cuadruplo("=", asignacion, "", t));
                }
            }
            if (hijo.getEtiqueta().equals("dec_while")) {
                cuadruplos.add(new Cuadruplo(("Etiq" + this.etiquetas), "", "", ""));
                this.etiquetas++;
                bool_expression((String) hijo.getHijos().get(0).getValue());
            }
            generar_cuadruplos(hijo);
        }
    }
    // public void transicion_rel_bool(String cadena){
    //

    // }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton Cancel_BT;
    private javax.swing.JFrame New_file_JF;
    private javax.swing.JButton Ok_BT;
    private javax.swing.JButton Save_BT;
    private javax.swing.JButton btn_run;
    private javax.swing.JButton btn_show_mips;
    private javax.swing.JButton btn_show_tree;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JMenuItem menu_genCup;
    private javax.swing.JMenuItem menu_genFlex;
    private javax.swing.JMenuItem menu_lenguaje;
    private javax.swing.JMenuItem menu_new;
    private javax.swing.JMenuItem menu_openFile;
    private javax.swing.JTextField name_tf;
    private javax.swing.JTextArea txt_Ncode;
    private javax.swing.JTextArea txt_code;
    private javax.swing.JTextArea txt_result;
    // End of variables declaration//GEN-END:variables
    private File input_file;
    Node miArbol;
    ArrayList<Variable> variables = new ArrayList();
    ArrayList<Function> funciones = new ArrayList();
    ArrayList<Cuadruplo> cuadruplos = new ArrayList();
    ArrayList<String> bool_splitting = new ArrayList();

    int profundidad = 0;
    int Ambito = -1;
    int AmbitoActual = 0;
    ArrayList<Integer> AmbitoActualR;
    ArrayList<String> retornos=new  ArrayList<String>();
    int offset = 0;
    String errors = "";
    int temporales = 0;
    int etiquetas = 0;
}
