package nachts;
import java_cup.runtime.*;
import java.util.ArrayList;
import java.util.LinkedList;
import java.util.List;

parser code {:
   ArrayList<String> errores = new ArrayList();
   Node Tree  = new Node();
   int cont=0;
   int contMain=0;


    public void report_error(String message,Object info){
                StringBuffer m=new StringBuffer("Error ");
                if(info instanceof Symbol){
                        Symbol s=((Symbol)info);
                      
                        if(s.left>=0){
                                m.append("en linea "+(s.right+1));
                        if(s.right>=0)
                                m.append(", columna "+(s.left+1));
                        }
                }
                m.append(": "+message);
                System.err.println(m);
                errores.add(m+"");

                

        }

        public void report_fatal_error(String message, Object info){
                report_error("fatal"+ message, info);
                //System.exit(1);
        }

        public void unrecovered_syntax_error(Symbol cur_token){
               // System.out.println(cur_token.toString());
                System.err.println("CRITICO: At line "+(cur_token.right)+", column "+cur_token.left);
                errores.add("CRITICO: At line "+(cur_token.right)+", column "+cur_token.left);
                //System.exit(1);
        }

        protected void report_expected_token_ids() {
	        List<Integer> ids = expected_token_ids();
	        LinkedList<String> list = new LinkedList<String>();
	        for (Integer expected : ids)
		        list.add(symbl_name_from_id(expected));
                System.err.println("Se esperaba cualquiera de estas: "+list);
                errores.add("Se esperaba cualquiera de estas: "+list);
	}
    

:}
action code {:
    
    
:}

terminal String FUNCTION,NUM,UPTO,DOWNTO,STEP,VARIABLE,STRING,ELIF,FLOAT, FLOAT_VAL,
                CONSTSTRING,CONSTCHAR,INTEGER,CHARACTER,BOOLEAN,IF,ELSE,
                WHILE,FOR,RETURN,VOID,TRUE,FALSE,BREAK,NULL,
                INPUT,OUTPUT,SWITCH,CASE,OPTION,DEFAULT,ID,
                OPREL,OPCOND,OPLOG,OPMOD,OPMULT,OPSUM,OPINC,OPASIGN,
                OPASIGNADD,OPASIGNMULT,L_KEY,R_KEY,L_BRACKET,R_BRACKET,
                L_PAR,R_PAR,COMMA,SEMICOLON,COLON,AT,DOT,MAIN;

non terminal Node inicio,dec_gen_fun,dec_funcion,parametros,/*lista_parametro,
             def_parametro,*/nuevo_parametro,func_lenguaje,func_input,
             func_output,dec_general,dec_variable,dec_var,dec_inst,
             arr_cont,dec_var_inst,valor,math_op,s_op,sum_op,m_op,mult_op,
             val,dec_while,dec_for,dec_switch,list_op,new_op,dec_if,
             dec_else,dec_llamada_funcion,llamada_parametros,
             lista_valores,fin_llamada,condicion,valor_cond,dec_return,
             tipo,arreglo,arreglo2d,arr2_cont;

precedence left OPSUM,OPMULT;
precedence left OPASIGN;

start with inicio;

inicio ::= dec_funcion:dg dec_gen_fun:dgf
    {:
    System.err.println("Entra a inicio");
    parser.cont++;
    Node node = new Node();
    node.setEtiqueta("INICIO");
    node.setID(parser.cont);
    node.addHijos((Node) dg);
    node.addHijos((Node) dgf);
    
    parser.Tree = node;
    RESULT = node; 
    
    :} ;

dec_gen_fun ::= dec_funcion:df dec_gen_fun:dgf
            {:
                System.err.println("Entra a dec_gen_fun");
                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("dec_gen_fun");
                node.setID(parser.cont);
                node.addHijos((Node) df);
                node.addHijos((Node) dgf);  
                
                RESULT = node;
            :}
            | 
            {:
                parser.cont++;
                Node nodo = new Node();
				nodo.setEtiqueta("vacio");
				nodo.setID(parser.cont);
				
                RESULT = nodo;
            :}
;

dec_funcion ::= FUNCTION ID:id L_PAR parametros:parts R_PAR COLON tipo:tip L_KEY dec_general:deG R_KEY
            {:
               System.err.println("Entra a dec_funcion");
                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("dec_funcion");
                node.setID(parser.cont);

                parser.cont++;
                Node identificador =new Node();
                identificador.setEtiqueta("ID");
                identificador.setID(parser.cont);
                identificador.setValor(id);
                node.addHijos(identificador);
                node.addHijos((Node) parts);
                node.addHijos((Node) tip);
                node.addHijos((Node) deG);

                
                RESULT = node;
            :}
            |FUNCTION ID:id L_PAR parametros:parts R_PAR COLON MAIN L_KEY dec_general:deG R_KEY
            {:
               
                System.err.println("Entra a dec_funcion");
            
                parser.contMain++;
                if(parser.contMain>1){
                    parser.errores.add("Error! Se ha encontrado otra declaracion de main.");
                }
               
                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("dec_Funcion");
                node.setID(parser.cont);

                parser.cont++;
                Node identificador =new Node();
                identificador.setEtiqueta("ID");
                identificador.setID(parser.cont);
                identificador.setValor(id);
                parser.cont++;
                Node main =new Node();
                main.setEtiqueta("Main");
                main.setID(parser.cont);
                main.setValor("Main");

                
                node.addHijos(identificador);
                node.addHijos((Node) parts);
                node.addHijos(main);
                node.addHijos((Node) deG);
                RESULT = node;
            :}
            
;

parametros ::= VARIABLE ID:id COLON tipo:tip nuevo_parametro:nuP
                {:
                System.err.println("Entra a parametros 1");

                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("parametros");
                node.setID(parser.cont);

                parser.cont++;
                Node identificador =new Node();
                identificador.setEtiqueta("ID");
                identificador.setID(parser.cont);
                identificador.setValor(id);
                node.addHijos(identificador);
                node.addHijos((Node) tip);
                node.addHijos((Node) nuP);
                
                RESULT = node;
                :}
               |VARIABLE ID:id COLON tipo:tip
               {:
                System.err.println("Entra a parametros 1");

                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("parametros");
                node.setID(parser.cont);

                parser.cont++;
                Node identificador =new Node();
                identificador.setEtiqueta("ID");
                identificador.setID(parser.cont);
                identificador.setValor(id);
                node.addHijos(identificador);
                node.addHijos((Node) tip);

                RESULT = node;
               :} 
               |
               {:
                System.err.println("Entra a vacio");

                parser.cont++;
                Node nodo = new Node();
				nodo.setEtiqueta("vacio");
				nodo.setID(parser.cont);
                RESULT = nodo;
               :} ;

nuevo_parametro ::=COMMA VARIABLE ID:id COLON tipo:tip nuevo_parametro:nuP
                {:
                System.err.println("Entra a nuevo_parametro 1");

                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("nuevo_parametro");
                node.setID(parser.cont);

                parser.cont++;
                Node identificador =new Node();
                identificador.setEtiqueta("ID");
                identificador.setID(parser.cont);
                identificador.setValor(id);
                node.addHijos(identificador);
                node.addHijos((Node) tip);
                node.addHijos((Node) nuP);

                RESULT = node;
                :}
                | COMMA VARIABLE ID:id COLON tipo:tip
                {:
                System.err.println("Entra a nuevo_parametro 2");
                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("nuevo_parametro");
                node.setID(parser.cont);

                parser.cont++;
                Node identificador =new Node();
                identificador.setEtiqueta("ID");
                identificador.setID(parser.cont);
                identificador.setValor(id);
                node.addHijos(identificador);
                node.addHijos((Node) tip);
                RESULT = node;
                :};

func_lenguaje ::= func_input:fuI
                  {:
                    System.err.println("Entra a func_lenguaje 1");
                    parser.cont++;
                    Node node = new Node();
                    node.setEtiqueta("func_lenguaje");
                    node.setID(parser.cont);
                    node.addHijos((Node) fuI);
                    RESULT = node;
                  :}
                  | func_output:fuO
                  {:
                    System.err.println("Entra a func_lenguaje 2");
                    parser.cont++;
                    Node node = new Node();
                    node.setEtiqueta("func_lenguaje");
                    node.setID(parser.cont);
                    node.addHijos((Node) fuO);
                    RESULT = node;
                  :}  
                  ;
                  
func_input ::= INPUT L_PAR ID:id COMMA tipo:tip R_PAR 
               {:
                System.err.println("Entra a func_input");
                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("func_input");
                node.setID(parser.cont);
                parser.cont++;
                Node identificador =new Node();
                identificador.setEtiqueta("ID");
                identificador.setID(parser.cont);
                identificador.setValor(id);
                node.addHijos(identificador);
                node.addHijos((Node) tip);
                RESULT = node;
                :}
                ;

func_output ::= OUTPUT L_PAR CONSTSTRING:cs R_PAR  
                {:
                System.err.println("Entra a func_output 1");
                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("func_output");
                node.setID(parser.cont);
                parser.cont++;
                Node const_string =new Node();
                const_string.setEtiqueta("const_string");
                const_string.setID(parser.cont);
                String temp = cs.replaceAll("\"", "");

                const_string.setValor(temp);
                node.addHijos(const_string);
                RESULT = node;
                :}
                |OUTPUT L_PAR CONSTCHAR:cs R_PAR  
                {:
                System.err.println("Entra a func_output 1");
                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("func_output");
                node.setID(parser.cont);
                parser.cont++;
                Node const_string =new Node();
                const_string.setEtiqueta("const_char");
                const_string.setID(parser.cont);
                String temp = cs.replaceAll("\'", "");

                const_string.setValor(temp);
                node.addHijos(const_string);
                RESULT = node;
                :}     
                | OUTPUT L_PAR NUM:nm R_PAR 
                {:
                System.err.println("Entra a func_output 2");
                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("func_output");
                node.setID(parser.cont);

                parser.cont++;
                Node num =new Node();
                num.setEtiqueta("Num");
                num.setID(parser.cont);
                num.setValor(nm);
                node.addHijos(num);
                RESULT = node;
                :}
                | OUTPUT L_PAR ID:id R_PAR  
                {:
                System.err.println("Entra a func_output 3");
                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("func_output");
                node.setID(parser.cont);

                parser.cont++;
                Node identificador =new Node();
                identificador.setEtiqueta("ID");
                identificador.setID(parser.cont);
                identificador.setValor(id);
                node.addHijos(identificador);
                RESULT = node;
                :}    
                ;

dec_general ::= dec_variable:dva dec_general:dg
               {:
                System.err.println("Entra a dec_general de vairable");
                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("dec_general");
                node.setID(parser.cont);
                node.addHijos((Node) dva);
                node.addHijos((Node) dg);
                RESULT = node;
               :}
               | dec_var:dv dec_general:dg
               {:
                System.err.println("Entra a dec_general de vairable2");
                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("dec_general");
                node.setID(parser.cont);
                node.addHijos((Node) dv);
                node.addHijos((Node) dg);
                RESULT = node;
               :}
               | dec_while:dw dec_general:dg
               {:
                System.err.println("Entra a dec_general de while");
                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("dec_general");
                node.setID(parser.cont);
                node.addHijos((Node) dw);
                node.addHijos((Node) dg);
                RESULT = node;
                :}
               | dec_for:df dec_general:dg
               {:
                System.err.println("Entra a dec_general de for");
                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("dec_general");
                node.setID(parser.cont);
                node.addHijos((Node) df);
                node.addHijos((Node) dg);
                RESULT = node;
                :}
               | dec_switch:ds dec_general:dg
                {:
                System.err.println("Entra a dec_general de switch");
                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("dec_general");
                node.setID(parser.cont);
                node.addHijos((Node) ds);
                node.addHijos((Node) dg);
                RESULT = node;
                :} 
               |dec_if:di dec_general:dg
               {:
               System.err.println("Entra a dec_general de if");
                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("dec_general");
                node.setID(parser.cont);
                node.addHijos((Node) di);
                node.addHijos((Node) dg);
                RESULT = node;
               :}
               |dec_llamada_funcion:dlf SEMICOLON dec_general:dg
               {:
                System.err.println("Entra a dec_general de llamada_funcion");
                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("dec_general");
                node.setID(parser.cont);
                node.addHijos((Node) dlf);
                node.addHijos((Node) dg);
                RESULT = node;
               :}
               |dec_var_inst:dvi dec_general:dg
               {:
                System.err.println("Entra a dec_general de dec_var_inst");
                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("dec_general");
                node.setID(parser.cont);
                node.addHijos((Node) dvi);
                node.addHijos((Node) dg);
                RESULT = node;
                :}
               |func_lenguaje:fl SEMICOLON dec_general:dg
               {:
                System.err.println("Entra a dec_general de func_lenguaje");
                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("dec_general");
                node.setID(parser.cont);
                node.addHijos((Node) fl);
                node.addHijos((Node) dg);
                RESULT = node;
                :}
               | dec_return:dr SEMICOLON  
                {:
                System.err.println("Entra a dec_general de dec_return");
                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("dec_general");
                node.setID(parser.cont);
                node.addHijos((Node) dr);
                RESULT = node;
                :}
                |error R_KEY
                {:
                System.err.println("Entra a dec_general nos vamos para el error ");
                Node node = new Node();
                RESULT = node;
                :}
                | 
                {:
                System.err.println("Entra a dec_general a vacio");
                parser.cont++;
                Node nodo = new Node();
				nodo.setEtiqueta("vacio");
				nodo.setID(parser.cont);
                RESULT = nodo;
                :}
                ;

dec_variable ::= VARIABLE ID:id COLON tipo:tip dec_var:dv
                 {:
                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("dec_variable");
                node.setID(parser.cont);

                parser.cont++;
                Node identificador =new Node();
                identificador.setEtiqueta("ID");
                identificador.setID(parser.cont);
                identificador.setValor(id);
                node.addHijos(identificador);
                node.addHijos((Node) tip);
                node.addHijos((Node) dv);
                RESULT = node;
                :}   
                | VARIABLE ID:id L_BRACKET NUM:nm R_BRACKET COLON tipo:tip dec_inst:di dec_var:dv 
                {:
                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("dec_variable");
                node.setID(parser.cont);

                parser.cont++;
                Node identificador =new Node();
                identificador.setEtiqueta("ID");
                identificador.setID(parser.cont);
                identificador.setValor(id);
                parser.cont++;
                Node num =new Node();
                num.setEtiqueta("tamaño");
                num.setID(parser.cont);
                num.setValor(nm);
                node.addHijos(identificador);
                node.addHijos(num);
                node.addHijos((Node) tip);
                node.addHijos((Node) di);
                node.addHijos((Node) dv);
                RESULT = node;
                :}
                |VARIABLE ID:id L_BRACKET NUM:nm1 R_BRACKET L_BRACKET NUM:nm2 R_BRACKET COLON tipo:tip dec_inst:di dec_var:dv
                {:
                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("dec_variable");
                node.setID(parser.cont);

                parser.cont++;
                Node identificador =new Node();
                identificador.setEtiqueta("ID");
                identificador.setID(parser.cont);
                identificador.setValor(id);
                parser.cont++;
                Node num1 =new Node();
                num1.setEtiqueta("tamaño1");
                num1.setID(parser.cont);
                num1.setValor(nm1);
                parser.cont++;
                Node num2 =new Node();
                num2.setEtiqueta("tamaño2");
                num2.setID(parser.cont);
                num2.setValor(nm2);
                node.addHijos(identificador);
                node.addHijos(num1);
                node.addHijos(num2);
                node.addHijos((Node) tip);
                node.addHijos((Node) di);
                node.addHijos((Node) dv);
                RESULT = node;
                :}
                ;

dec_var ::= dec_inst:di SEMICOLON
            {:
                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("dec_var");
                node.setID(parser.cont);
                node.addHijos((Node) di);
                RESULT = node;
            :}
            | COMMA ID:id COLON tipo:tip dec_inst:di dec_var:dv
            {:
                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("dec_var");
                node.setID(parser.cont);

                parser.cont++;
                Node identificador =new Node();
                identificador.setEtiqueta("ID");
                identificador.setID(parser.cont);
                identificador.setValor(id);
                node.addHijos(identificador);
                node.addHijos((Node) tip);
                node.addHijos((Node) di);
                node.addHijos((Node) dv);
                RESULT = node;
            :}
            | COMMA ID:id L_BRACKET NUM:nm R_BRACKET COLON tipo:tip dec_inst:di dec_var:dv
            {:
                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("dec_var");
                node.setID(parser.cont);

                parser.cont++;
                Node identificador =new Node();
                identificador.setEtiqueta("ID");
                identificador.setID(parser.cont);
                identificador.setValor(id);
                parser.cont++;
                Node num =new Node();
                num.setEtiqueta("tamaño");
                num.setID(parser.cont);
                num.setValor(nm);
                node.addHijos(identificador);
                node.addHijos(num);
                node.addHijos((Node) tip);
                node.addHijos((Node) di);
                node.addHijos((Node) dv);
                RESULT = node;
            :}
            | COMMA ID:id L_BRACKET NUM:nm1 R_BRACKET L_BRACKET NUM:nm2 R_BRACKET COLON tipo:tip dec_inst:di dec_var:dv
            {:
                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("dec_var");
                node.setID(parser.cont);

                parser.cont++;
                Node identificador =new Node();
                identificador.setEtiqueta("ID");
                identificador.setID(parser.cont);
                identificador.setValor(id);
                parser.cont++;
                Node num1 =new Node();
                num1.setEtiqueta("tamaño1");
                num1.setID(parser.cont);
                num1.setValor(nm1);
                parser.cont++;
                Node num2 =new Node();
                num2.setEtiqueta("tamaño2");
                num2.setID(parser.cont);
                num2.setValor(nm2);
                node.addHijos(identificador);
                node.addHijos(num1);
                node.addHijos(num2);
                node.addHijos((Node) tip);
                node.addHijos((Node) di);
                node.addHijos((Node) dv);
                RESULT = node;
            :}
;

dec_inst ::= OPASIGN ID:id
             {:
                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("dec_inst");
                node.setID(parser.cont);

                parser.cont++;
                Node identificador =new Node();
                identificador.setEtiqueta("ID");
                identificador.setID(parser.cont);
                identificador.setValor(id);
                node.addHijos(identificador);
                RESULT = node;
             :}
             | OPASIGN ID:id DOT AT L_PAR NUM:nm R_PAR
             {:
                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("dec_inst");
                node.setID(parser.cont);

                parser.cont++;
                Node identificador =new Node();
                identificador.setEtiqueta("ID");
                identificador.setID(parser.cont);
                identificador.setValor(id);
                parser.cont++;
                Node num =new Node();
                num.setEtiqueta("num");
                num.setID(parser.cont);
                num.setValor(nm);
                node.addHijos(identificador);
                node.addHijos(num);
                RESULT = node;
             :}
             | OPASIGN NUM:nm 
             {:
                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("dec_inst");
                node.setID(parser.cont);

                parser.cont++;
                Node num =new Node();
                num.setEtiqueta("num");
                num.setID(parser.cont);
                num.setValor(nm);
                node.addHijos(num);
                RESULT = node;
             :}
             | OPASIGN FLOAT_VAL:nm 
             {:
                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("dec_inst");
                node.setID(parser.cont);

                parser.cont++;
                Node num =new Node();
                num.setEtiqueta("float");
                num.setID(parser.cont);
                num.setValor(nm);
                node.addHijos(num);
                RESULT = node;
             :}
             | OPASIGN CONSTSTRING:cs
             {:
                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("dec_inst");
                node.setID(parser.cont);

                parser.cont++;
                Node const_string =new Node();
                const_string.setEtiqueta("const string");
                const_string.setID(parser.cont);
                const_string.setValor(cs);
                node.addHijos(const_string);
                RESULT = node;
             :}
             | OPASIGN CONSTCHAR:cc  
             {:
                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("dec_inst");
                node.setID(parser.cont);

                parser.cont++;
                Node const_char =new Node();
                const_char.setEtiqueta("const char");
                const_char.setID(parser.cont);
                const_char.setValor(cc);
                node.addHijos(const_char);
                RESULT = node;
             :}
             | OPASIGN TRUE:tru
             {:
                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("dec_inst");
                node.setID(parser.cont);

                parser.cont++;
                Node bool_true =new Node();
                bool_true.setEtiqueta("true");
                bool_true.setID(parser.cont);
                bool_true.setValor(tru);
                node.addHijos(bool_true);
                RESULT = node;
             :}
             | OPASIGN FALSE:fals 
             {:
                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("dec_inst");
                node.setID(parser.cont);

                parser.cont++;
                Node bool_false =new Node();
                bool_false.setEtiqueta("false");
                bool_false.setID(parser.cont);
                bool_false.setValor(fals);
                node.addHijos(bool_false);
                RESULT = node;
             :}
             | OPASIGN dec_llamada_funcion:dlf
             {:
                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("dec_inst");
                node.setID(parser.cont);
                node.addHijos((Node) dlf);
                RESULT = node;
             :}
             | OPASIGN arreglo:arr 
             {:
                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("dec_inst");
                node.setID(parser.cont);
                node.addHijos((Node) arr);
                RESULT = node;
             :}
             | OPASIGN arreglo2d:arr
             {:
                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("dec_inst");
                node.setID(parser.cont);
                node.addHijos((Node) arr);
                RESULT = node;
             :}
             |
             {:
                parser.cont++;
                Node node = new Node();
				node.setEtiqueta("vacio");
				node.setID(parser.cont);
                RESULT = node;
             :}
              ;
arreglo2d ::=L_KEY arreglo:arr arr2_cont:arc R_KEY
             {:
                parser.cont++;
                Node node=new Node();
                node.setEtiqueta("arreglo2d");
                node.setID(parser.cont);
                node.addHijos((Node) arr);
                node.addHijos((Node) arc);
                RESULT=node;
             :}
            ;
arr2_cont ::=COMMA arreglo:arr arr2_cont:arc
            {:
                parser.cont++;
                Node node=new Node();
                node.setEtiqueta("arr2_cont");
                node.setID(parser.cont);
                node.addHijos((Node) arr);
                node.addHijos((Node) arc);
                RESULT=node;
            :}
            |
            {:
                parser.cont++;
                Node nodo = new Node();
				nodo.setEtiqueta("vacio");
				nodo.setID(parser.cont);
                RESULT = nodo;
            :}
            ;
arreglo ::=L_KEY valor:va arr_cont:arc R_KEY
             {:
                parser.cont++;
                Node node=new Node();
                node.setEtiqueta("arreglo");
                node.setID(parser.cont);
                node.addHijos((Node) va);
                node.addHijos((Node) arc);
                RESULT=node;
             :}
            ;
arr_cont ::= COMMA valor:va arr_cont:arc
             {:
                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("arr_cont");
                node.setID(parser.cont);
                node.addHijos((Node) va);
                node.addHijos((Node) arc);
                RESULT = node;
            :}
            |
            {:
                parser.cont++;
                Node nodo = new Node();
				nodo.setEtiqueta("vacio");
				nodo.setID(parser.cont);
                RESULT = nodo;
            :}
            ;

dec_var_inst ::= ID:id OPASIGN valor:va SEMICOLON
                {:
                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("dec_var_inst");
                node.setID(parser.cont);

                parser.cont++;
                Node identificador =new Node();
                identificador.setEtiqueta("ID");
                identificador.setID(parser.cont);
                identificador.setValor(id);
                node.addHijos(identificador);
                node.addHijos((Node) va);
                RESULT = node;
                :}
                | ID:id DOT AT L_PAR ID:id1 R_PAR OPASIGN valor:va SEMICOLON
                {:
                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("dec_var_inst");
                node.setID(parser.cont);

                parser.cont++;
                Node identificador =new Node();
                identificador.setEtiqueta("ID");
                identificador.setID(parser.cont);
                identificador.setValor(id);
                parser.cont++;
                Node identificador1 =new Node();
                identificador1.setEtiqueta("posicion");
                identificador1.setID(parser.cont);
                identificador1.setValor(id1);
                node.addHijos(identificador);
                node.addHijos(identificador1);
                node.addHijos((Node) va);
                RESULT = node;
                :}
                | ID:id DOT AT L_PAR NUM:nm R_PAR OPASIGN valor:va SEMICOLON
                {:
                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("dec_var_inst");
                node.setID(parser.cont);

                parser.cont++;
                Node identificador =new Node();
                identificador.setEtiqueta("ID");
                identificador.setID(parser.cont);
                identificador.setValor(id);
                parser.cont++;
                Node num =new Node();
                num.setEtiqueta("posicion");
                num.setID(parser.cont);
                num.setValor(nm);
                node.addHijos(identificador);
                node.addHijos(num);
                node.addHijos((Node) va);
                RESULT = node;
                :}
                | ID:id OPASIGNADD valor:va SEMICOLON
                {:
                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("dec_var_inst");
                node.setID(parser.cont);

                parser.cont++;
                Node identificador =new Node();
                identificador.setEtiqueta("ID");
                identificador.setID(parser.cont);
                identificador.setValor(id);
                node.addHijos(identificador);
                node.addHijos((Node) va);
                RESULT = node;
                :}
                | ID:id OPASIGNMULT NUM:nm SEMICOLON
                {:
                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("dec_var_inst");
                node.setID(parser.cont);

                parser.cont++;
                Node identificador =new Node();
                identificador.setEtiqueta("ID");
                identificador.setID(parser.cont);
                identificador.setValor(id);
                parser.cont++;
                Node num =new Node();
                num.setEtiqueta("num");
                num.setID(parser.cont);
                num.setValor(nm);
                node.addHijos(identificador);
                node.addHijos(num);
                RESULT = node;
                :}
                | ID:id OPINC SEMICOLON
                {:
                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("dec_var_inst");
                node.setID(parser.cont);

                parser.cont++;
                Node identificador =new Node();
                identificador.setEtiqueta("ID");
                identificador.setID(parser.cont);
                identificador.setValor(id);
                node.addHijos(identificador);
                RESULT = node;
                :}
                | ID:id DOT AT L_PAR NUM:nm1 COMMA NUM:nm2 R_PAR OPASIGN valor:va SEMICOLON
                {:
                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("dec_var_inst");
                node.setID(parser.cont);

                parser.cont++;
                Node identificador =new Node();
                identificador.setEtiqueta("ID");
                identificador.setID(parser.cont);
                identificador.setValor(id);
                parser.cont++;
                Node num1 =new Node();
                num1.setEtiqueta("posicion1");
                num1.setID(parser.cont);
                num1.setValor(nm1);
                parser.cont++;
                Node num2 =new Node();
                num2.setEtiqueta("posicion2");
                num2.setID(parser.cont);
                num2.setValor(nm2);
                node.addHijos(identificador);
                node.addHijos(num1);
                node.addHijos(num2);
                node.addHijos((Node) va);
                RESULT = node;
                :}
                |ID:id DOT AT L_PAR ID:ids COMMA ID:id2 R_PAR OPASIGN valor:va SEMICOLON
                {:
                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("dec_var_inst");
                node.setID(parser.cont);

                parser.cont++;
                Node identificador =new Node();
                identificador.setEtiqueta("ID");
                identificador.setID(parser.cont);
                identificador.setValor(id);
                parser.cont++;
                Node identificador1 =new Node();
                identificador1.setEtiqueta("posicion1");
                identificador1.setID(parser.cont);
                identificador1.setValor(ids);
                parser.cont++;
                Node identificador2 =new Node();
                identificador2.setEtiqueta("posicion2");
                identificador2.setID(parser.cont);
                identificador2.setValor(id2);
                node.addHijos(identificador);
                node.addHijos(identificador1);
                node.addHijos(identificador2);
                node.addHijos((Node) va);
                RESULT = node;
                :}
                | ID:id DOT AT L_PAR NUM:nm1 COMMA ID:ids R_PAR OPASIGN valor:va SEMICOLON
                {:
                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("dec_var_inst");
                node.setID(parser.cont);

                parser.cont++;
                Node identificador =new Node();
                identificador.setEtiqueta("ID");
                identificador.setID(parser.cont);
                identificador.setValor(id);
                parser.cont++;
                Node num1 =new Node();
                num1.setEtiqueta("posicion1");
                num1.setID(parser.cont);
                num1.setValor(nm1);
                parser.cont++;
                Node identificador1 =new Node();
                identificador1.setEtiqueta("posicion2");
                identificador1.setID(parser.cont);
                identificador1.setValor(ids);
                node.addHijos(identificador);
                node.addHijos(num1);
                node.addHijos(identificador1);
                node.addHijos((Node) va);
                RESULT = node;
                :}
                | ID:id DOT AT L_PAR ID:ids COMMA NUM:nm R_PAR OPASIGN valor:va SEMICOLON
                {:
                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("dec_var_inst");
                node.setID(parser.cont);

                parser.cont++;
                Node identificador =new Node();
                identificador.setEtiqueta("ID");
                identificador.setID(parser.cont);
                identificador.setValor(id);
                parser.cont++;
                Node identificador1 =new Node();
                identificador1.setEtiqueta("posicion1");
                identificador1.setID(parser.cont);
                identificador1.setValor(ids);
                parser.cont++;
                Node num_p =new Node();
                num_p.setEtiqueta("posicion2");
                num_p.setID(parser.cont);
                num_p.setValor(nm);
                node.addHijos(identificador);
                node.addHijos(identificador1);
                node.addHijos(num_p);
                node.addHijos((Node) va);
                RESULT = node;
                :}
                ;

valor ::=  CONSTSTRING:cs
           {:
                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("valor");
                node.setID(parser.cont);
                
                parser.cont++;
                Node const_string = new Node();
                const_string.setEtiqueta("const string");
                const_string.setID(parser.cont);
                if(cs.equals("")){
                    const_string.setValor("empty");
                }else{
                    const_string.setValor(cs);
                }    
                node.setValor(const_string.getValor().replaceAll("\"",""));

                RESULT = node;
           :}
           | CONSTCHAR:cc
           {:
                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("valor");
                node.setID(parser.cont);
                
                parser.cont++;
                Node const_char = new Node();
                const_char.setEtiqueta("const char");
                const_char.setID(parser.cont);
                const_char.setValor(cc);

                node.setValor(const_char.getValor());
                RESULT = node;
           :}
           | TRUE:tru
           {:
                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("valor");
                node.setID(parser.cont);
                
                parser.cont++;
                Node bool_true = new Node();
                bool_true.setEtiqueta("true");
                bool_true.setID(parser.cont);
                bool_true.setValor(tru);

                node.setValor(bool_true.getValor());
                RESULT = node;
           :}
           | FALSE:fals
           {:
                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("valor");
                node.setID(parser.cont);
                
                parser.cont++;
                Node bool_false = new Node();
                bool_false.setEtiqueta("false");
                bool_false.setID(parser.cont);
                bool_false.setValor(fals);

                node.setValor(bool_false.getValor());
                RESULT = node;
           :}
           | NUM:num
           {:
                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("valor");
                node.setID(parser.cont);
                
                parser.cont++;
                Node num_int = new Node();
                num_int.setEtiqueta("INT");
                num_int.setID(parser.cont);
                num_int.setValor(num);

                node.setValor(num_int.getValor());
                RESULT = node;
           :}
           | FLOAT_VAL:flt
           {:
                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("valor");
                node.setID(parser.cont);
                
                parser.cont++;
                Node num_flt = new Node();
                num_flt.setEtiqueta("FLOAT");
                num_flt.setID(parser.cont);
                num_flt.setValor(flt);

                node.setValor(num_flt.getValor());
                RESULT = node;
           :}
           | math_op:mop
           {:
                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("valor");
                node.setID(parser.cont);
                node.addHijos((Node) mop);
                RESULT = node;
           :}
           | dec_llamada_funcion:dlf
            {:
                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("valor");
                node.setID(parser.cont);
                node.addHijos((Node) dlf);
                RESULT = node;
            :}
            | ID:id
            {:
                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("valor");
                node.setID(parser.cont);
                
                parser.cont++;
                Node identificador = new Node();
                identificador.setEtiqueta("ID");
                identificador.setID(parser.cont);
                identificador.setValor(id);

                node.setValor(identificador.getValor());
                RESULT = node;
            :}
            | ID:id DOT AT L_PAR NUM:nm R_PAR 
            {:
                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("valor");
                node.setID(parser.cont);
                
                parser.cont++;
                Node identificador = new Node();
                identificador.setEtiqueta("ID");
                identificador.setID(parser.cont);
                identificador.setValor(id);
                node.addHijos(identificador);
                parser.cont++;
                Node num_p = new Node();
                num_p.setEtiqueta("posicion");
                num_p.setID(parser.cont);
                num_p.setValor(nm);
                node.addHijos(num_p);
                node.setValor("");

                RESULT = node;
            :}
            | ID:id1 DOT AT L_PAR ID:id2 R_PAR 
            {:
                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("valor");
                node.setID(parser.cont);
                
                parser.cont++;
                Node identificador1 = new Node();
                identificador1.setEtiqueta("ID");
                identificador1.setID(parser.cont);
                identificador1.setValor(id1);
                node.addHijos(identificador1);
                parser.cont++;
                Node identificador2 = new Node();
                identificador2.setEtiqueta("posicion");
                identificador2.setID(parser.cont);
                identificador2.setValor(id2);
                node.addHijos(identificador2);
                node.setValor("");

                RESULT = node;
            :}
            | ID:id DOT AT L_PAR NUM:nm COMMA NUM:nm1 R_PAR 
            {:
                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("valor");
                node.setID(parser.cont);
                
                parser.cont++;
                Node identificador = new Node();
                identificador.setEtiqueta("ID");
                identificador.setID(parser.cont);
                identificador.setValor(id);
                node.addHijos(identificador);
                parser.cont++;
                Node num_p = new Node();
                num_p.setEtiqueta("posicion1");
                num_p.setID(parser.cont);
                num_p.setValor(nm);
                node.addHijos(num_p);
                parser.cont++;
                Node num_p1 = new Node();
                num_p1.setEtiqueta("posicion2");
                num_p1.setID(parser.cont);
                num_p1.setValor(nm1);
                node.addHijos(num_p1);
                node.setValor("");

                RESULT = node;
            :}
            | ID:id1 DOT AT L_PAR ID:id2 COMMA ID:id3 R_PAR 
            {:
                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("valor");
                node.setID(parser.cont);
                
                parser.cont++;
                Node identificador1 = new Node();
                identificador1.setEtiqueta("ID");
                identificador1.setID(parser.cont);
                identificador1.setValor(id1);
                node.addHijos(identificador1);
                parser.cont++;
                Node identificador2 = new Node();
                identificador2.setEtiqueta("posicion1");
                identificador2.setID(parser.cont);
                identificador2.setValor(id2);
                node.addHijos(identificador2);
                parser.cont++;
                Node identificador3 = new Node();
                identificador3.setEtiqueta("posicion2");
                identificador3.setID(parser.cont);
                identificador3.setValor(id3);
                node.addHijos(identificador3);
                node.setValor("");

                RESULT = node;
            :}
            | ID:id DOT AT L_PAR NUM:nm COMMA ID:id1 R_PAR 
            {:
                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("valor");
                node.setID(parser.cont);
                
                parser.cont++;
                Node identificador = new Node();
                identificador.setEtiqueta("ID");
                identificador.setID(parser.cont);
                identificador.setValor(id);
                node.addHijos(identificador);
                parser.cont++;
                Node num_p = new Node();
                num_p.setEtiqueta("posicion1");
                num_p.setID(parser.cont);
                num_p.setValor(nm);
                node.addHijos(num_p);
                parser.cont++;
                Node identificador1 = new Node();
                identificador1.setEtiqueta("posicion2");
                identificador1.setID(parser.cont);
                identificador1.setValor(id1);
                node.addHijos(identificador1);
                node.setValor("");

                RESULT = node;
            :}
            | ID:id1 DOT AT L_PAR ID:id2 COMMA NUM:nm R_PAR 
            {:
                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("valor");
                node.setID(parser.cont);
                
                parser.cont++;
                Node identificador1 = new Node();
                identificador1.setEtiqueta("ID");
                identificador1.setID(parser.cont);
                identificador1.setValor(id1);
                node.addHijos(identificador1);
                parser.cont++;
                Node identificador2 = new Node();
                identificador2.setEtiqueta("posicion1");
                identificador2.setID(parser.cont);
                identificador2.setValor(id2);
                node.addHijos(identificador2);
                parser.cont++;
                Node num_p = new Node();
                num_p.setEtiqueta("posicion2");
                num_p.setID(parser.cont);
                num_p.setValor(nm);
                node.addHijos(num_p);
                node.setValor("");

                RESULT = node;
            :}
            ;

math_op ::= s_op:so
            {:
                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("math_op");
                node.setID(parser.cont);
                node.addHijos((Node) so);
                RESULT = node;
            :}
            | m_op:mo
            {:
                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("math_op");
                node.setID(parser.cont);
                node.addHijos((Node) mo);
                RESULT = node;
            :}
            ;

s_op ::= val:vl sum_op:sum
            {:
                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("s_op");
                node.setID(parser.cont);
                node.addHijos((Node) vl);
                node.addHijos((Node) sum);
                RESULT = node;
            :};

sum_op ::= OPSUM val:vl sum_op:sum
            {:
                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("sum_op");
                node.setID(parser.cont);
                node.addHijos((Node) vl);
                node.addHijos((Node) sum);
                RESULT = node;
            :}
            | OPSUM val:vl mult_op:mult
            {:
                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("sum_op");
                node.setID(parser.cont);
                node.addHijos((Node) vl);
                node.addHijos((Node) mult);
                RESULT = node;
            :}
            | OPSUM val:vl
            {:
                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("sum_op");
                node.setID(parser.cont);
                node.addHijos((Node) vl);
                RESULT = node;
            :} 
            ;

m_op ::= val:vl mult_op:mult 
            {:
                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("m_op");
                node.setID(parser.cont);
                node.addHijos((Node) vl);
                node.addHijos((Node) mult);
                RESULT = node;
            :};
            
mult_op ::= OPMULT val:vl mult_op:mult
            {:
                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("mult_op");
                node.setID(parser.cont);
                node.addHijos((Node) vl);
                node.addHijos((Node) mult);
                RESULT = node;
            :}
            | OPMULT val:vl sum_op:sum
            {:
                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("mult_op");
                node.setID(parser.cont);
                node.addHijos((Node) vl);
                node.addHijos((Node) sum);
                RESULT = node;
            :}
            | OPMULT val:vl
            {:
                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("mult_op");
                node.setID(parser.cont);
                node.addHijos((Node) vl);
                RESULT = node;
            :} 
            ;

val ::= ID:id
        {:
                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("val");
                node.setID(parser.cont);
                
                parser.cont++;
                Node identificador = new Node();
                identificador.setEtiqueta("ID");
                identificador.setID(parser.cont);
                identificador.setValor(id);

                node.setValor(identificador.getValor());
                RESULT = node;
        :}
        | NUM:nm
        {:
                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("val");
                node.setID(parser.cont);
                
                parser.cont++;
                Node num = new Node();
                num.setEtiqueta("num");
                num.setID(parser.cont);
                num.setValor(nm);

                node.setValor(num.getValor());
                RESULT = node;
        :}
        | dec_llamada_funcion:dlf
        {:
                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("val");
                node.setID(parser.cont);
                node.addHijos((Node) dlf);
                RESULT = node;
        :}
        | L_PAR math_op:mo R_PAR 
        {:
                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("val");
                node.setID(parser.cont);
                node.addHijos((Node) mo);
                RESULT = node;
        :}
        ;

dec_while ::= WHILE L_PAR condicion:cond R_PAR L_KEY dec_general:dg R_KEY
            {:
                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("dec_while");
                node.setID(parser.cont);
                node.addHijos((Node) cond);
                node.addHijos((Node) dg);
                RESULT = node;
            :}
;

dec_for ::= FOR L_PAR ID:id COMMA NUM:nm1 UPTO NUM:nm2 COMMA STEP L_PAR NUM:nm3 R_PAR R_PAR L_KEY dec_general:dg R_KEY
            {:
                System.err.println("Entra a dec_for 1");
                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("dec_for");
                node.setID(parser.cont);

                parser.cont++;
                Node identificador = new Node();
                identificador.setEtiqueta("ID");
                identificador.setID(parser.cont);
                identificador.setValor(id);
                parser.cont++;
                Node num1 =new Node();
                num1.setEtiqueta("num");
                num1.setID(parser.cont);
                num1.setValor(nm1);
                parser.cont++;
                Node num2 =new Node();
                num2.setEtiqueta("num");
                num2.setID(parser.cont);
                num2.setValor(nm2);
                parser.cont++;
                Node num3 =new Node();
                num3.setEtiqueta("num");
                num3.setID(parser.cont);
                num3.setValor(nm3);     
                node.addHijos(identificador);
                node.addHijos(num1);
                node.addHijos(num2);
                node.addHijos(num3);
                node.addHijos((Node) dg);
                RESULT = node;
            :}
            | FOR L_PAR ID:id COMMA NUM:nm1 DOWNTO NUM:nm2 COMMA STEP L_PAR NUM:nm3 R_PAR R_PAR L_KEY dec_general:dg R_KEY
            {:
                System.err.println("Entra a dec_for 2");
                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("dec_for");
                node.setID(parser.cont);

                parser.cont++;
                Node identificador = new Node();
                identificador.setEtiqueta("ID");
                identificador.setID(parser.cont);
                identificador.setValor(id);
                parser.cont++;
                Node num1 =new Node();
                num1.setEtiqueta("num");
                num1.setID(parser.cont);
                num1.setValor(nm1);
                parser.cont++;
                Node num2 =new Node();
                num2.setEtiqueta("num");
                num2.setID(parser.cont);
                num2.setValor(nm2);
                parser.cont++;
                Node num3 =new Node();
                num3.setEtiqueta("num");
                num3.setID(parser.cont);
                num3.setValor(nm3);     
                node.addHijos(identificador);
                node.addHijos(num1);
                node.addHijos(num2);
                node.addHijos(num3);
                node.addHijos((Node) dg);
                RESULT = node;
            :}
            | FOR L_PAR VARIABLE ID:id COLON INTEGER COMMA NUM:nm1 UPTO NUM:nm2 COMMA STEP L_PAR NUM:nm3 R_PAR R_PAR L_KEY dec_general:dg R_KEY
            {:
                System.err.println("Entra a dec_for 3");
                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("dec_for");
                node.setID(parser.cont);

                parser.cont++;
                Node identificador = new Node();
                identificador.setEtiqueta("ID");
                identificador.setID(parser.cont);
                identificador.setValor(id);
                parser.cont++;
                Node num1 =new Node();
                num1.setEtiqueta("num");
                num1.setID(parser.cont);
                num1.setValor(nm1);
                parser.cont++;
                Node num2 =new Node();
                num2.setEtiqueta("num");
                num2.setID(parser.cont);
                num2.setValor(nm2);
                parser.cont++;
                Node num3 =new Node();
                num3.setEtiqueta("num");
                num3.setID(parser.cont);
                num3.setValor(nm3);     
                node.addHijos(identificador);
                node.addHijos(num1);
                node.addHijos(num2);
                node.addHijos(num3);
                node.addHijos((Node) dg);
                RESULT = node;
            :}
            | FOR L_PAR VARIABLE ID:id COLON INTEGER COMMA NUM:nm1 DOWNTO NUM:nm2 COMMA STEP L_PAR NUM:nm3 R_PAR R_PAR L_KEY dec_general:dg R_KEY
            {:
                System.err.println("Entra a dec_for 4");
                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("dec_for");
                node.setID(parser.cont);

                parser.cont++;
                Node identificador = new Node();
                identificador.setEtiqueta("ID");
                identificador.setID(parser.cont);
                identificador.setValor(id);
                parser.cont++;
                Node num1 =new Node();
                num1.setEtiqueta("num");
                num1.setID(parser.cont);
                num1.setValor(nm1);
                parser.cont++;
                Node num2 =new Node();
                num2.setEtiqueta("num");
                num2.setID(parser.cont);
                num2.setValor(nm2);
                parser.cont++;
                Node num3 =new Node();
                num3.setEtiqueta("num");
                num3.setID(parser.cont);
                num3.setValor(nm3);     
                node.addHijos(identificador);
                node.addHijos(num1);
                node.addHijos(num2);
                node.addHijos(num3);
                node.addHijos((Node) dg);
                RESULT = node;
            :}
    
            ;

dec_switch ::= SWITCH L_PAR ID:id R_PAR L_KEY list_op:lo R_KEY 
            {:
                System.err.println("Entra a dec_switch");
                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("dec_switch");
                node.setID(parser.cont);

                parser.cont++;
                Node identificador = new Node();
                identificador.setEtiqueta("ID");
                identificador.setID(parser.cont);
                identificador.setValor(id);
                node.addHijos(identificador);
                node.addHijos((Node) lo);
                RESULT = node;
            :}
            ;

list_op ::= OPTION valor:vl COLON dec_general:dg new_op:nwo 
            {:
                System.err.println("Entra a list_op");
                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("list_op");
                node.setID(parser.cont);
                node.addHijos((Node) vl);
                node.addHijos((Node) dg);
                node.addHijos((Node) nwo);
                RESULT = node;
            :}
            ;

new_op ::= BREAK SEMICOLON list_op:lo
            {:
                System.err.println("Entra a new_op 1");
                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("option");
                node.setID(parser.cont);
                node.addHijos((Node) lo);
                RESULT = node;
            :}
            | BREAK SEMICOLON DEFAULT COLON dec_general:dg
            {:
                System.err.println("Entra a new_op 2");
                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("default");
                node.setID(parser.cont);
                node.addHijos((Node) dg);
                RESULT = node;
            :}
            | BREAK SEMICOLON 
            {:
                System.err.println("Entra a new_op 3");
                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("new_op");
                node.setID(parser.cont);
                RESULT = node;
            :}
            ;

dec_if ::= IF L_PAR condicion:cond R_PAR L_KEY dec_general:dg R_KEY dec_else:del
            {:
                System.err.println("Entra a dec_if");
                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("dec_if");
                node.setID(parser.cont);
                node.addHijos((Node) cond);
                node.addHijos((Node) dg);
                node.addHijos((Node) del);
                RESULT = node;
            :}
            ;
dec_else ::= ELIF L_PAR condicion:cond R_PAR L_KEY dec_general:dg R_KEY dec_else:del
            {:
                System.err.println("Entra a dec_else elif");
                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("dec_elif");
                node.setID(parser.cont);
                node.addHijos((Node) cond);
                node.addHijos((Node) dg);
                node.addHijos((Node) del);
                RESULT = node;
            :}
            |ELSE L_KEY dec_general:dg R_KEY 
            {:
                System.err.println("Entra a dec_else else");
                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("dec_else");
                node.setID(parser.cont);
                node.addHijos((Node) dg);
                RESULT = node;
            :}
            |
            {:
                parser.cont++;
                Node nodo = new Node();
				nodo.setEtiqueta("vacio");
				nodo.setID(parser.cont);
                RESULT = nodo;
            :}
            ;

dec_llamada_funcion ::= ID L_PAR llamada_parametros:llp R_PAR
            {:
                System.err.println("Entra a dec_llamada_funcion");
                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("dec_llamada_funcion");
                node.setID(parser.cont);
                node.addHijos((Node) llp);
                RESULT = node;
            :}
            ;

llamada_parametros ::= valor:vl lista_valores:lv
            {:
                System.err.println("Entra a llamada_parametros 1");
                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("llamada_parametros");
                node.setID(parser.cont);
                node.addHijos((Node) vl);
                node.addHijos((Node) lv);
                RESULT = node;
            :}
            | valor:vl
            {:
                System.err.println("Entra a llamada_parametros 2");
                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("llamada_parametros");
                node.setID(parser.cont);
                node.addHijos((Node) vl);
                RESULT = node;
            :}
            |
            {:
                System.err.println("Entra a vacio");
                parser.cont++;
                Node nodo = new Node();
				nodo.setEtiqueta("vacio");
				nodo.setID(parser.cont);
                RESULT = nodo;
            :}
            ;

lista_valores ::= COMMA valor:vl lista_valores:lv
            {:
                System.err.println("Entra a lista_valores 1");
                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("lista_valores");
                node.setID(parser.cont);
                node.addHijos((Node) vl);
                node.addHijos((Node) lv);
                RESULT = node;
            :}
            |COMMA valor:vl
            {:
                System.err.println("Entra a lista_valores 2");
                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("lista_valores");
                node.setID(parser.cont);
                node.addHijos((Node) vl);
                RESULT = node;
            :}
            ;


condicion ::= valor_cond:vc1 OPREL:opr valor_cond:vc2
            {:
                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("condicion");
                node.setValor(opr);
                node.setID(parser.cont);
                node.addHijos((Node) vc1);
                node.addHijos((Node) vc2);
                RESULT = node;
            :}
            | valor_cond:vc1 OPREL:opr valor_cond:vc2 OPLOG:oplg condicion:cond
            {:
                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("condicion");
                node.setID(parser.cont);
                node.setValor(opr +"," +oplg);
                node.addHijos((Node) vc1);
                node.addHijos((Node) vc2);
                node.addHijos((Node) cond);
                RESULT = node;
            :}
            | valor_cond:vc
            {:
                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("condicion");
                node.setValor("valor condicional");
                node.setID(parser.cont);
                node.addHijos((Node) vc);
                RESULT = node;
            :}
            | NULL:nll
            {:
                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("condicion");
                node.setID(parser.cont);

                parser.cont++;
                Node nulo=new Node();
                nulo.setEtiqueta("Null");
                nulo.setID(parser.cont);
                nulo.setValor(nll);

                node.setValor(nulo.getValor());

                RESULT = node;
            :}
            | valor_cond:vc OPLOG:oplg condicion:cond
            {:
                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("condicion");
                node.setValor(oplg);
                node.setID(parser.cont);
                node.addHijos((Node) vc);
                node.addHijos((Node) cond);
                RESULT = node;
            :}
            ;

valor_cond ::= NUM:nm
            {:
                System.err.println("Entra a valor_cond 1");
                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("valor_cond");
                node.setID(parser.cont);

                parser.cont++;
                Node num =new Node();
                num.setEtiqueta("num");
                num.setID(parser.cont);
                num.setValor(nm);

                node.setValor(num.getValor());
                RESULT = node;
            :}
            | ID:id
            {:
                System.err.println("Entra a valor_cond 2");
                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("valor_cond");
                node.setID(parser.cont);

                parser.cont++;
                Node identificador =new Node();
                identificador.setEtiqueta("ID");
                identificador.setID(parser.cont);
                identificador.setValor(id);

                node.setValor(identificador.getValor());
                RESULT = node;
            :}
            | TRUE:tru
            {:
                System.err.println("Entra a valor_cond 3");
                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("valor_cond");
                node.setID(parser.cont);
                
                parser.cont++;
                Node bool_true = new Node();
                bool_true.setEtiqueta("true");
                bool_true.setID(parser.cont);
                bool_true.setValor(tru);

                node.setValor(bool_true.getValor());
                RESULT = node;
            :}
            | FALSE:fals
            {:
                System.err.println("Entra a valor_cond 4");
                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("valor");
                node.setID(parser.cont);
                
                parser.cont++;
                Node bool_false = new Node();
                bool_false.setEtiqueta("false");
                bool_false.setID(parser.cont);
                bool_false.setValor(fals);

                node.setValor(bool_false.getValor());
                RESULT = node;
            :}
            ;

dec_return ::= RETURN valor:vl
            {:
                System.err.println("Entra a dec_return 1");
                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("dec_return");
                node.setID(parser.cont);
                node.addHijos(vl);
                RESULT = node;
            :}
            | RETURN 
            {:
                System.err.println("Entra a dec_return 2");  
                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("dec_return");
                node.setID(parser.cont);
                RESULT = node;
            :}
            ;

tipo ::= BOOLEAN
            {:
                System.err.println("Entra a tipo 1");
                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("tipo");
                node.setID(parser.cont);
                node.setValor("boolean");
                RESULT = node;
            :}
            | CHARACTER
            {:
                System.err.println("Entra a tipo 2");
                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("tipo");
                node.setID(parser.cont);
                node.setValor("char");
                RESULT = node;
            :}
            | INTEGER
            {:
                System.err.println("Entra a tipo 3");
                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("tipo");
                node.setID(parser.cont);
                node.setValor("Int");
                RESULT = node;
            :}
            | VOID
            {:
                System.err.println("Entra a tipo 4");
                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("tipo");
                node.setID(parser.cont);
                node.setValor("Void");
                RESULT = node;
            :}
            | STRING 
            {:  
                System.err.println("Entra a tipo 5");
                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("tipo");
                node.setID(parser.cont);
                node.setValor("String");
                RESULT = node;
            :}
            | FLOAT 
            {:  
                System.err.println("Entra a tipo 5");
                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("tipo");
                node.setID(parser.cont);
                node.setValor("FLOAT");
                RESULT = node;
            :}
            ;