package nachts;
import java_cup.runtime.*;
import java.util.ArrayList;
import java.util.LinkedList;
import java.util.List;

parser code {:
   ArrayList<String> errores = new ArrayList();
   public static Node root;
   public int cont = 1;
    public void report_error(String message,Object info){
                StringBuffer m=new StringBuffer("Error ");
                if(info instanceof Symbol){
                        Symbol s=((Symbol)info);

                        if(s.left>=0){
                                m.append("en linea "+(s.right+1));
                        if(s.right>=0)
                                m.append(", columna "+(s.left+1));
                        }
                }
                m.append(": "+message);
                System.err.println(m);
                errores.add(m+"");
        }

        public void report_fatal_error(String message, Object info){
                report_error("fatal"+ message, info);
                //System.exit(1);
        }

        public void unrecovered_syntax_error(Symbol cur_token){
                System.out.println(cur_token.toString());
                System.err.println("CRITICO: At line "+(cur_token.right)+", column "+cur_token.left);
                errores.add("CRITICO: At line "+(cur_token.right)+", column "+cur_token.left);
                //System.exit(1);
        }

        protected void report_expected_token_ids() {
	        List<Integer> ids = expected_token_ids();
	        LinkedList<String> list = new LinkedList<String>();
	        for (Integer expected : ids)
		        list.add(symbl_name_from_id(expected));
                System.err.println("Se esperaba cualquiera de estas: "+list);
                errores.add("Se esperaba cualquiera de estas: "+list);
	}
    

:}

terminal String FUNCTION,NUM,UPTO,DOWNTO,STEP,VARIABLE,STRING,
                CONSTSTRING,CONSTCHAR,INTEGER,CHARACTER,BOOLEAN,IF,ELSE,
                WHILE,FOR,RETURN,VOID,TRUE,FALSE,BREAK,NULL,
                INPUT,OUTPUT,SWITCH,CASE,OPTION,DEFAULT,ID,
                OPREL,OPCOND,OPLOG,OPMOD,OPMULT,OPSUM,OPINC,OPASIGN,
                OPASIGNADD,OPASIGNMULT,L_KEY,R_KEY,L_BRACKET,R_BRACKET,
                L_PAR,R_PAR,COMMA,SEMICOLON,COLON,AT,DOT,MAIN;

non terminal Node inicio,dec_gen_fun,dec_funcion,parametros,/*lista_parametro,
             def_parametro,*/nuevo_parametro,func_lenguaje,func_input,
             func_output,dec_general,dec_variable,dec_var,dec_inst,
             arr_cont,dec_var_inst,valor,math_op,s_op,sum_op,m_op,mult_op,
             val,dec_while,dec_for,dec_switch,list_op,new_op,dec_if,
             dec_else,dec_llamada_funcion,llamada_parametros,
             lista_valores,fin_llamada,condicion,valor_cond,dec_return,
             tipo;

precedence left OPSUM,OPMULT;
precedence left OPASIGN;

start with inicio;

inicio ::= dec_funcion:dg dec_gen_fun:dgf
    {:
    System.err.println("Entra a inicio");

    Node node = new Node();
    node.setEtiqueta("INICIO");
    node.setID(parser.cont);
    node.addHijos((Node) dg);
    node.addHijos((Node) dgf);
    
    parser.root = node;
    RESULT = node; 
    
    :} ;

dec_gen_fun ::= dec_funcion:df dec_gen_fun:dgf
            {:
                System.err.println("Entra a dec_gen_fun");

                Node node = new Node();
                RESULT = node;
            :}
            | 
            {:
                Node node = new Node();
                RESULT = node;
            :}
;

dec_funcion ::= FUNCTION ID L_PAR parametros R_PAR COLON tipo L_KEY dec_general R_KEY
            {:
               System.err.println("Entra a dec_funcion");

                Node node = new Node();
                RESULT = node;
            :}
            |FUNCTION ID L_PAR parametros R_PAR COLON MAIN L_KEY dec_general R_KEY
            {:
               System.err.println("Entra a dec_funcion");

                Node node = new Node();
                RESULT = node;
            :}
            
;

parametros ::= VARIABLE ID COLON tipo nuevo_parametro 
                {:
                System.err.println("Entra a parametros 1");
                
                Node node = new Node();
                RESULT = node;
                :}
               |VARIABLE ID COLON tipo  
               {:
                System.err.println("Entra a parametros 1");
                Node node = new Node();
                RESULT = node;
               :} 
               |
               {:
                System.err.println("Entra a vacio");
                Node node = new Node();
                RESULT = node;
               :} ;

nuevo_parametro ::=COMMA VARIABLE ID COLON tipo nuevo_parametro
                {:
                System.err.println("Entra a nuevo_parametro 1");
                Node node = new Node();
                RESULT = node;
                :}
                | COMMA VARIABLE ID COLON tipo
                {:
                System.err.println("Entra a nuevo_parametro 2");
                Node node = new Node();
                RESULT = node;
                :};

func_lenguaje ::= func_input
                  {:
                    System.err.println("Entra a func_lenguaje 1");
                    Node node = new Node();
                    RESULT = node;
                  :}
                  | func_output
                  {:
                    System.err.println("Entra a func_lenguaje 2");
                    Node node = new Node();
                    RESULT = node;
                  :}  
                  ;
                  
func_input ::= INPUT L_PAR ID COMMA tipo R_PAR 
               {:
                System.err.println("Entra a func_input");
                Node node = new Node();
                RESULT = node;
                :}
                ;

func_output ::= OUTPUT L_PAR CONSTSTRING R_PAR  
                {:
                System.err.println("Entra a func_output 1");
                Node node = new Node();
                RESULT = node;
                :}    
                | OUTPUT L_PAR NUM R_PAR 
                {:
                System.err.println("Entra a func_output 2");
                Node node = new Node();
                RESULT = node;
                :}
                | OUTPUT L_PAR ID R_PAR  
                {:
                System.err.println("Entra a func_output 3");
                Node node = new Node();
                RESULT = node;
                :}    
                ;

dec_general ::= dec_variable dec_general:dg
               {:
                System.err.println("Entra a dec_general de vairable");
                Node node = new Node();
                RESULT = node;
               :}
               | dec_var dec_general
               {:
                System.err.println("Entra a dec_general de vairable2");

                Node node = new Node();
                RESULT = node;
               :}
               | dec_while dec_general
               {:
                System.err.println("Entra a dec_general de while");

                Node node = new Node();
                RESULT = node;
                :}
               | dec_for dec_general
               {:
                System.err.println("Entra a dec_general de for");
                Node node = new Node();
                RESULT = node;
                :}
               | dec_switch dec_general
                {:
                System.err.println("Entra a dec_general de switch");
                Node node = new Node();
                RESULT = node;
                :} 
               |dec_if dec_general
               {:
               System.err.println("Entra a dec_general de if");
                Node node = new Node();
                RESULT = node;
               :}
               |dec_llamada_funcion SEMICOLON dec_general
               {:
                System.err.println("Entra a dec_general de llamada_funcion");
                Node node = new Node();
                RESULT = node;
               :}
               |dec_var_inst dec_general
               {:
                System.err.println("Entra a dec_general de dec_var_inst");
                Node node = new Node();
                RESULT = node;
                :}
               |func_lenguaje SEMICOLON dec_general
               {:
                System.err.println("Entra a dec_general de func_lenguaje");
                Node node = new Node();
                RESULT = node;
                :}
               | dec_return SEMICOLON  
                {:
                System.err.println("Entra a dec_general de dec_return");
                Node node = new Node();
                RESULT = node;
                :}
                |error R_KEY
                {:
                System.err.println("Entra a dec_general nos vamos para el error ");
                Node node = new Node();
                RESULT = node;
                :}
                | 
                {:
                System.err.println("Entra a dec_general a vacio");
                Node node = new Node();
                RESULT = node;
                :}
                ;

dec_variable ::= VARIABLE ID COLON tipo dec_var 
                 {:
                Node node = new Node();
                RESULT = node;
                :}   
                | VARIABLE ID L_BRACKET NUM R_BRACKET COLON tipo dec_inst dec_var 
                {:
                Node node = new Node();
                RESULT = node;
                :}
                ;

dec_var ::= dec_inst SEMICOLON
            {:
                Node node = new Node();
                RESULT = node;
            :}
            | COMMA ID COLON tipo dec_inst dec_var
            {:
                Node node = new Node();
                RESULT = node;
            :}
            | COMMA ID L_BRACKET NUM R_BRACKET COLON tipo dec_inst dec_var 
            {:
                Node node = new Node();
                RESULT = node;
            :}
;

dec_inst ::= OPASIGN ID
             {:
                Node node = new Node();
                RESULT = node;
             :}
             | OPASIGN ID DOT AT L_PAR NUM R_PAR
             {:
                Node node = new Node();
                RESULT = node;
             :}
             | OPASIGN NUM 
             {:
                Node node = new Node();
                RESULT = node;
             :}
             | OPASIGN CONSTSTRING
             {:
                Node node = new Node();
                RESULT = node;
             :}
             | OPASIGN CONSTCHAR  
             {:
                Node node = new Node();
                RESULT = node;
             :}
             | OPASIGN TRUE
             {:
                Node node = new Node();
                RESULT = node;
             :}
             | OPASIGN FALSE 
             {:
                Node node = new Node();
                RESULT = node;
             :}
             | OPASIGN dec_llamada_funcion 
             {:
                Node node = new Node();
                RESULT = node;
             :}
             | OPASIGN L_KEY valor arr_cont R_KEY 
             {:
                Node node = new Node();
                RESULT = node;
             :}
             |
             {:
                Node node = new Node();
                RESULT = node;
             :}
              ;

arr_cont ::= COMMA valor arr_cont
             {:
                Node node = new Node();
                RESULT = node;
            :}
            |
            {:
                Node node = new Node();
                RESULT = node;
            :}
            ;

dec_var_inst ::= ID OPASIGN valor SEMICOLON
                {:
                Node node = new Node();
                RESULT = node;
                :}
                | ID DOT AT L_PAR NUM R_PAR OPASIGN valor SEMICOLON
                {:
                Node node = new Node();
                RESULT = node;
                :}
                | ID OPASIGNADD valor SEMICOLON
                {:
                Node node = new Node();
                RESULT = node;
                :}
                | ID OPASIGNMULT NUM SEMICOLON
                {:
                Node node = new Node();
                RESULT = node;
                :}
                | ID OPINC SEMICOLON
                {:
                Node node = new Node();
                RESULT = node;
                :}
                ;

valor ::=  CONSTSTRING
           {:
                Node node = new Node();
                RESULT = node;
           :}
           | CONSTCHAR
           {:
                Node node = new Node();
                RESULT = node;
           :}
           | TRUE
           {:
                Node node = new Node();
                RESULT = node;
           :}
           | FALSE
           {:
                Node node = new Node();
                RESULT = node;
           :}
           | math_op
           {:
                Node node = new Node();
                RESULT = node;
           :}
           | dec_llamada_funcion 
            {:
                Node node = new Node();
                RESULT = node;
            :}
            | ID 
            {:
                Node node = new Node();
                RESULT = node;
            :}
            | ID DOT AT L_PAR NUM R_PAR 
            {:
                Node node = new Node();
                RESULT = node;
            :}
           
            ;

math_op ::= s_op 
            {:
                Node node = new Node();
                RESULT = node;
            :}
            | m_op
            ;

s_op ::= val sum_op 
            {:
                Node node = new Node();
                RESULT = node;
            :};

sum_op ::= OPSUM val sum_op
            {:
                Node node = new Node();
                RESULT = node;
            :}
            | OPSUM val mult_op
            {:
                Node node = new Node();
                RESULT = node;
            :}
            | OPSUM val
            {:
                Node node = new Node();
                RESULT = node;
            :} 
            ;

m_op ::= val mult_op 
            {:
                Node node = new Node();
                RESULT = node;
            :};
            
mult_op ::= OPMULT val mult_op 
            {:
                Node node = new Node();
                RESULT = node;
            :}
            | OPMULT val sum_op 
            {:
                Node node = new Node();
                RESULT = node;
            :}
            | OPMULT val
            {:
                Node node = new Node();
                RESULT = node;
            :} 
            ;

val ::= ID
        {:
                Node node = new Node();
                RESULT = node;
        :}
        | NUM
        {:
                Node node = new Node();
                RESULT = node;
        :}
        | dec_llamada_funcion 
        {:
                Node node = new Node();
                RESULT = node;
        :}
        | L_PAR math_op R_PAR 
        {:
                Node node = new Node();
                RESULT = node;
        :}
        ;

dec_while ::= WHILE L_PAR condicion R_PAR L_KEY dec_general R_KEY
            {:
                System.err.println("Entra a dec_while");
                Node node = new Node();
                RESULT = node;
            :}
;

dec_for ::= FOR L_PAR ID COMMA NUM UPTO COMMA STEP L_PAR NUM R_PAR R_PAR L_KEY dec_general R_KEY
            {:
                System.err.println("Entra a dec_for 1");
                Node node = new Node();
                RESULT = node;
            :}
            | FOR L_PAR ID COMMA NUM DOWNTO NUM COMMA STEP L_PAR NUM R_PAR R_PAR L_KEY dec_general R_KEY
            {:
                System.err.println("Entra a dec_for 2");
                Node node = new Node();
                RESULT = node;
            :}
            | FOR L_PAR VARIABLE ID COLON INTEGER COMMA NUM UPTO NUM COMMA STEP L_PAR NUM R_PAR R_PAR L_KEY dec_general R_KEY
            {:
                System.err.println("Entra a dec_for 3");
                Node node = new Node();
                RESULT = node;
            :}
            | FOR L_PAR VARIABLE ID COLON INTEGER COMMA NUM DOWNTO NUM COMMA STEP L_PAR NUM R_PAR R_PAR L_KEY dec_general R_KEY
            {:
                System.err.println("Entra a dec_for 4");
                Node node = new Node();
                RESULT = node;
            :}
    
            ;

dec_switch ::= SWITCH L_PAR ID R_PAR L_BRACKET list_op R_BRACKET 
            {:
                System.err.println("Entra a dec_switch");
                Node node = new Node();
                RESULT = node;
            :}
            ;

list_op ::= OPTION valor COLON dec_general new_op 
            {:
                System.err.println("Entra a list_op");
                Node node = new Node();
                RESULT = node;
            :}
            ;

new_op ::= BREAK SEMICOLON list_op
            {:
                System.err.println("Entra a new_op 1");
                Node node = new Node();
                RESULT = node;
            :}
            | BREAK SEMICOLON DEFAULT COLON dec_general
            {:
                System.err.println("Entra a new_op 2");

                Node node = new Node();
                RESULT = node;
            :}
            | BREAK SEMICOLON 
            {:
                System.err.println("Entra a new_op 3");

                Node node = new Node();
                RESULT = node;
            :}
            ;

dec_if ::= IF L_PAR condicion R_PAR L_KEY dec_general R_KEY dec_else 
            {:
                System.err.println("Entra a dec_if");

                Node node = new Node();
                RESULT = node;
            :}
            ;
dec_else ::= ELSE  dec_if 
            {:
                System.err.println("Entra a dec_else elsif");

                Node node = new Node();
                RESULT = node;
            :}
            |ELSE L_KEY dec_general R_KEY 
            {:
                System.err.println("Entra a dec_else else");
                Node node = new Node();
                RESULT = node;
            :}
            |
            {:
                System.err.println("Entra a dec_else vacio");
                Node node = new Node();
                RESULT = node;
            :}
            ;

dec_llamada_funcion ::= ID L_PAR llamada_parametros R_PAR
            {:
                System.err.println("Entra a dec_llamada_funcion");
                Node node = new Node();
                RESULT = node;
            :}
            ;

llamada_parametros ::= valor lista_valores
            {:
                System.err.println("Entra a llamada_parametros 1");
                Node node = new Node();
                RESULT = node;
            :}
            | valor 
            {:
                System.err.println("Entra a llamada_parametros 2");
                Node node = new Node();
                RESULT = node;
            :}
            |
            {:
                System.err.println("Entra a vacio");
                Node node = new Node();
                RESULT = node;
            :}
            ;

lista_valores ::= COMMA valor lista_valores
            {:
                System.err.println("Entra a lista_valores 1");
                Node node = new Node();
                RESULT = node;
            :}
            |COMMA valor
            {:
                System.err.println("Entra a lista_valores 2");

                Node node = new Node();
                RESULT = node;
            :}
            ;


condicion ::= valor_cond OPREL valor_cond 
            {:
                Node node = new Node();
                RESULT = node;
            :}
            | valor_cond OPREL valor_cond OPLOG condicion 
            {:
                Node node = new Node();
                RESULT = node;
            :}
            | valor_cond 
            {:
                Node node = new Node();
                RESULT = node;
            :}
            | NULL 
            {:
                Node node = new Node();
                RESULT = node;
            :}
            | valor_cond OPLOG condicion 
            {:
                Node node = new Node();
                RESULT = node;
            :}
            ;

valor_cond ::= NUM
            {:
                System.err.println("Entra a valor_cond 1");
                Node node = new Node();
                RESULT = node;
            :}
            | ID
            {:
                System.err.println("Entra a valor_cond 2");
                Node node = new Node();
                RESULT = node;
            :}
            | TRUE
            {:
                System.err.println("Entra a valor_cond 3");
                Node node = new Node();
                RESULT = node;
            :}
            | FALSE 
            {:
                System.err.println("Entra a valor_cond 4");
                Node node = new Node();
                RESULT = node;
            :}
            ;

dec_return ::= RETURN valor
            {:
                System.err.println("Entra a dec_return 1");

                Node node = new Node();
                RESULT = node;
            :}
            | RETURN 
            {:
                System.err.println("Entra a dec_return 2");  
                Node node = new Node();
                RESULT = node;
            :}
            ;

tipo ::= BOOLEAN
            {:
                System.err.println("Entra a tipo 1");
                Node node = new Node();
                RESULT = node;
            :}
            | CHARACTER 
            {:
                System.err.println("Entra a tipo 2");
                Node node = new Node();
                RESULT = node;
            :}
            | INTEGER
            {:
                System.err.println("Entra a tipo 3");
                Node node = new Node();
                RESULT = node;
            :}
            | VOID
            {:
                System.err.println("Entra a tipo 4");
                Node node = new Node();
                RESULT = node;
            :}
            | STRING 
            {:  
                System.err.println("Entra a tipo 5");
                Node node = new Node();
                RESULT = node;
            :}
            ;