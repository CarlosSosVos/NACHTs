package nachts;
import java_cup.runtime.*;
import java.util.*;

parser code {:
   ArrayList<String> errores = new ArrayList();
   ArrayList<Variable> variables = new ArrayList();
   ArrayList<Function> funciones = new ArrayList();
   ArrayList<Cuadruplo> cuadruplos = new ArrayList();
   ArrayList<String> MensajesEntrada =new ArrayList();
   Node Tree  = new Node();
   int cont=0;
   int contMain=0;
   int contAmbito=0;
   int contContenido= 0;
   int resultId=1;
   boolean testCont = false;
   String tempTipo = "";

   public void semantic_errors(String message, int position_left, int position_right){
       message += "Position: " + "linea: " + position_right + " columna: " + position_left;
       errores.add(message);
   }
   //public parser(java.io.reader input){
   //    super(s=new Lexer(input));
   //}
   /*
   public void report_error_temporal(String message, Object info){
       if (info instanceof String){
           //java_cup.runtime.Symbol s = ((java_cup.runtime.Symbol)info);
           errors++;
           System.err.println(" " + errors "==>" +" "+message + s.current_lexxeme()+"\n");
       } else {
           StringBuffer m new StringBuffer("Error ");
           if (info instanceof java_cup.runtime.Symbol){
               m.append("(" + info.toString() + ")");
           }
        m.append(":" + message);
        System.err.println(m);
       }
   }
   */

   public String token_name_from_id(int id) {
		// obtenidos de la clase sym.java
		switch (id) {
  case 2: return   "FUNCTION" ; 
  case 44: return  "L_KEY"   ;
  case 39: return  "OPSUM"   ;
  case 35: return  "OPNEG"   ;
  case 28: return  "OUTPUT"   ;
  case 27: return  "INPUT"   ;
  case 30: return  "CASE"   ;
  case 14: return  "INTEGER" ;  
  case 49: return  "R_PAR"  ; 
  case 20: return  "FOR"   ;
  case 15: return  "CHARACTER" ;  
  case 51: return  "SEMICOLON";   
  case 41: return  "OPASIGN";   
  case 31: return  "OPTION";   
  case 50: return  "COMMA";   
  case 4: return   "UPTO"  ;
  case 34: return  "OPREL"  ; 
  case 45: return  "R_KEY" ;  
  case  3: return  "NUM"  ;
  case 55: return  "MAIN"  ; 
  case 17: return  "IF"   ;
  case 54: return  "DOT"   ;
  case 33: return  "ID"   ;
  case 12: return  "CONSTSTRING";   
  case 47: return  "R_BRACKET";   
  case 16: return  "BOOLEAN";   
  case 0: return   "EOF"  ;
  case 21: return  "RETURN"  ; 
  case 23: return  "TRUE"   ;
  case 1: return   "error"  ;
  case 11: return  "FLOAT_VAL";   
  case 26: return  "NULL"   ;
  case 42: return  "OPASIGNADD";   
  case 40: return  "OPINC"   ;
  case 25: return  "BREAK"   ;
  case 22: return  "VOID"   ;
  case 29: return  "SWITCH"   ;
  case 52: return  "COLON"   ;
  case 18: return  "ELSE"   ;
  case 7: return   "VARIABLE" ; 
  case 19: return  "WHILE"   ;
  case 32: return  "DEFAULT"  ; 
  case 10: return  "FLOAT"   ;
  case 37: return  "OPMOD"   ;
  case 48: return  "L_PAR"   ;
  case 43: return  "OPASIGNMULT";   
  case 8: return   "STRING"  ;
  case 13: return  "CONSTCHAR";   
  case 36: return  "OPLOG"  ; 
  case 5: return   "DOWNTO";  
  case 53: return  "AT"   ;
  case 24: return  "FALSE"   ;
  case 46: return  "L_BRACKET";   
  case 38: return  "OPMULT" ;  
  case 9: return   "ELIF"  ;
  case 6: return   "STEP" ;   
			
			default: return "N/A";
		}
	}

	public void syntax_error(Symbol s) {
        report_error("Error sintáctico. No se esperaba el siguiente token: <" + s.value + ">. Línea: " + (s.right + 1) + ", Columna: " + (s.left + 1) + 	"\n", null);
        errores.add("Error sintáctico. No se esperaba el siguiente token: <" + s.value + ">. Línea: " + (s.right + 1) + ", Columna: " + (s.left + 1) + 	"\n");

	List expected = expected_token_ids();
        if (expected.size() != 0) {
            int id;
            String x = "";
            String inicio = "Se esperaba:  ";
            x += inicio ;
            for (int i = 0; i < expected.size(); i++) {
            	id = (int) expected.get(i);
            	if (i == expected.size() - 1) {
            		System.out.println(token_name_from_id(id));
                        x+= token_name_from_id(id);
            	} else {
            		System.out.print(token_name_from_id(id) + " | ");
                        x+= token_name_from_id(id)+ " | ";
            	}   
            }
            errores.add(x);
        } else { /* do nothing */ }
     }
        
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception {
        System.out.println("No se pudo reparar y continuar el análisis.");
    }

    public void genError(Node Actual, String tipo){
        //asignacion de una funcion a una cariable de tipo diferente
        //
    }
    
    public Function buscaTipo2(String id , boolean returnsArray){
      String tipo = "";
        for (Function iter_list : funciones) {

            if(iter_list.getId().equals(id) && iter_list.isReturnsArray() == returnsArray){
                System.out.println(iter_list.toString());
                tipo = iter_list.getTipo();
                return iter_list;
                //isFound= true;
            }
        }
       
        System.err.println("NO EXISTE ESTA FUNCION");
        return new Function("-1","-1",false);
    }

    public Variable buscaTipo(String id, boolean esArray){
        //boolean isFound = false;
        String tipo = "";
        for (Variable iter_list : variables) {
            if(iter_list.getId().equals(id) && iter_list.isArray() == esArray){
                System.out.println("El tipo de la variable es: ");
                System.out.println(iter_list.getTipo());
                tipo= iter_list.getTipo();
                return iter_list;
                //isFound= true;
            }
        }
       
        System.err.println("NO EXISTE ESTA VARIABLE");
        return new Variable("-1","-1");
    }

    //Check if any id is repeated 
    public boolean checkRepeatedID(String id){
        for (Variable iter_list : variables) {
            if(iter_list.getId().equals(id)){
                System.out.println("Esta declaracion ya existe");
                return false;
            }else{
                return true;
            }
        }
        return false;
    }



:}
action code {:
    
    
:}

terminal String FUNCTION,NUM,UPTO,DOWNTO,STEP,VARIABLE,STRING,ELIF,FLOAT, FLOAT_VAL,
                CONSTSTRING,CONSTCHAR,INTEGER,CHARACTER,BOOLEAN,IF,ELSE,
                WHILE,FOR,RETURN,VOID,TRUE,FALSE,BREAK,NULL,
                INPUT,OUTPUT,SWITCH,CASE,OPTION,DEFAULT,ID,
                OPREL,OPNEG,OPLOG,OPMOD,OPMULT,OPSUM,OPINC,OPASIGN,
                OPASIGNADD,OPASIGNMULT,L_KEY,R_KEY,L_BRACKET,R_BRACKET,
                L_PAR,R_PAR,COMMA,SEMICOLON,COLON,AT,DOT,MAIN;

non terminal Node inicio,dec_gen_fun,dec_funcion,parametros,
                nuevo_parametro,params_output,dec_general,dec_variable,dec_var,dec_inst,
             arr_cont,dec_var_inst,valor,math_op/*,s_op*/,sum_op,m_op,mult_op,
             val,dec_while,dec_for,dec_switch,list_op,new_op,dec_if,
             dec_else,dec_llamada_funcion,llamada_parametros,
             lista_valores,fin_llamada,condicion,valor_cond,dec_return,
             tipo,arreglo,arreglo2d,arr2_cont,/*math_op,*/mas_condicion,otra_condicion,condicion2;

precedence right OPASIGN;
precedence left OPMULT;
precedence left OPSUM;


start with inicio;

inicio ::= dec_funcion:dg dec_gen_fun:dgf
    {:
    MensajesEntrada.add("Entra a inicio");
    parser.cont++;
    Node node = new Node();
    node.setEtiqueta("INICIO");
    node.setID(parser.cont);
    node.addHijos((Node) dg);
    node.addHijos((Node) dgf);
    
    parser.Tree = node;
    RESULT = node; 
    
    :}
    |error inicio 
    ;

dec_gen_fun ::= dec_funcion:df dec_gen_fun:dgf
            {:
                MensajesEntrada.add("Entra a dec_gen_fun");
                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("dec_gen_fun");
                node.setID(parser.cont);
                node.addHijos((Node) df);
                node.addHijos((Node) dgf);  
                
                RESULT = node;
            :}
            | 
            {:
                parser.cont++;
                Node nodo = new Node();
				nodo.setEtiqueta("vacio");
				nodo.setID(parser.cont);
				
                RESULT = nodo;
            :}
            |error dec_gen_fun
           
           
;

dec_funcion ::= FUNCTION ID:id L_PAR parametros:parts R_PAR COLON tipo:tip L_KEY dec_general:deG R_KEY
            {:
               MensajesEntrada.add("Entra a dec_funcion");
                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("dec_funcion");
                node.setID(parser.cont);

                parser.cont++;
                Node identificador =new Node();
                identificador.setEtiqueta("ID");
                identificador.setID(parser.cont);
                identificador.setValor(id);

                Node n_parts=(Node) parts;
                Node n_tip=(Node) tip;
        
                node.addHijos(identificador);
                node.addHijos(n_parts);
                node.addHijos(n_tip);
                node.addHijos((Node) deG);

                ArrayList<Variable> params = (ArrayList<Variable>) n_parts.getValue();
                Function nueva_funcion=new Function(n_tip.getValor(),id,false);
                nueva_funcion.setParametros(params);
                System.out.println(nueva_funcion.toString());
                
                funciones.add(nueva_funcion);

                RESULT = node;
            :}
            |FUNCTION ID:id L_PAR parametros:parts R_PAR COLON MAIN:mn L_KEY dec_general:deG R_KEY
            {:
                parser.contMain++;
                if(parser.contMain>1){
                    semantic_errors("Solo puede declararse un main!",mnleft,mnright);
                }
               
                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("dec_Funcion");
                node.setID(parser.cont);

                parser.cont++;
                Node identificador =new Node();
                identificador.setEtiqueta("ID");
                identificador.setID(parser.cont);
                identificador.setValor(id);
                parser.cont++;
                Node main =new Node();
                main.setEtiqueta("Main");
                main.setID(parser.cont);
                main.setValor("Main");

                
                node.addHijos(identificador);
                node.addHijos((Node) parts);
                node.addHijos(main);
                node.addHijos((Node) deG);
                RESULT = node;
            :}
            
                 
            ;

parametros ::= VARIABLE ID:id COLON tipo:tip nuevo_parametro:nuP
                {:
                MensajesEntrada.add("Entra a parametros 1");

                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("parametros");
                node.setID(parser.cont);

                parser.cont++;
                Node identificador =new Node();
                identificador.setEtiqueta("ID");
                identificador.setID(parser.cont);
                identificador.setValor(id);

                Node n_nuP=(Node) nuP;
                Node n_tip=(Node) tip;
                node.addHijos(identificador);
                node.addHijos(n_tip);
                node.addHijos(n_nuP);

                ArrayList<Variable> var = (ArrayList<Variable>) n_nuP.getValue();
                Variable tempo=new Variable(n_tip.getValor(),id);
                tempo.setArray(false);
                var.add(tempo);
                node.setValue(var);
                for(Variable lista: var){
                    System.out.println("Parametro: "+lista.getId());
                }
                RESULT = node;
                :}
               |VARIABLE ID:id COLON tipo:tip
               {:
                MensajesEntrada.add("Entra a parametros 1");

                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("parametros");
                node.setID(parser.cont);

                parser.cont++;
                Node identificador =new Node();
                identificador.setEtiqueta("ID");
                identificador.setID(parser.cont);
                identificador.setValor(id);
                Node n_tip=(Node) tip;
                node.addHijos(identificador);
                node.addHijos(n_tip);

                ArrayList<Variable> var = new ArrayList();
                Variable tempo=new Variable(n_tip.getValor(),id);
                tempo.setArray(false);
                var.add(tempo);
                node.setValue(var);

                for(Variable lista: var){
                    System.out.println("Parametro solo: "+lista.getId());
                }

                RESULT = node;
               :}
               | VARIABLE ID:id L_BRACKET R_BRACKET COLON tipo:tip nuevo_parametro:nuP
                {:
                MensajesEntrada.add("Entra a parametros 1");

                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("parametros");
                node.setID(parser.cont);

                parser.cont++;
                Node identificador =new Node();
                identificador.setEtiqueta("ID");
                identificador.setID(parser.cont);
                identificador.setValor(id);

                Node n_nuP=(Node) nuP;
                Node n_tip=(Node) tip;
                node.addHijos(identificador);
                node.addHijos(n_tip);
                node.addHijos(n_nuP);

                ArrayList<Variable> var = (ArrayList<Variable>) n_nuP.getValue();
                Variable tempo=new Variable(n_tip.getValor(),id);
                tempo.setArray(true);
                var.add(tempo);
                node.setValue(var);

                for(Variable lista: var){
                    System.out.println("Parametro: "+lista.getId());
                }
                
                RESULT = node;
                :}
               |VARIABLE ID:id L_BRACKET R_BRACKET COLON tipo:tip
               {:
                MensajesEntrada.add("Entra a parametros 1");

                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("parametros");
                node.setID(parser.cont);

                parser.cont++;
                Node identificador =new Node();
                identificador.setEtiqueta("ID");
                identificador.setID(parser.cont);
                identificador.setValor(id);
                Node n_tip=(Node) tip;
                node.addHijos(identificador);
                node.addHijos(n_tip);

                ArrayList<Variable> var = new ArrayList();
                Variable tempo=new Variable(n_tip.getValor(),id);
                tempo.setArray(true);
                var.add(tempo);
                node.setValue(var);

                for(Variable lista: var){
                    System.out.println("Parametro solo: "+lista.getId());
                }

                RESULT = node;
               :}
               | VARIABLE ID:id L_BRACKET R_BRACKET L_BRACKET R_BRACKET COLON tipo:tip nuevo_parametro:nuP
                {:
                MensajesEntrada.add("Entra a parametros 1");

                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("parametros");
                node.setID(parser.cont);

                parser.cont++;
                Node identificador =new Node();
                identificador.setEtiqueta("ID");
                identificador.setID(parser.cont);
                identificador.setValor(id);

                Node n_nuP=(Node) nuP;
                Node n_tip=(Node) tip;
                node.addHijos(identificador);
                node.addHijos(n_tip);
                node.addHijos(n_nuP);

                ArrayList<Variable> var = (ArrayList<Variable>) n_nuP.getValue();
                Variable tempo=new Variable(n_tip.getValor(),id);
                tempo.setArray(true);
                var.add(tempo);
                node.setValue(var);

                for(Variable lista: var){
                    System.out.println("Parametro: "+lista.getId());
                }

                RESULT = node;
                :}
               |VARIABLE ID:id L_BRACKET R_BRACKET L_BRACKET R_BRACKET COLON tipo:tip
               {:
                MensajesEntrada.add("Entra a parametros 1");

                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("parametros");
                node.setID(parser.cont);

                parser.cont++;
                Node identificador =new Node();
                identificador.setEtiqueta("ID");
                identificador.setID(parser.cont);
                identificador.setValor(id);
                Node n_tip=(Node) tip;
                node.addHijos(identificador);
                node.addHijos(n_tip);

                ArrayList<Variable> var = new ArrayList();
                Variable tempo=new Variable(n_tip.getValor(),id);
                tempo.setArray(true);
                var.add(tempo);
                node.setValue(var);

                for(Variable lista: var){
                    System.out.println("Parametro solo: "+lista.getId());
                }

                RESULT = node;
               :} 
               |
               {:
                MensajesEntrada.add("Entra a vacio");

                parser.cont++;
                Node nodo = new Node();
				nodo.setEtiqueta("vacio");
				nodo.setID(parser.cont);
                ArrayList<Variable> var = new ArrayList();
                nodo.setValue(var);
                //System.out.println("No tiene parametros");
                RESULT = nodo;
               :} ;

nuevo_parametro ::=COMMA VARIABLE ID:id COLON tipo:tip nuevo_parametro:nuP
                {:
                MensajesEntrada.add("Entra a nuevo_parametro 1");
                
                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("nuevo_parametro");
                node.setID(parser.cont);

                parser.cont++;
                Node identificador =new Node();
                identificador.setEtiqueta("ID");
                identificador.setID(parser.cont);
                identificador.setValor(id);

                Node n_nuP=(Node) nuP;
                Node n_tip=(Node) tip;
                node.addHijos(identificador);
                node.addHijos(n_tip);
                node.addHijos(n_nuP);

                ArrayList<Variable> var = (ArrayList<Variable>) n_nuP.getValue();
                Variable tempo=new Variable(n_tip.getValor(),id);
                tempo.setArray(false);
                var.add(tempo);
                node.setValue(var);

                RESULT = node;
                :}
                | COMMA VARIABLE ID:id COLON tipo:tip
                {:
                MensajesEntrada.add("Entra a nuevo_parametro 2");
                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("nuevo_parametro");
                node.setID(parser.cont);

                parser.cont++;
                Node identificador =new Node();
                identificador.setEtiqueta("ID");
                identificador.setID(parser.cont);
                identificador.setValor(id);
                Node n_tip=(Node) tip;
                node.addHijos(identificador);
                node.addHijos(n_tip);

                ArrayList<Variable> var = new ArrayList();
                Variable tempo=new Variable(n_tip.getValor(),id);
                tempo.setArray(false);
                var.add(tempo);
                node.setValue(var);

                RESULT = node;
                :}
                | COMMA VARIABLE ID:id L_BRACKET R_BRACKET COLON tipo:tip nuevo_parametro:nuP
                {:
                MensajesEntrada.add("Entra a nuevo_parametro 1");

                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("nuevo_parametro");
                node.setID(parser.cont);

                parser.cont++;
                Node identificador =new Node();
                identificador.setEtiqueta("ID");
                identificador.setID(parser.cont);
                identificador.setValor(id);
                Node n_nuP=(Node) nuP;
                Node n_tip=(Node) tip;
                node.addHijos(identificador);
                node.addHijos(n_tip);
                node.addHijos(n_nuP);

                ArrayList<Variable> var = (ArrayList<Variable>) n_nuP.getValue();
                Variable tempo=new Variable(n_tip.getValor(),id);
                tempo.setArray(true);
                var.add(tempo);
                node.setValue(var);

                RESULT = node;
                :}
                | COMMA VARIABLE ID:id L_BRACKET R_BRACKET COLON tipo:tip
                {:
                MensajesEntrada.add("Entra a nuevo_parametro 2");
                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("nuevo_parametro");
                node.setID(parser.cont);

                parser.cont++;
                Node identificador =new Node();
                identificador.setEtiqueta("ID");
                identificador.setID(parser.cont);
                identificador.setValor(id);

                Node n_tip=(Node) tip;
                node.addHijos(identificador);
                node.addHijos(n_tip);

                ArrayList<Variable> var = new ArrayList();
                Variable tempo=new Variable(n_tip.getValor(),id);
                tempo.setArray(true);
                var.add(tempo);
                node.setValue(var);

                RESULT = node;
                :}
                |COMMA VARIABLE ID:id L_BRACKET R_BRACKET L_BRACKET R_BRACKET COLON tipo:tip nuevo_parametro:nuP
                {:
                MensajesEntrada.add("Entra a nuevo_parametro 1");

                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("nuevo_parametro");
                node.setID(parser.cont);

                parser.cont++;
                Node identificador =new Node();
                identificador.setEtiqueta("ID");
                identificador.setID(parser.cont);
                identificador.setValor(id);

                Node n_nuP=(Node) nuP;
                Node n_tip=(Node) tip;
                node.addHijos(identificador);
                node.addHijos(n_tip);
                node.addHijos(n_nuP);

                ArrayList<Variable> var = (ArrayList<Variable>) n_nuP.getValue();
                Variable tempo=new Variable(n_tip.getValor(),id);
                tempo.setArray(true);
                var.add(tempo);
                node.setValue(var);

                RESULT = node;
                :}
                | COMMA VARIABLE ID:id L_BRACKET R_BRACKET L_BRACKET R_BRACKET COLON tipo:tip
                {:
                MensajesEntrada.add("Entra a nuevo_parametro 2");
                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("nuevo_parametro");
                node.setID(parser.cont);

                parser.cont++;
                Node identificador =new Node();
                identificador.setEtiqueta("ID");
                identificador.setID(parser.cont);
                identificador.setValor(id);
                Node n_tip=(Node) tip;
                node.addHijos(identificador);
                node.addHijos(n_tip);

                ArrayList<Variable> var = new ArrayList();
                Variable tempo=new Variable(n_tip.getValor(),id);
                tempo.setArray(true);
                var.add(tempo);
                node.setValue(var);

                RESULT = node;
                :}
                ;

dec_general ::= dec_variable:dva dec_general:dg
               {:
                MensajesEntrada.add("Entra a dec_general de vairable");
                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("dec_general");
                node.setID(parser.cont);
                node.addHijos((Node) dva);
                node.addHijos((Node) dg);
                RESULT = node;
               :}

               | dec_while:dw dec_general:dg
               {:
                MensajesEntrada.add("Entra a dec_general de while");
                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("dec_general");
                node.setID(parser.cont);
                node.addHijos((Node) dw);
                node.addHijos((Node) dg);
                RESULT = node;
                :}
               | dec_for:df dec_general:dg
               {:
                MensajesEntrada.add("Entra a dec_general de for");
                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("dec_general");
                node.setID(parser.cont);
                node.addHijos((Node) df);
                node.addHijos((Node) dg);
                RESULT = node;
                :}
               | dec_switch:ds dec_general:dg
                {:
                MensajesEntrada.add("Entra a dec_general de switch");
                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("dec_general");
                node.setID(parser.cont);
                node.addHijos((Node) ds);
                node.addHijos((Node) dg);
                RESULT = node;
                :} 
               |dec_if:di dec_general:dg
               {:
                MensajesEntrada.add("Entra a dec_general de if");
                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("dec_general");
                node.setID(parser.cont);
                node.addHijos((Node) di);
                node.addHijos((Node) dg);
                RESULT = node;
               :}
               |dec_llamada_funcion:dlf SEMICOLON dec_general:dg
               {:
                MensajesEntrada.add("Entra a dec_general de llamada_funcion");
                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("dec_general");
                node.setID(parser.cont);
                node.addHijos((Node) dlf);
                node.addHijos((Node) dg);
                RESULT = node;
               :}
               |dec_var_inst:dvi dec_general:dg
               {:
                MensajesEntrada.add("Entra a dec_general de dec_var_inst");
                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("dec_general");
                node.setID(parser.cont);
                node.addHijos((Node) dvi);
                node.addHijos((Node) dg);
                RESULT = node;
                :}
               /*|func_lenguaje:fl SEMICOLON dec_general:dg
               {:
                MensajesEntrada.add("Entra a dec_general de func_lenguaje");
                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("dec_general");
                node.setID(parser.cont);
                node.addHijos((Node) fl);
                node.addHijos((Node) dg);
                RESULT = node;
                :}*/
               | dec_return:dr SEMICOLON dec_general:dg
                {:
                MensajesEntrada.add("Entra a dec_general de dec_return");
                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("dec_general");
                node.setID(parser.cont);
                node.addHijos((Node) dr);
                node.addHijos((Node) dg);
                RESULT = node;
                :}
                |error 
                {:
                MensajesEntrada.add("Entra a dec_general nos vamos para el error ");
                Node node = new Node();
                RESULT = node;
                :}
                |error SEMICOLON
                {:
                MensajesEntrada.add("Entra a dec_general nos vamos para el error ");
                Node node = new Node();
                RESULT = node;
                :}
                | 
                {:
                MensajesEntrada.add("Entra a dec_general a vacio");
                parser.cont++;
                Node nodo = new Node();
				nodo.setEtiqueta("vacio");
				nodo.setID(parser.cont);
                RESULT = nodo;
                :}
                ;

dec_variable ::= VARIABLE ID:id COLON tipo:tip dec_var:dv
                 {:
                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("dec_variable");
                node.setID(parser.cont);

                parser.cont++;
                Node identificador =new Node();
                identificador.setEtiqueta("ID");
                identificador.setID(parser.cont);
                identificador.setValor(id);
                node.addHijos(identificador);
                
                Node n_tip = (Node)tip;

                Node n_dv = (Node) dv;
                //n_dv.setValor(id);

                node.addHijos(n_tip);
                node.addHijos(n_dv);

                Variable new_var = new Variable(n_tip.getValor(), id);
                new_var.setArray(false);

                String test=n_dv.getValor()+"";
                
                if(test.equals("")){
                    //System.out.println("no se hizo asignacion en "+id);
                }else if( n_dv.getValue() == null ){
                    semantic_errors("Asignacion Nula |", dvleft, dvright);
                }else{
                    if(n_tip.getValor().equals(n_dv.getValor())){
                        System.out.println("la asignacion es correcta en "+id);
                        new_var.setValue(n_dv.getValue());
                        cuadruplos.add(new Cuadruplo("=",""+n_dv.getValue()," ",id));
                    }else{
                        System.out.println("la asignacion es incorrecta en "+ id);
                        semantic_errors("La asignacion es incorrecta en "+ id+" | ", dvleft, dvright);
                        
                    }
                }
                variables.add(new_var);
                //System.out.println(n_tip.getValor());
                
                RESULT = node;
                :}   
                | VARIABLE ID:id L_BRACKET math_op:vp R_BRACKET COLON tipo:tip dec_var:dv 
                {:
                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("dec_variable");
                node.setID(parser.cont);

                parser.cont++;
                Node identificador =new Node();
                identificador.setEtiqueta("ID");
                identificador.setID(parser.cont);
                identificador.setValor(id);

                Node n_tip = (Node)tip;
                Node n_dv = (Node) dv;
                Node n_vp= (Node) vp;

                node.addHijos(n_tip);
                node.addHijos(n_dv);
                node.addHijos(identificador);
                node.addHijos(n_vp);

                Variable new_var = new Variable(n_tip.getValor(), id);
                new_var.setArray(true);
                String test=n_dv.getValor()+"";
                

                if(test.equals("")){
                    //System.out.println("no se hizo asignacion en "+id);
                }else if( n_dv.getValue() == null ){
                    System.out.println("Pucha casco otra vez!!!!!!!!!!!!!");
                    semantic_errors("Asignacion Nula |", dvleft, dvright);
                }else{
                    if(n_tip.getValor().equals(n_dv.getValor())){
                        ArrayList temp=(ArrayList)n_dv.getValue();

                        int size=(int)n_vp.getValue();
                        if(size==temp.size()){
                            System.out.println("la asignacion es correcta en "+ id);
                            new_var.setValue(temp);
                        }else{
                            System.out.println("la asignacion no corresponde con el tamaño");
                            //new_var.setValue("Error");
                            semantic_errors("la asignacion no corresponde con el tamaño"+ id+" | ", dvleft, dvright);
                        }
                    }else{
                        System.out.println("la asignacion es incorrecta en "+ id);
                        semantic_errors("La asignacion es incorrecta en "+ id+" | ", dvleft, dvright);
                    }
                }

                variables.add(new_var);
                RESULT = node;
                :}
                |VARIABLE ID:id L_BRACKET math_op:vp1 R_BRACKET L_BRACKET math_op:vp2 R_BRACKET COLON tipo:tip dec_var:dv
                {:
                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("dec_variable");
                node.setID(parser.cont);

                parser.cont++;
                Node identificador =new Node();
                identificador.setEtiqueta("ID");
                identificador.setID(parser.cont);
                identificador.setValor(id);

                Node n_tip = (Node)tip;

                Node n_dv = (Node) dv;
                Node ind1= (Node) vp1;
                Node ind2=(Node) vp2;

                node.addHijos(n_tip);
                node.addHijos(n_dv);
                node.addHijos(identificador);
                node.addHijos(ind1);
                node.addHijos(ind2);

                Variable new_var = new Variable(n_tip.getValor(), id);
                /*if(!n_di.getEtiqueta.equals("vacio")){
                    new_var.setValue(n_di.getValue());
                }*/
                new_var.setArray(true);
                String test=n_dv.getValor()+"";
                //System.out.println("Maldita sea"+n_dv.getValue());
                /*
                TODO > Hay que implementar una manera de detectar errores en la asignación de valores. 
                En este momento no estamos validando tamaños de los arrays
                var a [4][2] = foo
                var b [2][2] = a
                Esto no está tirando error. 

                TODO > no estamos validando cuando estamos asignado el valor de una variable nula a otra variable.

                var a =  Null
                var b = a
                Esto debería de arrojar error.

                */
                //System.out.println("Pucha casco otra vez:"+n_dv.getValue());
                
                if(test.equals("")){
                    //System.out.println("no se hizo asignacion en "+id);
                }else if( n_dv.getValue() == null ){
                    System.out.println("Pucha casco otra vez!!!!!!!!!!!!!");
                    semantic_errors("Asignacion Nula |", dvleft, dvright);
                }else{
                    if(n_tip.getValor().equals(n_dv.getValor())){
                                                    
                        ArrayList temp = (ArrayList)n_dv.getValue();
                        ArrayList temp_Compare = (ArrayList)temp.get(0);

                        if(temp.size() == (int)ind1.getValue() && temp_Compare.size() == (int)ind2.getValue()){
                            boolean compare = true;
                            
                            for (int i = 1; i < temp.size() ; i++){
                                if(temp_Compare.size() != ((ArrayList)temp.get(i)).size()){
                                    System.out.println("Tamaños incorrectos "+ id);
                                    semantic_errors("Arreglo de tamaños incorrectos1 | ", dvleft, dvright);
                                    compare= false;
                                }
                            }
                            if(compare){
                                System.out.println("la asignacion es correcta en "+ id);
                                new_var.setValue(n_dv.getValue());
                            }
                        }else{
                            System.out.println("Tamaños incorrectos "+ id);
                            semantic_errors("Arreglo de tamaños incorrectos2 | ", dvleft, dvright);
                        }
                    }else{
                        System.out.println("la asignacion es incorrecta en "+ id);
                        semantic_errors("Asignación incorrecta id: "+ id +" | ", dvleft, dvright);
                        System.out.println( n_tip.getValor()+ " =/= "+ id);   
                    }

                }
                variables.add(new_var);
                RESULT = node;
                :}
                
                ;

dec_var ::= dec_inst:di SEMICOLON
            {:
                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("dec_var");
                node.setID(parser.cont);
                Node node_di = (Node) di;
                node.addHijos(node_di);
                System.out.println("aqui "+ node_di.getValue() +" aqui");
                node.setValor(node_di.getValor());
                node.setValue(node_di.getValue());
                RESULT = node;
            :}
            | SEMICOLON
            {:
                parser.cont++;
                Node node = new Node();
				node.setEtiqueta("vacio");
				node.setID(parser.cont);
                node.setValor("");
                node.setValue("vacio");
                RESULT = node;
            :}
            | COMMA ID:id COLON tipo:tip dec_inst:di dec_var:dv
            {:
                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("dec_var");
                node.setID(parser.cont);

                parser.cont++;
                Node identificador =new Node();
                identificador.setEtiqueta("ID");
                identificador.setID(parser.cont);
                identificador.setValor(id);
                node.addHijos(identificador);

                Node n_tip =(Node) tip;
                Node n_di=(Node) di;
                Node n_dv=(Node) dv;

                node.addHijos(n_tip);
                node.addHijos(n_di);
                node.addHijos(n_dv);
                
                Variable new_var = new Variable(n_tip.getValor(), id);
                /*if(!n_di.getEtiqueta().equals("vacio")){
                    new_var.setValue(n_di.getValue());
                }*/
                new_var.setArray(false);
                
                String test=n_di.getValor()+"";
                
                if(test.equals("")){
                    System.out.println("no hubo asignacion en "+ id);
                }else if( n_di.getValue() == null ){
                    System.out.println("Pucha casco otra vez!!!!!!!!!!!!!");
                    semantic_errors("Asignacion Nula |", dileft, diright);
                }else{
                    if(n_tip.getValor().equals(n_di.getValor())){
                        System.out.println("la asignacion es correcta en "+ id);
                        new_var.setValue(n_di.getValue());
                    }else{
                        System.out.println(" # la asignacion es incorrecta en "+ id);
                        System.out.println( n_tip.getValor()+ " =/= "+ id);
                        semantic_errors("La asignacion es incorrecta en "+ id+" | ", dileft, diright);

                    }
                }
                node.setValor("");
                variables.add(new_var);
                RESULT = node;
            :}
            | COMMA ID:id L_BRACKET math_op:vp R_BRACKET COLON tipo:tip dec_inst:di dec_var:dv
            {:
                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("dec_var");
                node.setID(parser.cont);

                parser.cont++;
                Node identificador =new Node();
                identificador.setEtiqueta("ID");
                identificador.setID(parser.cont);
                identificador.setValor(id);

                Node n_tip =(Node) tip;
                Node n_di=(Node) di;
                Node n_dv=(Node) dv;
                Node n_vp=(Node) vp;
                node.addHijos(n_dv);
                node.addHijos(identificador);
                node.addHijos(n_vp);
                node.addHijos(n_tip);
                node.addHijos(n_di);

                Variable new_var = new Variable(n_tip.getValor(), id);
                /*if(!n_di.getEtiqueta().equals("vacio")){
                    new_var.setValue(n_di.getValue());
                }*/
                new_var.setArray(true);
                variables.add(new_var);
                String test=n_di.getValor()+"";
                
                if(test.equals("")){
                    System.out.println("no hubo asignacion en "+ id);
                }else if( n_di.getValue() == null ){
                    System.out.println("Pucha casco otra vez!!!!!!!!!!!!!");
                    semantic_errors("Asignacion Nula |", dileft, diright);
                }else{
                    if(n_tip.getValor().equals(n_di.getValor())){
                        
                        ArrayList temp=(ArrayList)n_di.getValue();
                        int size=(int)n_vp.getValue();
                        if(size==temp.size()){
                            System.out.println("la asignacion es correcta en "+ id);
                            new_var.setValue(n_di.getValue());
                        }else{
                            System.out.println("la asignacion no corresponde con el tamaño");
                            //new_var.setValue("Error");
                            semantic_errors("la asignacion no corresponde con el tamaño"+ id+" | ", dileft, diright);
                        }
                        
                    }else{
                        System.out.println(" # la asignacion es incorrecta en "+ id);
                        System.out.println( n_tip.getValor()+ " =/= "+ id);
                        semantic_errors("La asignacion es incorrecta en "+ id+" | ", dileft, diright);

                    }
                }
                node.setValor("");
                variables.add(new_var);
                RESULT = node;
            :}
            | COMMA ID:id L_BRACKET math_op:vp1 R_BRACKET L_BRACKET math_op:vp2 R_BRACKET COLON tipo:tip dec_inst:di dec_var:dv
            {:
                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("dec_var");
                node.setID(parser.cont);

                parser.cont++;
                Node identificador =new Node();
                identificador.setEtiqueta("ID");
                identificador.setID(parser.cont);
                identificador.setValor(id);

                Node n_tip =(Node) tip;
                Node n_di=(Node) di;
                Node n_dv=(Node) dv;
                Node ind1=(Node) vp1;
                Node ind2= (Node) vp2;
                
                node.addHijos(n_dv);
                node.addHijos(n_tip);
                node.addHijos(n_di);
                node.addHijos(identificador);
                node.addHijos(ind1);
                node.addHijos(ind2);

                Variable new_var = new Variable(n_tip.getValor(), id);
                /*if(!n_di.getEtiqueta().equals("vacio")){
                    new_var.setValue(n_di.getValue());
                }*/
                new_var.setArray(true);
                
                String test=n_di.getValor()+"";
                
                if(test.equals("")){
                    System.out.println("no hubo asignacion en "+ id);
                    
                }else if( n_di.getValue() == null ){
                    System.out.println("Pucha casco otra vez!!!!!!!!!!!!!");
                    semantic_errors("Asignacion Nula |", dileft, diright);
                }else{
                    if(n_tip.getValor().equals(n_di.getValor())){
                        
                        ArrayList temp = (ArrayList)n_di.getValue();
                        ArrayList temp_Compare = (ArrayList)temp.get(0);

                        if(temp.size() == (int)ind1.getValue() && temp_Compare.size() == (int)ind2.getValue()){
                            boolean compare = true;
                            
                            for (int i = 1; i < temp.size() ; i++){
                                
                                if(temp_Compare.size() != ((ArrayList)temp.get(i)).size()){
                                    System.out.println("Tamaños incorrectos "+ id);
                                    compare= false;
                                    semantic_errors("Tamaños incorrectos1 |", dileft, diright);
                                }
                            }

                            if(compare){
                                System.out.println("la asignacion es correcta en "+ id);
                                new_var.setValue(n_di.getValue());
                            }
                        }else{
                            System.out.println("Tamaños incorrectos "+ id);
                            semantic_errors("Tamaños incorrectos2 |", dileft, diright);
                        }
                    }else{
                        System.out.println(" # la asignacion es incorrecta en "+ id);
                        System.out.println( n_tip.getValor()+ " =/= "+ id);
                    }
                }
                variables.add(new_var);
                node.setValor("");
                RESULT = node;
            :}|error math_op
                {:
                MensajesEntrada.add("Entra a dec_general nos vamos para el error ");
                Node node = new Node();
                RESULT = node;
                :}
            
;

dec_inst ::= OPASIGN FLOAT_VAL:nm 
             {:
                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("dec_inst");
                node.setID(parser.cont);

                parser.cont++;
                Node num =new Node();
                num.setEtiqueta("float");
                num.setID(parser.cont);
                num.setValor(nm);
                node.addHijos(num);
                RESULT = node;
             :}
             | OPASIGN CONSTSTRING:cs
             {:
                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("dec_inst");
                node.setID(parser.cont);
                node.setValor("string");
                parser.cont++;
                Node const_string =new Node();
                const_string.setEtiqueta("string");
                const_string.setID(parser.cont);
                const_string.setValor(cs.replaceAll("\"",""));
                node.addHijos(const_string);
                node.setValue(cs);
                RESULT = node;
             :}
             | OPASIGN CONSTCHAR:cc  
             {:
                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("dec_inst");
                node.setID(parser.cont);
                node.setValor("chr");
                parser.cont++;
                System.out.print("PUCHA CASCO");
                Node const_char =new Node();
                const_char.setEtiqueta("const char");
                const_char.setID(parser.cont);
                const_char.setValor(cc.replaceAll("\'",""));
                node.addHijos(const_char);
                node.setValue(cc);
                //System.out.println("que pedos CHAR:"+cc);
                RESULT = node;
             :}
             | OPASIGN TRUE:tru
             {:
                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("dec_inst");
                node.setID(parser.cont);
                node.setValor("bool");
                parser.cont++;
                Node bool_true =new Node();
                bool_true.setEtiqueta("true");
                bool_true.setID(parser.cont);
                bool_true.setValor(tru);
                node.addHijos(bool_true);
                node.setValue(true);
                RESULT = node;
             :}
             | OPASIGN FALSE:fals 
             {:
                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("dec_inst");
                node.setID(parser.cont);
                node.setValor("bool");
                parser.cont++;
                Node bool_false =new Node();
                bool_false.setEtiqueta("false");
                bool_false.setID(parser.cont);
                bool_false.setValor(fals);
                node.addHijos(bool_false);
                node.setValue(false);
                RESULT = node;
             :}
             | OPASIGN arreglo:arr 
             {:
                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("dec_inst");
                node.setID(parser.cont);
                Node n_arr=(Node) arr;
                node.addHijos(n_arr);

                node.setValor(n_arr.getValor());
                node.setValue(n_arr.getValue());
                RESULT = node;
             :}
             | OPASIGN arreglo2d:arr
             {:
                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("dec_inst");
                node.setID(parser.cont);
                Node n_arr=(Node) arr;
                node.addHijos(n_arr);

                node.setValor(n_arr.getValor());
                node.setValue(arr.getValue());
                //System.out.println("Sera?"+arr.getValue().toString());
                RESULT = node;
             :}
             | OPASIGN math_op:mo
             {:
                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("dec_inst");
                node.setID(parser.cont);
                
                Node n_mo=(Node) mo;
                node.addHijos(n_mo);
                node.setValue(n_mo.getValue());
                node.setValor(n_mo.isIsInt());
                RESULT = node;
             :}
             /*|
             {:
                parser.cont++;
                Node node = new Node();
				node.setEtiqueta("vacio");
				node.setID(parser.cont);
                node.setValor("");
                node.setValue("vacio");
                RESULT = node;
             :}*/
             |error dec_inst
                {:
                MensajesEntrada.add("Entra a dec_general nos vamos para el error ");
                Node node = new Node();
                RESULT = node;
                :}
            ;
arreglo2d ::=L_KEY arreglo:arr arr2_cont:arc R_KEY
             {:
                parser.cont++;
                Node node=new Node();
                node.setEtiqueta("arreglo2d");
                Node n_arr=(Node) arr;
                Node n_arc=(Node) arc;
                node.addHijos(n_arr);
                node.addHijos((Node) arc);

                if(n_arc.getValor().equals("nada")){
                    node.setValor(n_arr.getValor());
                    ArrayList temp1 = new ArrayList();
                    temp1.add(n_arr.getValue());
                    node.setValue(temp1);

                }else if(n_arc.getValor().equals(n_arr.getValor())){
                    node.setValor(n_arr.getValor());                
                    ArrayList temp1=new ArrayList();
                    ArrayList temp2=(ArrayList)n_arc.getValue();
                    ArrayList temp3=new ArrayList();

                    for(int i=0;i<temp2.size();i++){ 
                        temp3= new ArrayList();
                        ArrayList temp_iter = (ArrayList)temp2.get(i);
                        for(int j=0;j<temp_iter.size();j++){
                            temp3.add(temp_iter.get(j));
                        }
                        temp1.add(temp3);
                    }
                    //System.out.println("Aqui perrin:"+temp1.toString());
                    temp1.add(n_arr.getValue());
                    //System.out.println("Aqui perrin:"+temp1.toString());
                    Collections.reverse(temp1);
                    node.setValue(temp1);
                }else{
                    node.setValor("error");
                }
                RESULT=node;
             :}
             |error R_KEY
                {:
                System.err.println("arreglo2d error ");
                Node node = new Node();
                RESULT = node;
                :}
            ;
arr2_cont ::=COMMA arreglo:arr arr2_cont:arc
            {:
                parser.cont++;
                Node node=new Node();
                node.setEtiqueta("arr2_cont");
                node.setID(parser.cont);
                



                Node n_arr=(Node) arr;
                Node n_arc=(Node) arc;
                node.addHijos(n_arr);
                node.addHijos((Node) arc);

                if(n_arc.getValor().equals("nada")){
                    node.setValor(n_arr.getValor());
                    ArrayList temp1 = new ArrayList();
                    temp1.add(n_arr.getValue());
                    node.setValue(temp1);

                }else if(n_arc.getValor().equals(n_arr.getValor())){
                    node.setValor(n_arr.getValor());
                    ArrayList temp1=new ArrayList();
                    ArrayList temp2=(ArrayList)n_arc.getValue();
                    ArrayList temp3=new ArrayList();

                    for(int i=0;i<temp2.size();i++){ 
                        temp3= new ArrayList();
                        ArrayList temp_iter = (ArrayList)temp2.get(i);
                        for(int j=0;j<temp_iter.size();j++){
                            temp3.add(temp_iter.get(j));
                        }
                        temp1.add(temp3);
                    }
                    //System.out.println("ejenie queseso" +temp3.toString());
                    temp1.add(n_arr.getValue());
                    //temp1.add(temp3);
                    //System.out.println("Puntito cinco le voy a dar" +temp1.toString());

                    node.setValue(temp1);

                }else{
                    node.setValor("error");
                }

                RESULT=node;
            :}
            |
            {:
                parser.cont++;
                Node nodo = new Node();
				nodo.setEtiqueta("vacio");
				nodo.setID(parser.cont);
                nodo.setValor("nada");
                RESULT = nodo;
            :}
            
            ;
arreglo ::=L_KEY valor:va arr_cont:arc R_KEY
             {:
                parser.cont++;
                Node node=new Node();
                node.setEtiqueta("arreglo");
                node.setID(parser.cont);
                Node n_va=(Node) va;
                Node n_arc=(Node) arc;
                
                node.addHijos(n_va);
                node.addHijos(n_arc);


                if(n_arc.getValor().equals("nada")){
                    node.setValor(n_va.getValor());
                    ArrayList temp1=new ArrayList();
                    temp1.add(n_va.getValue());
                    node.setValue(temp1);
                }else if(n_arc.getValor().equals(n_va.getValor())){                   
                    node.setValor(n_va.getValor());
                    ArrayList temp1=new ArrayList();
                    ArrayList temp2=(ArrayList)n_arc.getValue();
                    
                    for(int i=0;i<temp2.size();i++){
                        temp1.add(temp2.get(i));
                    }
                    temp1.add(n_va.getValue());
                    Collections.reverse(temp1);

                    node.setValue(temp1);
                }else{
                    node.setValor("error");
                }
                RESULT=node;

             :}
            ;
arr_cont ::= COMMA valor:va arr_cont:arc
             {:
                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("arr_cont");
                node.setID(parser.cont);

                Node n_va=(Node) va;
                Node n_arc=(Node) arc;
                
                node.addHijos(n_va);
                node.addHijos(n_arc);

                if(n_arc.getValor().equals("nada")){
                    node.setValor(n_va.getValor());
                    ArrayList temp1=new ArrayList();
                    temp1.add(n_va.getValue());
                    node.setValue(temp1);
                }else if(n_arc.getValor().equals(n_va.getValor())){         
                    node.setValor(n_va.getValor());
                    ArrayList temp1=new ArrayList();
                    ArrayList temp2=(ArrayList)n_arc.getValue();
                    //if( temp2!=null && !temp2.isEmpty() ){
                        for(int i=0;i<temp2.size();i++){
                            temp1.add(temp2.get(i));
                        }
                        temp1.add(n_va.getValue());
                        node.setValue(temp1);
                    //}
                }else{
                    node.setValor("error");
                }
                RESULT = node;
            :}
            |
            {:
                parser.cont++;
                Node nodo = new Node();
				nodo.setEtiqueta("vacio");
				nodo.setID(parser.cont);
                nodo.setValor("nada");
                RESULT = nodo;
            :}
            ;

dec_var_inst ::= ID:id OPASIGN valor:va SEMICOLON
                {:
                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("dec_var_inst");
                node.setID(parser.cont);
                node.setLine(idright);
                node.setColummn(idleft);
                parser.cont++;
                Node identificador =new Node();
                identificador.setEtiqueta("ID");
                identificador.setID(parser.cont);
                identificador.setValor(id);

                Node n_va=(Node) va;
                node.addHijos(identificador);
                node.addHijos(n_va);
                
                Variable compare = buscaTipo(identificador.getValor(),false);
                System.out.println("La variable tiene asignado un: "+n_va.getValor());
                
                if(compare.getTipo().equals(n_va.getValor())){
                    System.out.println(" :) la asignacion es correcta en "+ id);
                    System.out.println( compare.getTipo() + " == "+ n_va.getValor());
                    for(Variable iter: variables ){
                        if(iter.getId().equals(identificador.getValor())){
                            iter.setValue(n_va.getValue());
                            cuadruplos.add(new Cuadruplo("=",""+n_va.getValue()," ",id));
                        }
                    }
                }else{
                    System.out.println(" :( la asignacion es incorrecta en "+ id);
                    System.out.println(  compare.getTipo() + " =/= "+ n_va.getValor());
                }

                RESULT = node;
                :}
                |ID:id DOT AT L_PAR math_op:vp R_PAR OPASIGN valor:va SEMICOLON
                {:
                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("dec_var_inst");
                node.setID(parser.cont);

                parser.cont++;
                Node identificador =new Node();
                identificador.setEtiqueta("ID");
                identificador.setID(parser.cont);
                identificador.setValor(id);
                node.addHijos((Node) vp);

                Node n_va=(Node) va;
                node.addHijos(identificador);
                node.addHijos(n_va);
                

                Variable compare = buscaTipo(identificador.getValor(),true);
                System.out.println("La variable tiene asignado un: "+n_va.getValor());
                
                if(compare.getTipo().equals(n_va.getValor())){
                    System.out.println(" :) la asignacion es correcta en "+ id);
                    System.out.println( compare.getTipo() + " == "+ n_va.getValor());
                }else{
                    System.out.println(" :( la asignacion es incorrecta en "+ id);
                    System.out.println(  compare.getTipo() + " =/= "+ n_va.getValor());
                }


                RESULT = node;
                :}
                | ID:id OPASIGNADD:opas valor:va SEMICOLON
                {:
                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("dec_var_inst");
                node.setID(parser.cont);
                node.setLine(idright);
                node.setColummn(idleft);
                parser.cont++;
                Node identificador =new Node();
                identificador.setEtiqueta("ID");
                identificador.setID(parser.cont);
                identificador.setValor(id);
                Node n_va=(Node) va;
                node.addHijos(identificador);
                node.addHijos(n_va);

                Variable compare = buscaTipo(identificador.getValor(),false);
                String operadorAritmetico = ((String)opas).charAt(0) + " ";
                if(compare.getTipo().equals(n_va.getValor())){
                    System.out.println("incrementando o decrementando"+ id);
                    //System.out.println( compare.getTipo() + " == "+ n_va.getValor());
                    for(Variable iter: variables ){
                        if(iter.getId().equals(identificador.getValor())){
                            iter.setValue(n_va.getValue());
                            
                            String temp="T"+resultId;
                            cuadruplos.add(new Cuadruplo(operadorAritmetico,id,""+n_va.getValue(),temp));
                            cuadruplos.add(new Cuadruplo("=",temp," ",id));
                        }
                    }
                }else{
                    if(opas.equals("+=")){
                        System.out.println("incremento incorrecto"+ id);
                    }else{
                        System.out.println("decremento incorrecto"+ id);
                    }
                    System.out.println(  compare.getTipo() + " =/= "+ n_va.getValor());
                }
                RESULT = node;
                :}
                | ID:id OPASIGNMULT:opas valor:va SEMICOLON
                {:
                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("dec_var_inst");
                node.setID(parser.cont);
                node.setLine(idright);
                node.setColummn(idleft);
                parser.cont++;
                Node identificador =new Node();
                identificador.setEtiqueta("ID");
                identificador.setID(parser.cont);
                identificador.setValor(id);
                parser.cont++;
                //Node num =new Node();
                //num.setEtiqueta("num");
                //num.setID(parser.cont);
                Node n_va=(Node) va;
                //num.setValor();
                node.addHijos(identificador);
                node.addHijos(n_va);

                Variable compare = buscaTipo(identificador.getValor(),false);
                String operadorAritmetico = ((String)opas).charAt(0) + " ";
                if(compare.getTipo().equals(n_va.getValor())){
                    System.out.println("multiplicando o dividiendo"+ id);
                    //System.out.println( compare.getTipo() + " == "+ n_va.getValor());
                    for(Variable iter: variables ){
                        if(iter.getId().equals(identificador.getValor())){
                            iter.setValue(n_va.getValue());
                            
                            String temp="T"+resultId;
                            cuadruplos.add(new Cuadruplo(operadorAritmetico,id,""+n_va.getValue(),temp));
                            cuadruplos.add(new Cuadruplo("=",temp," ",id));
                        }
                    }
                }else{
                    if(opas.equals("+=")){
                        System.out.println("multiplicado incorrecto"+ id);
                    }else{
                        System.out.println("dividiendo incorrecto"+ id);
                    }
                    System.out.println(  compare.getTipo() + " =/= "+ n_va.getValor());
                }
                RESULT = node;
                :}
                | ID:id OPINC:opas SEMICOLON
                {:
                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("dec_var_inst");
                node.setID(parser.cont);
                node.setLine(idright);
                node.setColummn(idleft);
                parser.cont++;
                Node identificador =new Node();
                identificador.setEtiqueta("ID");
                identificador.setID(parser.cont);
                identificador.setValor(id);
                node.addHijos(identificador);
                Variable compare = buscaTipo(identificador.getValor(),false);
                String operadorAritmetico = ((String)opas).charAt(0) + " ";
                if(compare.getTipo().equals("int")){
                    System.out.println("incrementando o decrementando"+ id);
                    //System.out.println( compare.getTipo() + " == "+ n_va.getValor());
                    for(Variable iter: variables ){
                        if(iter.getId().equals(identificador.getValor())){
                            String temp="T"+resultId;
                            cuadruplos.add(new Cuadruplo(operadorAritmetico,id,"1",temp));
                            cuadruplos.add(new Cuadruplo("=",temp," ",id));
                            iter.setValue(temp);
                        }
                    }
                }else{
                    semantic_errors("Operacion incompatible con Variable "+id+" |",opasleft,opasright);
                    /*if(opas.equals("+=")){
                        System.out.println("incremento incorrecto"+ id);
                    }else{
                        System.out.println("decremento incorrecto"+ id);
                    }*/
                }
                RESULT = node;
                :}
                | ID:id DOT AT L_PAR math_op:vp1 COMMA math_op:vp2 R_PAR OPASIGN valor:va SEMICOLON
                {:
                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("dec_var_inst");
                node.setID(parser.cont);
                node.setLine(idright);
                node.setColummn(idleft);
                parser.cont++;
                Node identificador =new Node();
                identificador.setEtiqueta("ID");
                identificador.setID(parser.cont);
                identificador.setValor(id);
                node.addHijos((Node) vp1);
                node.addHijos((Node) vp2);

                Node n_va=(Node) va;
                node.addHijos(identificador);
                node.addHijos(n_va);
                

                Variable compare = buscaTipo(identificador.getValor(),true);
                System.out.println("La variable tiene asignado un: "+n_va.getValor());
                
                if(compare.getTipo().equals(n_va.getValor())){
                    System.out.println(" :) la asignacion es correcta en "+ id);
                    System.out.println( compare.getTipo() + " == "+ n_va.getValor());
                }else{
                    System.out.println(" :( la asignacion es incorrecta en "+ id);
                    System.out.println(  compare.getTipo() + " =/= "+ n_va.getValor());
                }

                RESULT = node;
                :}
                ;

valor ::=  CONSTSTRING:cs
           {:
                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("valor");
                node.setID(parser.cont);
                node.setValor("string");
                node.setValue(cs);
                parser.cont++;
                
                /********************
                    REVISAR ESTO
                *********************/
                Node const_string = new Node();
                const_string.setEtiqueta("const string");
                const_string.setID(parser.cont);
                
                if(cs.equals("")){
                    const_string.setValor("empty");
                }else{
                    const_string.setValor(cs);
                }    
                //node.setValor(const_string.getValor().replaceAll("\"",""));

                RESULT = node;
           :}
           | CONSTCHAR:cc
           {:
                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("valor");
                node.setID(parser.cont);
                node.setValor("chr");
                node.setValue(cc);
                
                parser.cont++;
                Node const_char = new Node();
                const_char.setEtiqueta("const char");
                const_char.setID(parser.cont);
                const_char.setValor(cc);

                //node.setValor(const_char.getValor());
                RESULT = node;
           :}
           | TRUE:tru
           {:
                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("valor");
                node.setID(parser.cont);
                node.setValor("bool");
                node.setValue(true);

                parser.cont++;
                Node bool_true = new Node();
                bool_true.setEtiqueta("true");
                bool_true.setID(parser.cont);
                bool_true.setValor(tru);

                //node.setValor(bool_true.getValor());
                RESULT = node;
           :}
           | FALSE:fals
           {:
                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("valor");
                node.setID(parser.cont);
                node.setValor("bool");
                node.setValue(false);
                parser.cont++;
                Node bool_false = new Node();
                bool_false.setEtiqueta("false");
                bool_false.setID(parser.cont);
                bool_false.setValor(fals);

                //node.setValor(bool_false.getValor());
                RESULT = node;
           :}
           /*| NUM:num
           {:
                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("valor");
                node.setID(parser.cont);
                
                parser.cont++;
                Node num_int = new Node();
                num_int.setEtiqueta("INT");
                num_int.setID(parser.cont);
                num_int.setValor(num);

                node.setValor(num_int.getValor());
                RESULT = node;
           :}*/
           | FLOAT_VAL:flt
           {:
                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("valor");
                node.setID(parser.cont);
                
                parser.cont++;
                Node num_flt = new Node();
                num_flt.setEtiqueta("FLOAT");
                num_flt.setID(parser.cont);
                num_flt.setValor(flt);

                node.setValor(num_flt.getValor());
                RESULT = node;
           :}
           | math_op:mop
           {:
                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("valor");
                node.setID(parser.cont);
                Node n_mop=(Node) mop;
                node.addHijos(n_mop);
                node.setValor(n_mop.isIsInt());
                System.out.println("Aritmetica:"+n_mop.getValue()+":"+n_mop.isAritmetica());
                node.setAritmetica(n_mop.isAritmetica());
                node.setValue(n_mop.getValue());
                RESULT = node;
           :}
           ;

math_op ::= m_op:mult sum_op:sum
            {:
                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("math_op");
                node.setID(parser.cont);

                Node n_mult=(Node) mult;
                Node n_sum=(Node) sum;

                if( n_mult.isIsInt().equals("int") && n_sum.isIsInt().equals("int") ){
                    //node.setValue((int)n_mult.getValue() + (int)n_sum.getValue());
                    if(n_sum.getEtiqueta().equals("vacio")){
                        node.setValue(n_mult.getValue());
                    }else{
                        //String result="T"+resultId;
                        //node.setValue(result);
                        node.setValue(n_mult.getValue()+""+n_sum.getValue());
                        //resultId++;
                        /*Cuadruplo temp= new Cuadruplo();
                        temp.setOperator(n_sum.getOperador());
                        temp.setArgs1(n_mult.getValue()+"");
                        temp.setArgs2(n_sum.getValue()+ "");
                        temp.setResult(result); 
                        cuadruplos.add(temp);*/
                        //cuadruplos.add(new Cuadruplo(n_mult.getOperador(),n_sum.getValue()+"",n_mult.getValue()+ "",result));

                    }
                    if(n_mult.isAritmetica()){
                        node.setAritmetica(true);
                    }else if(n_sum.isAritmetica()){
                        node.setAritmetica(true);
                    }
                    node.setIsInt("int");
                }else if(  n_sum.getEtiqueta().equals("vacio") ){
                    node.setValue(n_mult.getValue());
                    node.setIsInt(n_mult.isIsInt());
                }else {
                    System.err.println("OPERACIONES INCOMPATIBLES");
                    node.setIsInt("error");
                }
                node.addHijos(n_mult);
                node.addHijos(n_sum);
                RESULT = node;
            :}
            ;
sum_op ::= OPSUM:operador m_op:mult sum_op:sum
            {:
                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("math_op +");
                Node n_mult=(Node) mult;
                Node n_sum=(Node) sum;
                if(n_mult.isIsInt().equals("int") && n_sum.isIsInt().equals("int")){
                    //node.setValue((int)n_mult.getValue() + (int)n_sum.getValue());
                    if(n_sum.getEtiqueta().equals("vacio")){
                        node.setValue(operador+""+n_mult.getValue());
                    }else{
                        //String result="T"+resultId;
                        //node.setValue(result);
                        node.setValue(operador+""+n_mult.getValue()+""+n_sum.getValue());
                        //resultId++;
                        /*Cuadruplo temp= new Cuadruplo();
                        temp.setOperator(n_sum.getOperador());
                        temp.setArgs1(n_mult.getValue()+"");
                        temp.setArgs2(n_sum.getValue()+ "");
                        temp.setResult(result); 
                        cuadruplos.add(temp);*/
                        //cuadruplos.add(new Cuadruplo(n_mult.getOperador(),n_sum.getValue()+"",n_mult.getValue()+ "",result));

                    }
                    //node.setOperador(operador);
                    node.setAritmetica(true);
                    node.setIsInt("int");
                }else {
                    System.err.println("OPERACIONES INCOMPATIBLES");
                    semantic_errors("Operaciones Incompatibles | ", operadorleft, operadorright);
                    System.err.println( "posicion operador: (" +operadorleft +","+operadorright+")" );
                    System.err.println( "mult: (" +multleft +","+multright+")" );
                    System.err.println( "sum: (" +sumleft +","+sumright+")" );

                    node.setIsInt("error");
                }
                node.setID(parser.cont);
                node.addHijos(n_mult);
                node.addHijos(n_sum);
                RESULT = node;
            :}
            |
            {:
                parser.cont++;
                Node nodo = new Node();
				nodo.setEtiqueta("vacio");
				nodo.setID(parser.cont);
                nodo.setValue(0);
                nodo.setIsInt("int");
                RESULT = nodo;
            :}
            ;
m_op ::= val:vl mult_op:mult
        {:
                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("math_op");
                node.setID(parser.cont);
                Node n_vl=(Node) vl;
                Node n_mult=(Node) mult;

                if(n_vl.isIsInt().equals("int") && n_mult.isIsInt().equals("int") ){
                    //node.setValue((int)n_vl.getValue() * (int)n_mult.getValue());
                    if(n_mult.getEtiqueta().equals("vacio")){
                        node.setValue(n_vl.getValue());
                    }else{
                        //String result="T"+resultId;
                        //node.setValue(result);
                        node.setValue(n_vl.getValue()+""+n_mult.getValue());
                        //resultId++;
                        /*Cuadruplo temp= new Cuadruplo();
                        temp.setOperator(n_mult.getOperador());
                        temp.setArgs1(n_vl.getValue()+"");
                        temp.setArgs2(n_mult.getValue()+ "");
                        temp.setResult(result); 
                        cuadruplos.add(temp);*/
                        //cuadruplos.add(new Cuadruplo(n_mult.getOperador(),n_vl.getValue()+"",n_mult.getValue()+ "",result));
                    }
                    //node.setOperador(n_mult.getOperador());
                    node.setAritmetica(n_mult.isAritmetica());
                    node.setIsInt("int");
                }else if( n_mult.getEtiqueta().equals("vacio")){
                    node.setValue(n_vl.getValue());
                    node.setIsInt(n_vl.isIsInt());

                }else {
                    System.err.println("OPERACIONES INCOMPATIBLES");
                    node.setIsInt("error");
                }
                n_vl.setLine(vlright);
                n_vl.setColummn(vlleft);
                node.addHijos(n_vl);
                node.addHijos(n_mult);

                RESULT = node;
        :}
        ;
mult_op ::= OPMULT:operador val:vl mult_op:mult
            {:
                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("math_op *");
                node.setID(parser.cont);
                Node n_vl=(Node) vl;
                Node n_mult=(Node) mult;
                if(n_vl.isIsInt().equals("int") && n_mult.isIsInt().equals("int")){
                    //node.setValue((int)n_vl.getValue() * (int)n_mult.getValue());
                    if(n_mult.getEtiqueta().equals("vacio")){
                        node.setValue(operador+""+n_vl.getValue());
                    }else{
                        //String result="T"+resultId;
                        //node.setValue(result);
                        node.setValue(operador+""+n_vl.getValue()+""+n_mult.getValue());
                        //resultId++;
                        /*Cuadruplo temp= new Cuadruplo();
                        temp.setOperator(n_mult.getOperador());
                        temp.setArgs1(n_vl.getValue()+"");
                        temp.setArgs2(n_mult.getValue()+ "");
                        temp.setResult(result); 
                        cuadruplos.add(temp);*/
                        //cuadruplos.add(new Cuadruplo(n_mult.getOperador(),n_vl.getValue()+"",n_mult.getValue()+ "",result));

                    }
                    node.setAritmetica(true);
                    //node.setOperador(operador);
                    node.setIsInt("int");
                }else {
                    System.err.println("OPERACIONES INCOMPATIBLES");
                    node.setIsInt("error");
                }
                n_vl.setLine(vlright);
                n_vl.setColummn(vlleft);
                node.addHijos(n_vl);
                node.addHijos(n_mult);
                RESULT = node;
            :}
            |  
            {:
                parser.cont++;
                Node nodo = new Node();
				nodo.setEtiqueta("vacio");
                nodo.setValue(1);
				nodo.setID(parser.cont);
                nodo.setIsInt("int");
                RESULT = nodo;
            :}
            ;


val ::= ID:id
        {:
                /*
                *** !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
                SE DEBE DISTINGUIR ENTRE STRINGS E 
                INTEGERS, YA QUE PODEMOS CONCATENAR CADENAS
                ***!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
                */
                
                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("val");
                node.setID(parser.cont);
                node.setValueIsID(true);
                //Para ver si es variable
                Variable temp = buscaTipo(id,false);
                //Para ver si es array
                if( temp.getTipo().equals("-1")){
                    temp = buscaTipo(id,true);
                }
                System.out.println(temp.toString());

                

                if(temp.getTipo().equals("int")){
                   /* if(temp.getValue().getClass() == Integer.class ){
                        
                    }else*/ 
                    if (temp.isEsArray()){
                        System.out.println("a que es array prrin");
                        node.setValue(temp.getValue());
                        node.setIsInt("int");
                    }else{
                        System.out.println("veamo si entra prrin");
                        //int valor_temp = (int)temp.getValue();
                        //node.setValue(valor_temp);
                        node.setValue(temp.getId());
                        node.setIsInt("int");
                    }
                }else if(temp.getTipo().equals("string")){
                    //String valor_temp = (String)temp.getValue();
                    //node.setValue(valor_temp);
                    //node.setIsInt("string");
                    /*if(temp.getValue().getClass() == String.class ){
                        
                    }else */
                    if (temp.isEsArray()){
                        System.out.println("a que es array prrin");
                        node.setValue(temp.getValue());
                        node.setIsInt("string");
                    }else{
                        System.out.println("veamo si entra prrin");
                        //String valor_temp = (String)temp.getValue();
                        //node.setValue(valor_temp);
                        node.setValue(temp.getId());
                        node.setIsInt("string");
                    }

                }
                else if(temp.getTipo().equals("chr")){
                    //char valor_temp = ((String)temp.getValue()).charAt(0);
                    //node.setValue(valor_temp);
                    //node.setIsInt("chr");
                    /*if(temp.getValue().getClass() == Character.class ){   
                    }*/
                    if (temp.isEsArray()){
                        System.out.println("a que es array prrin:"+temp.getValue().toString());
                        node.setValue(temp.getValue());
                        node.setIsInt("chr");
                    }else{
                        System.out.println("veamo si entra prrin chr");
                        //char valor_temp = ((String)temp.getValue()).charAt(0);
                        //node.setValue(valor_temp);
                        node.setValue(temp.getId());
                        node.setIsInt("chr");
                    }
                    System.out.println("NO entre"+temp.getValue().getClass());
                }else if(temp.getTipo().equals("bool")){
                    /*if(temp.getValue().getClass() == Boolean.class ){
                    }else */
                    if (temp.isEsArray()){
                        System.out.println("a que es array prrin");
                        node.setValue(temp.getValue());
                        node.setIsInt("bool");
                    }else{
                        System.out.println("veamo si entra prrin");
                        boolean valor_temp;
                        if(temp.getValue()==null){
                            node.setValue(temp.getId());
                        }else if((boolean)temp.getValue()){
                            valor_temp = true;
                            node.setValue(temp.getId());
                        }else{
                            valor_temp = false;
                            node.setValue(temp.getId());
                        }
                        node.setIsInt("bool");
                    }
                }else{
                    node.setIsInt("error");
                }
                
                parser.cont++;

                Node identificador = new Node();
                identificador.setEtiqueta("ID");
                identificador.setID(parser.cont);
                identificador.setValor(id);

                node.setValor(identificador.getValor());
                RESULT = node;
        :}
        | ID:id DOT AT L_PAR math_op:vp R_PAR 
        {:
                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("val");
                node.setID(parser.cont);
                
                Variable temp = buscaTipo(id,true);
                Node n_vp = (Node)vp;

                if(temp.getTipo().equals("int")){
                    ArrayList valor_temp = (ArrayList)temp.getValue();
                    int pos =(int)valor_temp.get( (int)n_vp.getValue() );
                    node.setValue(pos);
                    node.setIsInt("int");
                    
                }else if(temp.getTipo().equals("string")){
                    ArrayList<String> valor_temp = (ArrayList<String>)temp.getValue();
                    node.setValue(valor_temp.get( (int)n_vp.getValue() ) );
                    node.setIsInt("string");
                }
                else if(temp.getTipo().equals("chr")){
                    ArrayList valor_temp = (ArrayList)temp.getValue();
                    char pos =((String)valor_temp.get( (int)n_vp.getValue())).charAt(0);
                    node.setValue(pos);
                    node.setIsInt("chr");
                }
                else if(temp.getTipo().equals("bool")){
                    ArrayList valor_temp = (ArrayList)temp.getValue();
                    boolean pos =(boolean)valor_temp.get( (int)n_vp.getValue() );
                    node.setValue(pos);
                    node.setIsInt("bool");
                }


                parser.cont++;
                Node identificador = new Node();
                identificador.setEtiqueta("ID");
                identificador.setID(parser.cont);
                identificador.setValor(id);
                node.addHijos(identificador);
                node.addHijos((Node) vp);
                node.setValor("");

                RESULT = node;
            :}
            | ID:id DOT AT L_PAR math_op:vp1 COMMA math_op:vp2 R_PAR 
            {:
                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("val");
                node.setID(parser.cont);
                
                parser.cont++;
                Node identificador = new Node();
                identificador.setEtiqueta("ID");
                identificador.setID(parser.cont);
                identificador.setValor(id);
                node.addHijos(identificador);
                node.addHijos((Node) vp1);
                node.addHijos((Node) vp2);
                node.setValor("");

                RESULT = node;
        :}
        | NUM:nm
        {:
                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("val");
                node.setID(parser.cont);
                node.setValue(Integer.parseInt(nm));
                parser.cont++;
                Node num = new Node();
                num.setEtiqueta("num");
                num.setID(parser.cont);
                num.setValor(nm);

                node.setValor(num.getValor());
                node.setIsInt("int");
                RESULT = node;
        :}
        | dec_llamada_funcion:dlf
        {:
                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("val");
                node.setID(parser.cont);
                node.addHijos((Node) dlf);
                RESULT = node;
        :}
        | L_PAR math_op:mo R_PAR 
        {:
                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("val");
                node.setID(parser.cont);
                Node n_mo=(Node) mo;
                node.addHijos(n_mo);
                node.setValue("("+n_mo.getValue()+")");
                node.setIsInt(n_mo.isIsInt());
                RESULT = node;
        :}
        ;

dec_while ::= WHILE L_PAR condicion:cond R_PAR L_KEY dec_general:dg R_KEY
            {:
                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("dec_while");
                node.setID(parser.cont);
                Node n_cond=(Node) cond;
                node.addHijos(n_cond);
                node.addHijos((Node) dg);
                System.out.println("Booleana:"+n_cond.getValue());
                RESULT = node;
            :}
;



dec_for ::= FOR L_PAR ID:id COMMA math_op:nm1 UPTO math_op:nm2 COMMA STEP L_PAR math_op:nm3 R_PAR R_PAR L_KEY dec_general:dg R_KEY
            {:
                MensajesEntrada.add("Entra a dec_for 1");
                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("dec_for");
                node.setID(parser.cont);

                parser.cont++;
                Node identificador = new Node();
                identificador.setEtiqueta("ID");
                identificador.setID(parser.cont);
                identificador.setValor(id);
                /*parser.cont++;
                Node num1 =new Node();
                num1.setEtiqueta("num");
                num1.setID(parser.cont);
                num1.setValor(nm1);
                parser.cont++;
                Node num2 =new Node();
                num2.setEtiqueta("num");
                num2.setID(parser.cont);
                num2.setValor(nm2);
                parser.cont++;
                Node num3 =new Node();
                num3.setEtiqueta("num");
                num3.setID(parser.cont);
                num3.setValor(nm3);*/     
                node.addHijos(identificador);
                node.addHijos((Node) nm1);
                node.addHijos((Node) nm2);
                node.addHijos((Node) nm3);
                node.addHijos((Node) dg);
                RESULT = node;
            :}
            | FOR L_PAR ID:id COMMA math_op:nm1 DOWNTO math_op:nm2 COMMA STEP L_PAR math_op:nm3 R_PAR R_PAR L_KEY dec_general:dg R_KEY
            {:
                MensajesEntrada.add("Entra a dec_for 2");
                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("dec_for");
                node.setID(parser.cont);

                parser.cont++;
                Node identificador = new Node();
                identificador.setEtiqueta("ID");
                identificador.setID(parser.cont);
                identificador.setValor(id);
                /*parser.cont++;
                Node num1 =new Node();
                num1.setEtiqueta("num");
                num1.setID(parser.cont);
                num1.setValor(nm1);
                parser.cont++;
                Node num2 =new Node();
                num2.setEtiqueta("num");
                num2.setID(parser.cont);
                num2.setValor(nm2);
                parser.cont++;
                Node num3 =new Node();
                num3.setEtiqueta("num");
                num3.setID(parser.cont);
                num3.setValor(nm3);*/     
                node.addHijos(identificador);
                node.addHijos((Node) nm1);
                node.addHijos((Node) nm2);
                node.addHijos((Node) nm3);
                node.addHijos((Node) dg);
                RESULT = node;
            :}
            | FOR L_PAR VARIABLE ID:id COLON INTEGER COMMA math_op:nm1 UPTO math_op:nm2 COMMA STEP L_PAR math_op:nm3 R_PAR R_PAR L_KEY dec_general:dg R_KEY
            {:
                MensajesEntrada.add("Entra a dec_for 3");
                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("dec_for");
                node.setID(parser.cont);

                parser.cont++;
                Node identificador = new Node();
                identificador.setEtiqueta("ID");
                identificador.setID(parser.cont);
                identificador.setValor(id);
                /*parser.cont++;
                Node num1 =new Node();
                num1.setEtiqueta("num");
                num1.setID(parser.cont);
                num1.setValor(nm1);
                parser.cont++;
                Node num2 =new Node();
                num2.setEtiqueta("num");
                num2.setID(parser.cont);
                num2.setValor(nm2);
                parser.cont++;
                Node num3 =new Node();
                num3.setEtiqueta("num");
                num3.setID(parser.cont);
                num3.setValor(nm3); */    
                node.addHijos(identificador);
                node.addHijos((Node) nm1);
                node.addHijos((Node) nm2);
                node.addHijos((Node) nm3);
                node.addHijos((Node) dg);
                RESULT = node;
            :}
            | FOR L_PAR VARIABLE ID:id COLON INTEGER COMMA math_op:nm1 DOWNTO math_op:nm2 COMMA STEP L_PAR math_op:nm3 R_PAR R_PAR L_KEY dec_general:dg R_KEY
            {:
                MensajesEntrada.add("Entra a dec_for 4");
                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("dec_for");
                node.setID(parser.cont);

                parser.cont++;
                Node identificador = new Node();
                identificador.setEtiqueta("ID");
                identificador.setID(parser.cont);
                identificador.setValor(id);
               /* parser.cont++;
                Node num1 =new Node();
                num1.setEtiqueta("num");
                num1.setID(parser.cont);
                num1.setValor(nm1);
                parser.cont++;
                Node num2 =new Node();
                num2.setEtiqueta("num");
                num2.setID(parser.cont);
                num2.setValor(nm2);
                parser.cont++;
                Node num3 =new Node();
                num3.setEtiqueta("num");
                num3.setID(parser.cont);
                num3.setValor(nm3);*/     
                node.addHijos(identificador);
                node.addHijos((Node) nm1);
                node.addHijos((Node) nm2);
                node.addHijos((Node) nm3);
                node.addHijos((Node) dg);
                RESULT = node;
            :}
    
            ;

dec_switch ::= SWITCH L_PAR ID:id R_PAR L_KEY list_op:lo R_KEY 
            {:
                MensajesEntrada.add("Entra a dec_switch");
                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("dec_switch");
                node.setID(parser.cont);

                parser.cont++;
                Node identificador = new Node();
                identificador.setEtiqueta("ID");
                identificador.setID(parser.cont);
                identificador.setValor(id);
                node.addHijos(identificador);
                node.addHijos((Node) lo);
                RESULT = node;
            :}
            ;

list_op ::= OPTION valor:vl COLON dec_general:dg new_op:nwo 
            {:
                MensajesEntrada.add("Entra a list_op");
                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("list_op");
                node.setID(parser.cont);
                node.addHijos((Node) vl);
                node.addHijos((Node) dg);
                node.addHijos((Node) nwo);
                RESULT = node;
            :}
            ;

new_op ::= BREAK SEMICOLON list_op:lo
            {:
                MensajesEntrada.add("Entra a new_op 1");
                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("option");
                node.setID(parser.cont);
                node.addHijos((Node) lo);
                RESULT = node;
            :}
            | BREAK SEMICOLON DEFAULT COLON dec_general:dg
            {:
                MensajesEntrada.add("Entra a new_op 2");
                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("default");
                node.setID(parser.cont);
                node.addHijos((Node) dg);
                RESULT = node;
            :}
            | BREAK SEMICOLON 
            {:
                MensajesEntrada.add("Entra a new_op 3");
                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("new_op");
                node.setID(parser.cont);
                RESULT = node;
            :}
            ;

dec_if ::= IF L_PAR condicion:cond R_PAR L_KEY dec_general:dg R_KEY dec_else:del
            {:
                MensajesEntrada.add("Entra a dec_if");
                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("dec_if");
                node.setID(parser.cont);
                node.addHijos((Node) cond);
                node.addHijos((Node) dg);
                node.addHijos((Node) del);
                RESULT = node;
            :}
            |error  dec_if
                {:
                MensajesEntrada.add("Entra a dec_general nos vamos para el error ");
                Node node = new Node();
                RESULT = node;
            :}
        
            
            ;
dec_else ::= ELIF L_PAR condicion:cond R_PAR L_KEY dec_general:dg R_KEY dec_else:del
            {:
                MensajesEntrada.add("Entra a dec_else elif");
                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("dec_elif");
                node.setID(parser.cont);
                node.addHijos((Node) cond);
                node.addHijos((Node) dg);
                node.addHijos((Node) del);
                RESULT = node;
            :}
            |ELSE L_KEY dec_general:dg R_KEY 
            {:
                MensajesEntrada.add("Entra a dec_else else");
                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("dec_else");
                node.setID(parser.cont);
                node.addHijos((Node) dg);
                RESULT = node;
            :}
            |
            {:
                parser.cont++;
                Node nodo = new Node();
				nodo.setEtiqueta("vacio");
				nodo.setID(parser.cont);
                RESULT = nodo;
            :}
            ;

dec_llamada_funcion ::= ID:id L_PAR llamada_parametros:llp R_PAR
            {:
                MensajesEntrada.add("Entra a dec_llamada_funcion");
                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("dec_llamada_funcion");
                node.setValor(id);
                node.setID(parser.cont);
                Node n_llp=(Node) llp;
                node.addHijos(n_llp);
                ArrayList<String> tipos =(ArrayList<String>)n_llp.getValue();
                Function tempo=buscaTipo2(id,false);
                String concat= "(";
                node.setLine(idright);
                node.setColummn(idleft);
                //System.out.println("veamo si me retorna el numero de parametros: "+tempo.getParametros().size());
                
                /*if(!tempo.getParametros().isEmpty()){
                    for ( Variable parametro : tempo.getParametros()){
                        concat+=parametro.getTipo()+"," ;
                    }
                }
                concat = concat.substring(0,concat.length()-1); 
                concat+=")";

                ArrayList<Variable> var =(ArrayList<Variable>) tempo.getParametros();
                boolean bandera=true;
                /*System.out.println(tipos.size()+"=="+var.size());
                if(tipos.size()==var.size() && !tempo.getId().equals("-1")){
                    for (int i = 0; i < var.size(); i++) {
                        if(!tipos.get(i).equals(var.get(i).getTipo())){
                            bandera=false;
                        }
                    }
                    if(bandera){
                        System.out.println("LLAMADA CORRECTA");
                    }else{
                        
                        System.out.println("INCOMPATIBILIDAD DE TIPOS");
                        semantic_errors("Tipo de parametro erroneo, se espera lo siguiente: "+concat,idleft,idright);
                    }
                }else{
                    System.out.println("diferente cantidad de parametros o no existe");
                    semantic_errors("Numero erroneo de parametros, se espera lo siguiente: "+concat,idleft,idright);


                }*/
                


                RESULT = node;
            :}
            | INPUT:in L_PAR ID:id COMMA tipo:tip R_PAR 
               {:
                MensajesEntrada.add("Entra a func_input");
                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("func_input");
                node.setID(parser.cont);
                parser.cont++;
                Node identificador =new Node();
                identificador.setEtiqueta("ID");
                identificador.setID(parser.cont);
                identificador.setValor(id);
                node.addHijos(identificador);
                node.addHijos((Node) tip);
                RESULT = node;
                :}
                

                |   OUTPUT:out L_PAR params_output:llp R_PAR  
                {:
                MensajesEntrada.add("Entra a func_output ");
                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("func_output");
                node.setValor(out);
                node.setID(parser.cont);
                node.addHijos((Node) llp);
                RESULT = node;
                :}
                   
            | error R_PAR
            ;

llamada_parametros ::= valor:vl lista_valores:lv
            {:
                MensajesEntrada.add("Entra a llamada_parametros 1");
                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("llamada_parametros");
                node.setID(parser.cont);
                Node n_vl=(Node) vl;
                Node n_lv=(Node) lv;
                node.addHijos(n_vl);
                node.addHijos(n_lv);
                ArrayList<String> tipos=(ArrayList<String>) n_lv.getValue();
                tipos.add(n_vl.getValor());
                for(String tips: tipos){
                    System.out.println(tips);
                }
                node.setValue(tipos);
                RESULT = node;
            :}
            | valor:vl
            {:
                MensajesEntrada.add("Entra a llamada_parametros 2");
                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("llamada_parametros");
                node.setID(parser.cont);
                Node n_vl=(Node) vl;
                node.addHijos(n_vl);
                ArrayList<String> tipos=new ArrayList();
                tipos.add(n_vl.getValor());
                for(String tips: tipos){
                    System.out.println("solo: "+tips);
                }
                node.setValue(tipos);
                RESULT = node;
            :}
            |
            {:
                MensajesEntrada.add("Entra a vacio");
                parser.cont++;
                Node nodo = new Node();
				nodo.setEtiqueta("vacio");
				nodo.setID(parser.cont);
                ArrayList<String> tipos=new ArrayList();
                nodo.setValue(tipos);
                System.out.println("no llama nada");
                RESULT = nodo;
            :}
            ;

params_output ::= valor:vl lista_valores:lv
            {:
                MensajesEntrada.add("Entra a llamada_parametros 1");
                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("params_output");
                node.setID(parser.cont);
                node.addHijos((Node) vl);
                node.addHijos((Node) lv);
                RESULT = node;
            :}
            | valor:vl
            {:
                MensajesEntrada.add("Entra a llamada_parametros 2");
                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("params_output");
                node.setID(parser.cont);
                node.addHijos((Node) vl);
                RESULT = node;
            :};

lista_valores ::= COMMA valor:vl lista_valores:lv
            {:
                MensajesEntrada.add("Entra a lista_valores 1");
                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("lista_valores");
                node.setID(parser.cont);
                Node n_vl=(Node) vl;
                Node n_lv=(Node) lv;
                node.addHijos(n_vl);
                node.addHijos(n_lv);
                ArrayList<String> tipos=(ArrayList<String>) n_lv.getValue();
                tipos.add(n_vl.getValor());
                node.setValue(tipos);
                RESULT = node;
            :}
            |COMMA valor:vl
            {:
                MensajesEntrada.add("Entra a lista_valores 2");
                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("lista_valores");
                node.setID(parser.cont);
                Node n_vl=(Node) vl;
                node.addHijos(n_vl);
                ArrayList<String> tipos=new ArrayList();
                tipos.add(n_vl.getValor());
                node.setValue(tipos);
                RESULT = node;
            :}
            |error COMMA
            ;
condicion  ::=OPNEG L_PAR condicion2:cond R_PAR otra_condicion:otrac
            {:
                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("inicio_condiciones");
                //node.setValor(vc.getValor());
                node.setID(parser.cont);
                Node n_cond=(Node) cond;
                Node n_otrac=(Node) otrac;
                node.addHijos(n_cond);
                node.addHijos(n_otrac);
                node.setValue("!("+n_cond.getValue()+")"+n_otrac.getValue());
                RESULT = node;
            :} 
            |condicion2:cond
            {:
                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("inicio_condiciones");
                node.setID(parser.cont);
                Node n_cond=(Node) cond;
                node.addHijos(n_cond);
                node.setValue(n_cond.getValue());
                RESULT = node;
            :}
            ;
condicion2 ::= valor_cond:vc mas_condicion:masc otra_condicion:otrac
                {:
                    parser.cont++;
                    Node node = new Node();
                    node.setEtiqueta("inicio_condiciones");
                    //node.setValor(vc.getValor());
                    node.setID(parser.cont);
                    Node n_vc=(Node) vc;
                    Node n_masc=(Node) masc;
                    Node n_otrac=(Node) otrac;
                    node.addHijos(n_vc);
                    node.addHijos(n_masc);
                    node.addHijos(n_otrac);
                    node.setValue(""+n_vc.getValue()+n_masc.getValue()+n_otrac.getValue());
                    RESULT = node;
                
                :} 
                ;
mas_condicion ::= OPREL:opre valor_cond:vc mas_condicion:masc
                {:
                    parser.cont++;
                    Node node = new Node();
                    node.setEtiqueta("mas_condicion");
                    node.setID(parser.cont);
                    Node n_vc=(Node) vc;
                    Node n_masc=(Node) masc;
                    node.setValor(opre);
                    node.addHijos(n_vc);
                    node.addHijos(n_masc);
                    node.setValue(""+opre+n_vc.getValue()+n_masc.getValue());
                    RESULT = node;
                :}
                |
                {:
                    parser.cont++;
                    Node nodo = new Node();
				    nodo.setEtiqueta("vacio");
                    nodo.setValue("");
				    nodo.setID(parser.cont);
                    RESULT = nodo;
                :}
                ;
otra_condicion ::= OPLOG:oplg condicion:cond
                {:
                    parser.cont++;
                    Node node = new Node();
                    node.setEtiqueta("otra_condicion");
                    node.setID(parser.cont);
                    Node n_cond=(Node) cond;
                    node.setValor(oplg);
                    node.addHijos(n_cond);
                    node.setValue(""+oplg+n_cond.getValue());
                    //node.addHijos((Node) masc);
                    //node.addHijos((Node) otrac);
                    RESULT = node;
                :}
                |
                {:
                    parser.cont++;
                    Node nodo = new Node();
				    nodo.setEtiqueta("vacio");
                    nodo.setValue("");
				    nodo.setID(parser.cont);
                    RESULT = nodo;
                :}
                |error otra_condicion
                ;
valor_cond ::= TRUE:tru
            {:
                MensajesEntrada.add("Entra a valor_cond 3");
                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("valor_cond");
                node.setID(parser.cont);
                
                parser.cont++;
                Node bool_true = new Node();
                bool_true.setEtiqueta("true");
                bool_true.setID(parser.cont);
                bool_true.setValor(tru);
                node.setValue("true");
                node.setValor(bool_true.getValor());
                RESULT = node;
            :}
            | FALSE:fals
            {:
                MensajesEntrada.add("Entra a valor_cond 4");
                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("valor");
                node.setID(parser.cont);
                
                parser.cont++;
                Node bool_false = new Node();
                bool_false.setEtiqueta("false");
                bool_false.setID(parser.cont);
                bool_false.setValor(fals);
                node.setValue("false");
                node.setValor(bool_false.getValor());
                RESULT = node;
            :}
            | math_op:mop
           {:
                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("valor");
                node.setID(parser.cont);
                Node n_mop=(Node) mop;
                node.setValue(n_mop.getValue());
                node.addHijos(n_mop);
                RESULT = node;
           :}
            
            ;

dec_return ::= RETURN valor:vl
            {:
                MensajesEntrada.add("Entra a dec_return 1");
                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("dec_return");
                node.setID(parser.cont);
                node.addHijos(vl);
                RESULT = node;
            :}
            | RETURN 
            {:
                MensajesEntrada.add("Entra a dec_return 2");  
                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("dec_return");
                node.setID(parser.cont);
                RESULT = node;
            :}
            ;


tipo ::= BOOLEAN
            {:
                MensajesEntrada.add("Entra a tipo 1");
                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("tipo");
                node.setID(parser.cont);
                node.setValor("bool");
                RESULT = node;
            :}
            | CHARACTER
            {:
                MensajesEntrada.add("Entra a tipo 2");
                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("tipo");
                node.setID(parser.cont);
                node.setValor("chr");
                RESULT = node;
            :}
            | INTEGER
            {:
                MensajesEntrada.add("Entra a tipo 3");
                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("tipo");
                node.setID(parser.cont);
                node.setValor("int");
                RESULT = node;
            :}
            | VOID
            {:
                MensajesEntrada.add("Entra a tipo 4");
                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("tipo");
                node.setID(parser.cont);
                node.setValor("Void");
                RESULT = node;
            :}
            | STRING 
            {:  
                MensajesEntrada.add("Entra a tipo 5");
                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("tipo");
                node.setID(parser.cont);
                node.setValor("string");
                RESULT = node;
            :}
            | FLOAT 
            {:  
                MensajesEntrada.add("Entra a tipo 5");
                parser.cont++;
                Node node = new Node();
                node.setEtiqueta("tipo");
                node.setID(parser.cont);
                node.setValor("FLOAT");
                RESULT = node;
            :}
            ;
